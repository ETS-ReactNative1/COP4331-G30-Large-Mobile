ee3d2e4741d3001567436f68c08796ab
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _excluded = ["style"],
    _excluded2 = ["style"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var View = require('../Components/View/View');

var _require = require('./AnimatedEvent'),
    AnimatedEvent = _require.AnimatedEvent;

var AnimatedProps = require('./nodes/AnimatedProps');

var React = require('react');

var NativeAnimatedHelper = require('./NativeAnimatedHelper');

var invariant = require('invariant');

var setAndForwardRef = require('../Utilities/setAndForwardRef');

var animatedComponentNextId = 1;

function createAnimatedComponent(Component) {
  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');

  var AnimatedComponent = function (_React$Component) {
    (0, _inherits2.default)(AnimatedComponent, _React$Component);

    var _super = _createSuper(AnimatedComponent);

    function AnimatedComponent() {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._invokeAnimatedPropsCallbackOnMount = false;
      _this._eventDetachers = [];
      _this._animatedComponentId = animatedComponentNextId++ + ":animatedComponent";

      _this._isFabric = function () {
        var _this$_component$_int, _this$_component$_int2, _this$_component$getN, _this$_component$getN2, _this$_component$getS, _this$_component$getS2;

        if (_this._component == null) {
          return false;
        }

        return ((_this$_component$_int = _this._component['_internalInstanceHandle']) == null ? void 0 : (_this$_component$_int2 = _this$_component$_int.stateNode) == null ? void 0 : _this$_component$_int2.canonical) != null || _this._component.getNativeScrollRef != null && _this._component.getNativeScrollRef() != null && ((_this$_component$getN = _this._component.getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getN2 = _this$_component$getN.stateNode) == null ? void 0 : _this$_component$getN2.canonical) != null || _this._component.getScrollResponder != null && _this._component.getScrollResponder() != null && _this._component.getScrollResponder().getNativeScrollRef != null && _this._component.getScrollResponder().getNativeScrollRef() != null && ((_this$_component$getS = _this._component.getScrollResponder().getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getS2 = _this$_component$getS.stateNode) == null ? void 0 : _this$_component$getS2.canonical) != null;
      };

      _this._waitForUpdate = function () {
        if (_this._isFabric()) {
          NativeAnimatedHelper.API.setWaitingForIdentifier(_this._animatedComponentId);
        }
      };

      _this._markUpdateComplete = function () {
        if (_this._isFabric()) {
          NativeAnimatedHelper.API.unsetWaitingForIdentifier(_this._animatedComponentId);
        }
      };

      _this._animatedPropsCallback = function () {
        if (_this._component == null) {
          _this._invokeAnimatedPropsCallbackOnMount = true;
        } else if (process.env.NODE_ENV === 'test' || typeof _this._component.setNativeProps !== 'function' || _this._isFabric()) {
          _this.forceUpdate();
        } else if (!_this._propsAnimated.__isNative) {
          _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
        } else {
          throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
        }
      };

      _this._setComponentRef = setAndForwardRef({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          _this._prevComponent = _this._component;
          _this._component = ref;

          if (ref != null && ref.getNode == null) {
            ref.getNode = function () {
              var _ref$constructor$name;

              console.warn('%s: Calling `getNode()` on the ref of an Animated component ' + 'is no longer necessary. You can now directly use the ref ' + 'instead. This method will be removed in a future release.', (_ref$constructor$name = ref.constructor.name) != null ? _ref$constructor$name : '<<anonymous>>');
              return ref;
            };
          }
        }
      });
      return _this;
    }

    (0, _createClass2.default)(AnimatedComponent, [{
      key: "_attachNativeEvents",
      value: function _attachNativeEvents() {
        var _this$_component,
            _this2 = this;

        var scrollableNode = (_this$_component = this._component) != null && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;

        var _loop = function _loop(key) {
          var prop = _this2.props[key];

          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__attach(scrollableNode, key);

            _this2._eventDetachers.push(function () {
              return prop.__detach(scrollableNode, key);
            });
          }
        };

        for (var key in this.props) {
          _loop(key);
        }
      }
    }, {
      key: "_detachNativeEvents",
      value: function _detachNativeEvents() {
        this._eventDetachers.forEach(function (remove) {
          return remove();
        });

        this._eventDetachers = [];
      }
    }, {
      key: "_attachProps",
      value: function _attachProps(nextProps) {
        var oldPropsAnimated = this._propsAnimated;

        if (nextProps === oldPropsAnimated) {
          return;
        }

        this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);

        if (oldPropsAnimated) {
          oldPropsAnimated.__restoreDefaultValues();

          oldPropsAnimated.__detach();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _props$nativeID;

        var _ref = this._propsAnimated.__getValue() || {},
            _ref$style = _ref.style,
            style = _ref$style === void 0 ? {} : _ref$style,
            props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

        var _ref2 = this.props.passthroughAnimatedPropExplicitValues || {},
            _ref2$style = _ref2.style,
            passthruStyle = _ref2$style === void 0 ? {} : _ref2$style,
            passthruProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);

        var mergedStyle = (0, _extends2.default)({}, style, passthruStyle);
        return React.createElement(Component, (0, _extends2.default)({}, props, passthruProps, {
          style: mergedStyle,
          ref: this._setComponentRef,
          nativeID: (_props$nativeID = props.nativeID) != null ? _props$nativeID : this._isFabric() ? 'animatedComponent' : undefined,
          collapsable: this._propsAnimated.__isNative ? false : props.collapsable
        }));
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        this._waitForUpdate();

        this._attachProps(this.props);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._invokeAnimatedPropsCallbackOnMount) {
          this._invokeAnimatedPropsCallbackOnMount = false;

          this._animatedPropsCallback();
        }

        this._propsAnimated.setNativeView(this._component);

        this._attachNativeEvents();

        this._markUpdateComplete();
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this._waitForUpdate();

        this._attachProps(newProps);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this._component !== this._prevComponent) {
          this._propsAnimated.setNativeView(this._component);
        }

        if (this._component !== this._prevComponent || prevProps !== this.props) {
          this._detachNativeEvents();

          this._attachNativeEvents();
        }

        this._markUpdateComplete();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._propsAnimated && this._propsAnimated.__detach();

        this._detachNativeEvents();

        this._markUpdateComplete();
      }
    }]);
    return AnimatedComponent;
  }(React.Component);

  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {
    return React.createElement(AnimatedComponent, (0, _extends2.default)({}, props, ref == null ? null : {
      forwardedRef: ref
    }));
  });
}

module.exports = createAnimatedComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,