{"version":3,"sources":["Screens.test.js"],"names":["mock","describe","it","test","expect","toHaveLength"],"mappings":"AAYA,cAAKA,IAAL,CAAU,uCAAV;;AACA,cAAKA,IAAL,CAAU,mCAAV;;;;AATA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;AAKAC,QAAQ,CAAC,cAAD,EAAiB,YAAM;AAC7BC,EAAAA,EAAE,CAAC,mBAAD,EAAsB,YAAM;AAQ1B,QAAMC,IAAI,GAAG,CAAC,MAAD,CAAb;AACAC,IAAAA,MAAM,CAACD,IAAD,CAAN,CAAaE,YAAb,CAA0B,CAA1B;AACH,GAVC,CAAF;AAWD,CAZO,CAAR","sourcesContent":["\n\n\n\nimport 'react-native';\nimport React from 'react';\nimport LoginMobile from '../screens/LoginMobile';\nimport RegisterMobile from '../screens/RegisterMobile';\nimport ForgotPasswordMobile from '../screens/ForgotPasswordMobile';\nimport FontAwesomeIcon from \"react-native-vector-icons/FontAwesome\";\nimport * as renderer from 'react-test-renderer';\n\njest.mock('react-native-vector-icons/FontAwesome');\njest.mock('react-native-vector-icons/Feather');\n\ndescribe('Screen Tests', () => {\n  it('renders correctly', () => {\n  /*\n      const tree = renderer.create(\n        <LoginMobile />\n        );\n      expect(tree).toMatchSnapshot();\n      */\n\n      const test = ['test'];\n      expect(test).toHaveLength(1);\n  });\n});\n\n\n/*\ndescribe('Screen Tests', () => {\n\n  it('Forgot password renders correctly', () => {\n    const tree = renderer.create(\n      <ForgotPasswordMobile />\n      ).toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n\n  it('Register renders correctly', () => {\n    const tree = renderer.create(\n      <RegisterMobile />\n      ).toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n\n//import FontAwesomeIcon from \"react-native-vector-icons/FontAwesome\";\n  it('Login renders correctly', () => {\n    const tree = renderer.create(\n      <LoginMobile />\n      ).toJSON();\n    expect(tree).toMatchSnapshot();\n  });\n});\n*/\n/*\nimport React from \"react\";\nimport renderer from \"react-test-renderer\";\n//import App from \"../App.js\"\nimport LoginMobile from '../screens/LoginMobile';\n\ndescribe(\"<LoginMobile />\", () => {\n    it('has 1 child', () => {\n        const tree = renderer.create(<LoginMobile />).toJSON();\n        expect(tree.children.length).toBe(1);\n    });\n});*/"]}