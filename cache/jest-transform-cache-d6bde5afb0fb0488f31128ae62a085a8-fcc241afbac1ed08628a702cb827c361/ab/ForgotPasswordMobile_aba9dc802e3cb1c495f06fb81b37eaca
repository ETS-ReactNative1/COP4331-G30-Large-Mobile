95717fa9248c2c9304eb4281980aaa81
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _GoBackButtonComponent = _interopRequireDefault(require("../components/GoBackButtonComponent"));

var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));

var _ResetPassButtonComponent = _interopRequireDefault(require("../components/forgot_password/ResetPassButtonComponent"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ForgotPasswordMobile = function (_Component) {
  (0, _inherits2.default)(ForgotPasswordMobile, _Component);

  var _super = _createSuper(ForgotPasswordMobile);

  function ForgotPasswordMobile() {
    var _this;

    (0, _classCallCheck2.default)(this, ForgotPasswordMobile);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      message: '',
      isEmailValid: true,
      emailSent: false
    };

    _this.handleMessageChange = function (message) {
      if (message !== "Success") {
        _this.setState({
          message: message
        });
      } else {
        _this.newPasswordInput.clear();
      }
    };

    _this.handleEmailValidChange = function (valid) {
      _this.setState(function (_ref) {
        var isEmailValid = _ref.isEmailValid;
        return {
          isEmailValid: valid
        };
      });
    };

    _this.handleEmailSentChange = function (isSent) {
      _this.setState(function (_ref2) {
        var emailSent = _ref2.emailSent;
        return {
          emailSent: isSent
        };
      });
    };

    _this.forgotPasswordEmailChangedHandler = function _callee(val) {
      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              global.email_forgot_password = val;

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    };

    return _this;
  }

  (0, _createClass2.default)(ForgotPasswordMobile, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return _react.default.createElement(_reactNative.View, {
        style: styles.container
      }, _react.default.createElement(_reactNative.ImageBackground, {
        source: require("../assets/images/background3.png"),
        resizeMode: "cover",
        style: styles.background
      }, _react.default.createElement(_GoBackButtonComponent.default, {
        navigation: this.props.navigation,
        style: styles.goBackButtonComponent1
      }), _react.default.createElement(_reactNative.View, {
        style: styles.forgotPassword_ForgotPassword
      }, _react.default.createElement(_reactNative.View, {
        style: styles.forgotPassword_Background
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.header_Forgot
      }, "Forgot Your Password?"), _react.default.createElement(_reactNative.Text, {
        style: styles.prompt_User_Text
      }, " Enter the email linked to your account."), _react.default.createElement(_reactNative.Text, {
        style: styles.text_Incorrect
      }, this.state.message), _react.default.createElement(_reactNative.View, {
        style: styles.email
      }, _react.default.createElement(_reactNative.TextInput, {
        placeholder: "E-Mail",
        style: [styles.emailField, !this.state.isEmailValid && styles.incorrect],
        onChangeText: function onChangeText(val) {
          _this2.forgotPasswordEmailChangedHandler(val);
        },
        ref: function ref(input) {
          _this2.newPasswordInput = input;
        }
      }), _react.default.createElement(_FontAwesome.default, {
        name: "envelope",
        style: styles.eMailIcon
      })), _react.default.createElement(_ResetPassButtonComponent.default, {
        state: this.state,
        onMessageChange: this.handleMessageChange,
        onEmailValidChange: this.handleEmailValidChange,
        onEmailSentChange: this.handleEmailSentChange,
        style: styles.resetPasswordButtonComponent
      }))), _react.default.createElement(_reactNative.View, {
        style: styles.resetPassword_Verification
      }, this.state.emailSent && _react.default.createElement(_reactNative.View, {
        style: styles.resetPassword_VerificationBackground
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.text_verifyEmail
      }, "Password Reset Sent! Check your email.")))));
    }
  }]);
  return ForgotPasswordMobile;
}(_react.Component);

exports.default = ForgotPasswordMobile;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "rgba(255,255,255,1)"
  },
  incorrect: {
    backgroundColor: "rgba(242, 38, 19, 0.1)"
  },
  background: {
    flex: 1,
    justifyContent: "center",
    width: "100%",
    height: "100%"
  },
  goBackButtonComponent1: {
    position: "absolute",
    top: "6.5%",
    right: 24,
    height: 50,
    width: 50
  },
  forgotPassword_ForgotPassword: {
    height: "45%",
    position: "absolute",
    left: 25,
    top: "25%",
    right: 25
  },
  forgotPassword_Background: {
    top: "0%",
    left: 0,
    height: "100%",
    position: "absolute",
    backgroundColor: "rgba(255,255,255,1)",
    borderRadius: 15,
    shadowColor: "rgba(0,0,0,1)",
    shadowOffset: {
      width: 3,
      height: 3
    },
    elevation: 10,
    shadowOpacity: 0.25,
    shadowRadius: 10,
    right: 0,
    borderColor: "rgba(210,210,210,210)",
    borderWidth: 1
  },
  header_Forgot: {
    top: "9.78%",
    position: "absolute",
    fontFamily: "roboto-700",
    color: "rgba(15,163,177,1)",
    fontSize: 28,
    height: 39,
    left: 0,
    textAlign: "center",
    right: 0
  },
  prompt_User_Text: {
    top: "25%",
    position: "absolute",
    fontFamily: "roboto-regular",
    color: "#121212",
    textAlign: "center",
    fontSize: 16,
    left: 23,
    height: 43,
    right: 23
  },
  text_Incorrect: {
    top: "40%",
    left: 0,
    position: "absolute",
    fontFamily: "roboto-700",
    color: "rgba(242, 38, 19, 1)",
    fontSize: 16,
    textAlign: "center",
    right: 0
  },
  email: {
    top: "51%",
    left: "8%",
    height: 41,
    position: "absolute",
    right: "8%"
  },
  emailField: {
    position: "absolute",
    fontFamily: "roboto-regular",
    color: "#121212",
    height: 41,
    borderWidth: 1,
    borderColor: "#000000",
    textAlign: "left",
    backgroundColor: "rgba(255,255,255,1)",
    fontSize: 16,
    top: "0%",
    left: 30,
    borderTopWidth: 0,
    borderRightWidth: 0,
    borderLeftWidth: 0,
    right: 0
  },
  eMailIcon: {
    top: 13,
    left: 0,
    position: "absolute",
    color: "rgba(15,163,177,1)",
    fontSize: 20
  },
  resetPasswordButtonComponent: {
    position: "absolute",
    top: "75%",
    left: 53,
    height: "13.33%",
    right: 53
  },
  resetPassword_Verification: {
    top: "80%",
    height: "6%",
    position: "absolute",
    left: 22,
    right: 22
  },
  resetPassword_VerificationBackground: {
    top: "0%",
    left: 0,
    height: "100%",
    position: "absolute",
    backgroundColor: "rgba(255,255,255,1)",
    borderRadius: 15,
    shadowColor: "rgba(0,0,0,1)",
    shadowOffset: {
      width: 3,
      height: 3
    },
    elevation: 10,
    shadowOpacity: 0.25,
    shadowRadius: 10,
    right: 0,
    borderColor: "rgba(210,210,210,210)",
    borderWidth: 1
  },
  text_verifyEmail: {
    top: "18.74%",
    left: 0,
    position: "absolute",
    fontFamily: "roboto-regular",
    color: "rgba(0,0,0,1)",
    fontSize: 16,
    right: 0,
    textAlign: "center"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,