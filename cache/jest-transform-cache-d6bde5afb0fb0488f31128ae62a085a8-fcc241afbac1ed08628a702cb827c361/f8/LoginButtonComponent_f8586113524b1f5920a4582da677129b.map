{"version":3,"sources":["LoginButtonComponent.js"],"names":["LoginButtonComponent","loginClick","props","ID","obj","username","global","username_login","trim","password","password_login","onMessageChange","js","JSON","stringify","fetch","method","body","headers","response","text","res","parse","status","Id","userId","firstName","FirstName","lastName","LastName","email","Email","phone","Phone","console","log","navigation","navigate","message","styles","container","style","login_Button","login_Text","Login_Text","Component","StyleSheet","create","top","left","width","height","position","backgroundColor","borderRadius","fontFamily","color","fontSize","textAlign","right"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;IAEqBA,oB;;;;;;;;;;;;;;;;UAcnBC,U,GAAa,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,cAAAA,EAFO,GAEF,IAFE;AAAA;AAOLC,cAAAA,GAPK,GAOC;AAACC,gBAAAA,QAAQ,EAACC,MAAM,CAACC,cAAP,CAAsBC,IAAtB,EAAV;AAAuCC,gBAAAA,QAAQ,EAACH,MAAM,CAACI,cAAP,CAAsBF,IAAtB;AAAhD,eAPD;AASTN,cAAAA,KAAK,CAACS,eAAN,CAAsB,EAAtB;AAGIC,cAAAA,EAZK,GAYAC,IAAI,CAACC,SAAL,CAAeV,GAAf,CAZA;AAAA;AAAA,gDAacW,KAAK,CAAC,mDAAD,EAC5B;AAACC,gBAAAA,MAAM,EAAC,MAAR;AAAeC,gBAAAA,IAAI,EAACL,EAApB;AAAuBM,gBAAAA,OAAO,EAAC;AAAC,kCAAgB;AAAjB;AAA/B,eAD4B,CAbnB;;AAAA;AAaHC,cAAAA,QAbG;AAAA,4BAeCN,IAfD;AAAA;AAAA,gDAekBM,QAAQ,CAACC,IAAT,EAflB;;AAAA;AAAA;AAeLC,cAAAA,GAfK,eAeMC,KAfN;;AAkBT,kBAAIH,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EACA;AAEErB,gBAAAA,KAAK,CAACS,eAAN,CAAsB,gCAAtB;AACD,eAJD,MAMA;AACET,gBAAAA,KAAK,CAACS,eAAN,CAAsB,SAAtB;AAEAR,gBAAAA,EAAE,GAAGkB,GAAG,CAACG,EAAT;AAEAlB,gBAAAA,MAAM,CAACmB,MAAP,GAAgBJ,GAAG,CAACG,EAApB;AACAlB,gBAAAA,MAAM,CAACoB,SAAP,GAAmBL,GAAG,CAACM,SAAvB;AACArB,gBAAAA,MAAM,CAACsB,QAAP,GAAkBP,GAAG,CAACQ,QAAtB;AACAvB,gBAAAA,MAAM,CAACD,QAAP,GAAkBC,MAAM,CAACC,cAAzB;AACAD,gBAAAA,MAAM,CAACwB,KAAP,GAAeT,GAAG,CAACU,KAAnB;AAEAzB,gBAAAA,MAAM,CAAC0B,KAAP,GAAeX,GAAG,CAACY,KAAnB;AAEAC,gBAAAA,OAAO,CAACC,GAAR,CACE,QAAQ7B,MAAM,CAACmB,MAAf,GAAwB,IAAxB,GACA,QADA,GACWnB,MAAM,CAACoB,SADlB,GAC8B,IAD9B,GAEA,OAFA,GAEUpB,MAAM,CAACsB,QAFjB,GAE4B,IAF5B,GAGA,WAHA,GAGctB,MAAM,CAACD,QAHrB,GAGgC,IAHhC,GAIA,QAJA,GAIWC,MAAM,CAACwB,KAJlB,GAI0B,IAJ1B,GAKA,QALA,GAKWxB,MAAM,CAAC0B,KANpB;AAUAE,gBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAjC,gBAAAA,KAAK,CAACkC,UAAN,CAAiBC,QAAjB,CAA0B,WAA1B;AACD;;AAjDQ;AAAA;;AAAA;AAAA;AAAA;AAqDTnC,cAAAA,KAAK,CAACS,eAAN,CAAsB,YAAE2B,OAAxB;;AArDS;AAAA,+CA2DJnC,EA3DI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;WAbb,kBAAS;AAAA;;AACP,aACE,6BAAC,6BAAD;AAAkB,QAAA,KAAK,EAAE,CAACoC,MAAM,CAACC,SAAR,EAAmB,KAAKtC,KAAL,CAAWuC,KAA9B;AAAzB,SACE,6BAAC,6BAAD;AACE,QAAA,OAAO,EAAI;AAAA,iBAAM,MAAI,CAACxC,UAAL,CAAgB,MAAI,CAACC,KAArB,CAAN;AAAA,SADb;AAEE,QAAA,KAAK,EAAEqC,MAAM,CAACG;AAFhB,SAIE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACI;AAApB,SAAiC,KAAKzC,KAAL,CAAW0C,UAAX,IAAyB,OAA1D,CAJF,CADF,CADF;AAUD;;;EAZ+CC,gB;;;;AA+ElD,IAAMN,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE,EADoB;AAE/BE,EAAAA,YAAY,EAAE;AACZM,IAAAA,GAAG,EAAE,CADO;AAEZC,IAAAA,IAAI,EAAE,CAFM;AAGZC,IAAAA,KAAK,EAAE,MAHK;AAIZC,IAAAA,MAAM,EAAE,MAJI;AAKZC,IAAAA,QAAQ,EAAE,UALE;AAMZC,IAAAA,eAAe,EAAE,oBANL;AAOZC,IAAAA,YAAY,EAAE;AAPF,GAFiB;AAW/BX,EAAAA,UAAU,EAAE;AACVK,IAAAA,GAAG,EAAE,KADK;AAEVC,IAAAA,IAAI,EAAE,CAFI;AAGVG,IAAAA,QAAQ,EAAE,UAHA;AAIVG,IAAAA,UAAU,EAAE,gBAJF;AAKVC,IAAAA,KAAK,EAAE,qBALG;AAMVC,IAAAA,QAAQ,EAAE,EANA;AAOVC,IAAAA,SAAS,EAAE,QAPD;AAQVC,IAAAA,KAAK,EAAE;AARG;AAXmB,CAAlB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { StyleSheet, TouchableOpacity, Text } from \"react-native\";\nimport { createStackNavigator, createAppContainer } from 'react-navigation'; \n\nexport default class LoginButtonComponent extends Component {\n  render() {\n    return (\n      <TouchableOpacity style={[styles.container, this.props.style]}>\n        <TouchableOpacity\n          onPress = {() => this.loginClick(this.props)}\n          style={styles.login_Button}\n        >\n          <Text style={styles.login_Text}>{this.props.Login_Text || \"Login\"}</Text>\n        </TouchableOpacity>\n      </TouchableOpacity>\n    )\n  }\n\n  loginClick = async (props) =>\n  {\n    var ID = \"-1\";\n\n    try \n    {\n      // Get typed username and password\n      var obj = {username:global.username_login.trim(),password:global.password_login.trim()}; \n\n      props.onMessageChange(\"\");\n\n      // Request user info\n      var js = JSON.stringify(obj); \n      const response = await fetch('https://cop4331-g30-large.herokuapp.com/api/login', \n      {method:'POST',body:js,headers:{'Content-Type': 'application/json'}}); \n      var res = JSON.parse(await response.text());\n\n      // If no user found\n      if (response.status !== 200)\n      { \n        // Change message on login screen\n        props.onMessageChange(\"Username or Password Incorrect\");\n      } \n      else \n      {\n        props.onMessageChange(\"Success\");\n\n        ID = res.Id;\n\n        global.userId = res.Id;\n        global.firstName = res.FirstName;\n        global.lastName = res.LastName;\n        global.username = global.username_login;\n        global.email = res.Email;\n        //console.log(res.email);\n        global.phone = res.Phone;\n\n        console.log(\n          \"ID \" + global.userId + \"\\n\" +\n          \"First \" + global.firstName + \"\\n\" +\n          \"Last \" + global.lastName + \"\\n\" +\n          \"Username \" + global.username + \"\\n\" +\n          \"Email \" + global.email + \"\\n\" +\n          \"Phone \" + global.phone\n        );\n\n        // Navigate to dashboard\n        console.log(\"Navigate to Dashboard\");\n        props.navigation.navigate('Dashboard');\n      } \n    } \n    catch(e) \n    {\n      props.onMessageChange(e.message); \n    }\n\n    //global.password = \"\";\n    //global.username = \"\";\n\n    return ID;\n  }\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {},\n  login_Button: {\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    backgroundColor: \"rgba(15,163,177,1)\",\n    borderRadius: 50\n  },\n  login_Text: {\n    top: \"25%\",\n    left: 0,\n    position: \"absolute\",\n    fontFamily: \"roboto-regular\",\n    color: \"rgba(255,255,255,1)\",\n    fontSize: 16,\n    textAlign: \"center\",\n    right: 0\n  }\n});\n"]}