e667e684ec8d324e5acf8a4010c7c860
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _TextInjection = _interopRequireDefault(require("./TextInjection"));

var _TextNativeComponent = require("./TextNativeComponent");

var _excluded = ["forwardedRef", "selectionColor"];

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var DeprecatedTextPropTypes = require('../DeprecatedPropTypes/DeprecatedTextPropTypes');

var React = require('react');

var TextAncestor = require('./TextAncestor');

var Touchable = require('../Components/Touchable/Touchable');

var nullthrows = require('nullthrows');

var processColor = require('../StyleSheet/processColor');

var PRESS_RECT_OFFSET = {
  top: 20,
  left: 20,
  right: 20,
  bottom: 30
};

var TouchableText = function (_React$Component) {
  (0, _inherits2.default)(TouchableText, _React$Component);

  var _super = _createSuper(TouchableText);

  function TouchableText() {
    var _this;

    (0, _classCallCheck2.default)(this, TouchableText);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = (0, _extends2.default)({}, Touchable.Mixin.touchableGetInitialState(), {
      isHighlighted: false,
      createResponderHandlers: _this._createResponseHandlers.bind((0, _assertThisInitialized2.default)(_this)),
      responseHandlers: null
    });
    return _this;
  }

  (0, _createClass2.default)(TouchableText, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          forwardedRef = _this$props.forwardedRef,
          selectionColor = _this$props.selectionColor,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);

      if (isTouchable(this.props)) {
        props = (0, _extends2.default)({}, props, this.state.responseHandlers, {
          isHighlighted: this.state.isHighlighted
        });
      }

      if (selectionColor != null) {
        props = (0, _extends2.default)({}, props, {
          selectionColor: processColor(selectionColor)
        });
      }

      if (__DEV__) {
        if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {
          props = (0, _extends2.default)({}, props, {
            style: [props.style, {
              color: 'magenta'
            }]
          });
        }
      }

      return React.createElement(TextAncestor.Consumer, null, function (hasTextAncestor) {
        return hasTextAncestor ? React.createElement(_TextNativeComponent.NativeVirtualText, (0, _extends2.default)({}, props, {
          onClick: props.onPress,
          ref: forwardedRef
        })) : React.createElement(TextAncestor.Provider, {
          value: true
        }, React.createElement(_TextNativeComponent.NativeText, (0, _extends2.default)({}, props, {
          ref: forwardedRef
        })));
      });
    }
  }, {
    key: "_createResponseHandlers",
    value: function _createResponseHandlers() {
      var _this2 = this;

      return {
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          var onStartShouldSetResponder = _this2.props.onStartShouldSetResponder;
          var shouldSetResponder = (onStartShouldSetResponder == null ? false : onStartShouldSetResponder()) || isTouchable(_this2.props);

          if (shouldSetResponder) {
            _this2._attachTouchHandlers();
          }

          return shouldSetResponder;
        },
        onResponderGrant: function onResponderGrant(event) {
          nullthrows(_this2.touchableHandleResponderGrant)(event);

          if (_this2.props.onResponderGrant != null) {
            _this2.props.onResponderGrant.call(_this2, event);
          }
        },
        onResponderMove: function onResponderMove(event) {
          nullthrows(_this2.touchableHandleResponderMove)(event);

          if (_this2.props.onResponderMove != null) {
            _this2.props.onResponderMove.call(_this2, event);
          }
        },
        onResponderRelease: function onResponderRelease(event) {
          nullthrows(_this2.touchableHandleResponderRelease)(event);

          if (_this2.props.onResponderRelease != null) {
            _this2.props.onResponderRelease.call(_this2, event);
          }
        },
        onResponderTerminate: function onResponderTerminate(event) {
          nullthrows(_this2.touchableHandleResponderTerminate)(event);

          if (_this2.props.onResponderTerminate != null) {
            _this2.props.onResponderTerminate.call(_this2, event);
          }
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          var onResponderTerminationRequest = _this2.props.onResponderTerminationRequest;

          if (!nullthrows(_this2.touchableHandleResponderTerminationRequest)()) {
            return false;
          }

          if (onResponderTerminationRequest == null) {
            return true;
          }

          return onResponderTerminationRequest();
        }
      };
    }
  }, {
    key: "_attachTouchHandlers",
    value: function _attachTouchHandlers() {
      var _this3 = this;

      if (this.touchableGetPressRectOffset != null) {
        return;
      }

      for (var key in Touchable.Mixin) {
        if (typeof Touchable.Mixin[key] === 'function') {
          this[key] = Touchable.Mixin[key].bind(this);
        }
      }

      this.touchableHandleActivePressIn = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({
            isHighlighted: true
          });
        }
      };

      this.touchableHandleActivePressOut = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({
            isHighlighted: false
          });
        }
      };

      this.touchableHandlePress = function (event) {
        if (_this3.props.onPress != null) {
          _this3.props.onPress(event);
        }
      };

      this.touchableHandleLongPress = function (event) {
        if (_this3.props.onLongPress != null) {
          _this3.props.onLongPress(event);
        }
      };

      this.touchableGetPressRectOffset = function () {
        return _this3.props.pressRetentionOffset == null ? PRESS_RECT_OFFSET : _this3.props.pressRetentionOffset;
      };
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      return prevState.responseHandlers == null && isTouchable(nextProps) ? {
        responseHandlers: prevState.createResponderHandlers()
      } : null;
    }
  }]);
  return TouchableText;
}(React.Component);

TouchableText.defaultProps = {
  accessible: true,
  allowFontScaling: true,
  ellipsizeMode: 'tail'
};

var isTouchable = function isTouchable(props) {
  return props.onPress != null || props.onLongPress != null || props.onStartShouldSetResponder != null;
};

var Text = React.forwardRef(function (props, forwardedRef) {
  return React.createElement(TouchableText, (0, _extends2.default)({}, props, {
    forwardedRef: forwardedRef
  }));
});
Text.displayName = 'Text';
Text.propTypes = DeprecatedTextPropTypes;
var TextToExport = _TextInjection.default.unstable_Text == null ? Text : _TextInjection.default.unstable_Text;
module.exports = TextToExport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,