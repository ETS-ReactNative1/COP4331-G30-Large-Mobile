6ae4985f7f9b497ec04e5c7a01cdd4ad
/** @license React v17.0.1
 * react-dom-server.node.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    var React = require('react');

    var _assign = require('object-assign');

    var stream = require('stream');

    var ReactVersion = '17.0.1';

    function formatProdErrorMessage(code) {
      var url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;

      for (var i = 1; i < arguments.length; i++) {
        url += '&args[]=' + encodeURIComponent(arguments[i]);
      }

      return "Minified React error #" + code + "; visit " + url + " for the full message or " + 'use the non-minified dev environment for full errors and additional ' + 'helpful warnings.';
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    function warn(format) {
      {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        printWarning('warn', format, args);
      }
    }

    function error(format) {
      {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        printWarning('error', format, args);
      }
    }

    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();

        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        }

        var argsWithFormat = args.map(function (item) {
          return '' + item;
        });
        argsWithFormat.unshift('Warning: ' + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }

    var REACT_ELEMENT_TYPE = 0xeac7;
    var REACT_PORTAL_TYPE = 0xeaca;
    var REACT_FRAGMENT_TYPE = 0xeacb;
    var REACT_STRICT_MODE_TYPE = 0xeacc;
    var REACT_PROFILER_TYPE = 0xead2;
    var REACT_PROVIDER_TYPE = 0xeacd;
    var REACT_CONTEXT_TYPE = 0xeace;
    var REACT_FORWARD_REF_TYPE = 0xead0;
    var REACT_SUSPENSE_TYPE = 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = 0xead8;
    var REACT_MEMO_TYPE = 0xead3;
    var REACT_LAZY_TYPE = 0xead4;
    var REACT_BLOCK_TYPE = 0xead9;
    var REACT_SERVER_BLOCK_TYPE = 0xeada;
    var REACT_FUNDAMENTAL_TYPE = 0xead5;
    var REACT_SCOPE_TYPE = 0xead7;
    var REACT_OPAQUE_ID_TYPE = 0xeae0;
    var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
    var REACT_OFFSCREEN_TYPE = 0xeae2;
    var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

    if (typeof Symbol === 'function' && Symbol.for) {
      var symbolFor = Symbol.for;
      REACT_ELEMENT_TYPE = symbolFor('react.element');
      REACT_PORTAL_TYPE = symbolFor('react.portal');
      REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
      REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
      REACT_PROFILER_TYPE = symbolFor('react.profiler');
      REACT_PROVIDER_TYPE = symbolFor('react.provider');
      REACT_CONTEXT_TYPE = symbolFor('react.context');
      REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
      REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
      REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
      REACT_MEMO_TYPE = symbolFor('react.memo');
      REACT_LAZY_TYPE = symbolFor('react.lazy');
      REACT_BLOCK_TYPE = symbolFor('react.block');
      REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
      REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
      REACT_SCOPE_TYPE = symbolFor('react.scope');
      REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
      REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
      REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
      REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }

    function getContextName(type) {
      return type.displayName || 'Context';
    }

    function getComponentName(type) {
      if (type == null) {
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';

        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';

          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_BLOCK_TYPE:
            return getComponentName(type._render);

          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;

              try {
                return getComponentName(init(payload));
              } catch (x) {
                return null;
              }
            }
        }
      }

      return null;
    }

    var enableSuspenseServerRenderer = false;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;

    function disabledLog() {}

    disabledLog.__reactDisabledLog = true;

    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }

        disabledDepth++;
      }
    }

    function reenableLogs() {
      {
        disabledDepth--;

        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: _assign({}, props, {
              value: prevLog
            }),
            info: _assign({}, props, {
              value: prevInfo
            }),
            warn: _assign({}, props, {
              value: prevWarn
            }),
            error: _assign({}, props, {
              value: prevError
            }),
            group: _assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: _assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: _assign({}, props, {
              value: prevGroupEnd
            })
          });
        }

        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }

    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;

    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        }

        return '\n' + prefix + name;
      }
    }

    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }

    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return '';
      }

      {
        var frame = componentFrameCache.get(fn);

        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }

      try {
        if (construct) {
          var Fake = function Fake() {
            throw Error();
          };

          Object.defineProperty(Fake.prototype, 'props', {
            set: function set() {
              throw Error();
            }
          });

          if (typeof Reflect === 'object' && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }

            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }

            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }

          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === 'string') {
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;

          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }

          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;

                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }

              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }

      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }

    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }

      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }

      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }

      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame('Suspense');

        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);

          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

          case REACT_BLOCK_TYPE:
            return describeFunctionComponentFrame(type._render);

          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;

              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }

      return '';
    }

    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }

    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has = Function.call.bind(Object.prototype.hasOwnProperty);

        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;

            try {
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }

              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }

            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }

            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }

    var didWarnAboutInvalidateContextType;
    {
      didWarnAboutInvalidateContextType = new Set();
    }
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }

    function maskContext(type, context) {
      var contextTypes = type.contextTypes;

      if (!contextTypes) {
        return emptyObject;
      }

      var maskedContext = {};

      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }

      return maskedContext;
    }

    function checkContextTypes(typeSpecs, values, location) {
      {
        checkPropTypes(typeSpecs, values, location, 'Component');
      }
    }

    function validateContextBounds(context, threadID) {
      for (var i = context._threadCount | 0; i <= threadID; i++) {
        context[i] = context._currentValue2;
        context._threadCount = i + 1;
      }
    }

    function processContext(type, context, threadID, isClass) {
      if (isClass) {
        var contextType = type.contextType;
        {
          if ('contextType' in type) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;

            if (!isValid && !didWarnAboutInvalidateContextType.has(type)) {
              didWarnAboutInvalidateContextType.add(type);
              var addendum = '';

              if (contextType === undefined) {
                addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
              } else if (typeof contextType !== 'object') {
                addendum = ' However, it is set to a ' + typeof contextType + '.';
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = ' Did you accidentally pass the Context.Provider instead?';
              } else if (contextType._context !== undefined) {
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
              } else {
                addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
              }

              error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(type) || 'Component', addendum);
            }
          }
        }

        if (typeof contextType === 'object' && contextType !== null) {
          validateContextBounds(contextType, threadID);
          return contextType[threadID];
        }

        {
          var maskedContext = maskContext(type, context);
          {
            if (type.contextTypes) {
              checkContextTypes(type.contextTypes, maskedContext, 'context');
            }
          }
          return maskedContext;
        }
      } else {
        {
          var _maskedContext = maskContext(type, context);

          {
            if (type.contextTypes) {
              checkContextTypes(type.contextTypes, _maskedContext, 'context');
            }
          }
          return _maskedContext;
        }
      }
    }

    var nextAvailableThreadIDs = new Uint16Array(16);

    for (var i = 0; i < 15; i++) {
      nextAvailableThreadIDs[i] = i + 1;
    }

    nextAvailableThreadIDs[15] = 0;

    function growThreadCountAndReturnNextAvailable() {
      var oldArray = nextAvailableThreadIDs;
      var oldSize = oldArray.length;
      var newSize = oldSize * 2;

      if (!(newSize <= 0x10000)) {
        {
          throw Error("Maximum number of concurrent React renderers exceeded. This can happen if you are not properly destroying the Readable provided by React. Ensure that you call .destroy() on it if you no longer want to read from it, and did not read to the end. If you use .pipe() this should be automatic.");
        }
      }

      var newArray = new Uint16Array(newSize);
      newArray.set(oldArray);
      nextAvailableThreadIDs = newArray;
      nextAvailableThreadIDs[0] = oldSize + 1;

      for (var _i = oldSize; _i < newSize - 1; _i++) {
        nextAvailableThreadIDs[_i] = _i + 1;
      }

      nextAvailableThreadIDs[newSize - 1] = 0;
      return oldSize;
    }

    function allocThreadID() {
      var nextID = nextAvailableThreadIDs[0];

      if (nextID === 0) {
        return growThreadCountAndReturnNextAvailable();
      }

      nextAvailableThreadIDs[0] = nextAvailableThreadIDs[nextID];
      return nextID;
    }

    function freeThreadID(id) {
      nextAvailableThreadIDs[id] = nextAvailableThreadIDs[0];
      nextAvailableThreadIDs[0] = id;
    }

    var RESERVED = 0;
    var STRING = 1;
    var BOOLEANISH_STRING = 2;
    var BOOLEAN = 3;
    var OVERLOADED_BOOLEAN = 4;
    var NUMERIC = 5;
    var POSITIVE_NUMERIC = 6;
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};

    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }

      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }

      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }

      illegalAttributeNameCache[attributeName] = true;
      {
        error('Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }

    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
        return true;
      }

      return false;
    }

    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }

      switch (typeof value) {
        case 'function':
        case 'symbol':
          return true;

        case 'boolean':
          {
            if (isCustomComponentTag) {
              return false;
            }

            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }

        default:
          return false;
      }
    }

    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === 'undefined') {
        return true;
      }

      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;

          case OVERLOADED_BOOLEAN:
            return value === false;

          case NUMERIC:
            return isNaN(value);

          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }

      return false;
    }

    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }

    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL;
      this.removeEmptyString = removeEmptyString;
    }

    var properties = {};
    var reservedProps = ['children', 'dangerouslySetInnerHTML', 'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
    reservedProps.forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    });
    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
      var name = _ref[0],
          attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    });
    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    });
    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    });
    ['allowFullScreen', 'async', 'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', 'itemScope'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    });
    ['checked', 'multiple', 'muted', 'selected'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    });
    ['capture', 'download'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    });
    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    });
    ['rowSpan', 'start'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;

    var capitalize = function capitalize(token) {
      return token[1].toUpperCase();
    };

    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    });
    ['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    });
    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    });
    ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    });
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    ['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;

    function sanitizeURL(url) {
      {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
          didWarn = true;
          error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
        }
      }
    }

    var matchHtmlRegExp = /["'&<>]/;

    function escapeHtml(string) {
      var str = '' + string;
      var match = matchHtmlRegExp.exec(str);

      if (!match) {
        return str;
      }

      var escape;
      var html = '';
      var index;
      var lastIndex = 0;

      for (index = match.index; index < str.length; index++) {
        switch (str.charCodeAt(index)) {
          case 34:
            escape = '&quot;';
            break;

          case 38:
            escape = '&amp;';
            break;

          case 39:
            escape = '&#x27;';
            break;

          case 60:
            escape = '&lt;';
            break;

          case 62:
            escape = '&gt;';
            break;

          default:
            continue;
        }

        if (lastIndex !== index) {
          html += str.substring(lastIndex, index);
        }

        lastIndex = index + 1;
        html += escape;
      }

      return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
    }

    function escapeTextForBrowser(text) {
      if (typeof text === 'boolean' || typeof text === 'number') {
        return '' + text;
      }

      return escapeHtml(text);
    }

    function quoteAttributeValueForBrowser(value) {
      return '"' + escapeTextForBrowser(value) + '"';
    }

    function createMarkupForRoot() {
      return ROOT_ATTRIBUTE_NAME + '=""';
    }

    function createMarkupForProperty(name, value) {
      var propertyInfo = getPropertyInfo(name);

      if (name !== 'style' && shouldIgnoreAttribute(name, propertyInfo, false)) {
        return '';
      }

      if (shouldRemoveAttribute(name, value, propertyInfo, false)) {
        return '';
      }

      if (propertyInfo !== null) {
        var attributeName = propertyInfo.attributeName;
        var type = propertyInfo.type;

        if (type === BOOLEAN || type === OVERLOADED_BOOLEAN && value === true) {
          return attributeName + '=""';
        } else {
          if (propertyInfo.sanitizeURL) {
            value = '' + value;
            sanitizeURL(value);
          }

          return attributeName + '=' + quoteAttributeValueForBrowser(value);
        }
      } else if (isAttributeNameSafe(name)) {
        return name + '=' + quoteAttributeValueForBrowser(value);
      }

      return '';
    }

    function createMarkupForCustomAttribute(name, value) {
      if (!isAttributeNameSafe(name) || value == null) {
        return '';
      }

      return name + '=' + quoteAttributeValueForBrowser(value);
    }

    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }

    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var currentlyRenderingComponent = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var isReRender = false;
    var didScheduleRenderPhaseUpdate = false;
    var renderPhaseUpdates = null;
    var numberOfReRenders = 0;
    var RE_RENDER_LIMIT = 25;
    var isInHookUserCodeInDev = false;
    var currentHookNameInDev;

    function resolveCurrentlyRenderingComponent() {
      if (!(currentlyRenderingComponent !== null)) {
        {
          throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
      }

      {
        if (isInHookUserCodeInDev) {
          error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
        }
      }
      return currentlyRenderingComponent;
    }

    function areHookInputsEqual(nextDeps, prevDeps) {
      if (prevDeps === null) {
        {
          error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
        }
        return false;
      }

      {
        if (nextDeps.length !== prevDeps.length) {
          error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + nextDeps.join(', ') + "]", "[" + prevDeps.join(', ') + "]");
        }
      }

      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (objectIs(nextDeps[i], prevDeps[i])) {
          continue;
        }

        return false;
      }

      return true;
    }

    function createHook() {
      if (numberOfReRenders > 0) {
        {
          {
            throw Error("Rendered more hooks than during the previous render");
          }
        }
      }

      return {
        memoizedState: null,
        queue: null,
        next: null
      };
    }

    function createWorkInProgressHook() {
      if (workInProgressHook === null) {
        if (firstWorkInProgressHook === null) {
          isReRender = false;
          firstWorkInProgressHook = workInProgressHook = createHook();
        } else {
          isReRender = true;
          workInProgressHook = firstWorkInProgressHook;
        }
      } else {
        if (workInProgressHook.next === null) {
          isReRender = false;
          workInProgressHook = workInProgressHook.next = createHook();
        } else {
          isReRender = true;
          workInProgressHook = workInProgressHook.next;
        }
      }

      return workInProgressHook;
    }

    function prepareToUseHooks(componentIdentity) {
      currentlyRenderingComponent = componentIdentity;
      {
        isInHookUserCodeInDev = false;
      }
    }

    function finishHooks(Component, props, children, refOrContext) {
      while (didScheduleRenderPhaseUpdate) {
        didScheduleRenderPhaseUpdate = false;
        numberOfReRenders += 1;
        workInProgressHook = null;
        children = Component(props, refOrContext);
      }

      resetHooksState();
      return children;
    }

    function resetHooksState() {
      {
        isInHookUserCodeInDev = false;
      }
      currentlyRenderingComponent = null;
      didScheduleRenderPhaseUpdate = false;
      firstWorkInProgressHook = null;
      numberOfReRenders = 0;
      renderPhaseUpdates = null;
      workInProgressHook = null;
    }

    function readContext(context, observedBits) {
      var threadID = currentPartialRenderer.threadID;
      validateContextBounds(context, threadID);
      {
        if (isInHookUserCodeInDev) {
          error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
        }
      }
      return context[threadID];
    }

    function useContext(context, observedBits) {
      {
        currentHookNameInDev = 'useContext';
      }
      resolveCurrentlyRenderingComponent();
      var threadID = currentPartialRenderer.threadID;
      validateContextBounds(context, threadID);
      return context[threadID];
    }

    function basicStateReducer(state, action) {
      return typeof action === 'function' ? action(state) : action;
    }

    function useState(initialState) {
      {
        currentHookNameInDev = 'useState';
      }
      return useReducer(basicStateReducer, initialState);
    }

    function useReducer(reducer, initialArg, init) {
      {
        if (reducer !== basicStateReducer) {
          currentHookNameInDev = 'useReducer';
        }
      }
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();

      if (isReRender) {
        var queue = workInProgressHook.queue;
        var dispatch = queue.dispatch;

        if (renderPhaseUpdates !== null) {
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

          if (firstRenderPhaseUpdate !== undefined) {
            renderPhaseUpdates.delete(queue);
            var newState = workInProgressHook.memoizedState;
            var update = firstRenderPhaseUpdate;

            do {
              var action = update.action;
              {
                isInHookUserCodeInDev = true;
              }
              newState = reducer(newState, action);
              {
                isInHookUserCodeInDev = false;
              }
              update = update.next;
            } while (update !== null);

            workInProgressHook.memoizedState = newState;
            return [newState, dispatch];
          }
        }

        return [workInProgressHook.memoizedState, dispatch];
      } else {
        {
          isInHookUserCodeInDev = true;
        }
        var initialState;

        if (reducer === basicStateReducer) {
          initialState = typeof initialArg === 'function' ? initialArg() : initialArg;
        } else {
          initialState = init !== undefined ? init(initialArg) : initialArg;
        }

        {
          isInHookUserCodeInDev = false;
        }
        workInProgressHook.memoizedState = initialState;

        var _queue = workInProgressHook.queue = {
          last: null,
          dispatch: null
        };

        var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);

        return [workInProgressHook.memoizedState, _dispatch];
      }
    }

    function useMemo(nextCreate, deps) {
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;

      if (workInProgressHook !== null) {
        var prevState = workInProgressHook.memoizedState;

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
      }

      {
        isInHookUserCodeInDev = true;
      }
      var nextValue = nextCreate();
      {
        isInHookUserCodeInDev = false;
      }
      workInProgressHook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }

    function useRef(initialValue) {
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      var previousRef = workInProgressHook.memoizedState;

      if (previousRef === null) {
        var ref = {
          current: initialValue
        };
        {
          Object.seal(ref);
        }
        workInProgressHook.memoizedState = ref;
        return ref;
      } else {
        return previousRef;
      }
    }

    function useLayoutEffect(create, inputs) {
      {
        currentHookNameInDev = 'useLayoutEffect';
        error('useLayoutEffect does nothing on the server, because its effect cannot ' + "be encoded into the server renderer's output format. This will lead " + 'to a mismatch between the initial, non-hydrated UI and the intended ' + 'UI. To avoid this, useLayoutEffect should only be used in ' + 'components that render exclusively on the client. ' + 'See https://reactjs.org/link/uselayouteffect-ssr for common fixes.');
      }
    }

    function dispatchAction(componentIdentity, queue, action) {
      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
        {
          throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
        }
      }

      if (componentIdentity === currentlyRenderingComponent) {
        didScheduleRenderPhaseUpdate = true;
        var update = {
          action: action,
          next: null
        };

        if (renderPhaseUpdates === null) {
          renderPhaseUpdates = new Map();
        }

        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (firstRenderPhaseUpdate === undefined) {
          renderPhaseUpdates.set(queue, update);
        } else {
          var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

          while (lastRenderPhaseUpdate.next !== null) {
            lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          }

          lastRenderPhaseUpdate.next = update;
        }
      }
    }

    function useCallback(callback, deps) {
      return useMemo(function () {
        return callback;
      }, deps);
    }

    function useMutableSource(source, getSnapshot, subscribe) {
      resolveCurrentlyRenderingComponent();
      return getSnapshot(source._source);
    }

    function useDeferredValue(value) {
      resolveCurrentlyRenderingComponent();
      return value;
    }

    function useTransition() {
      resolveCurrentlyRenderingComponent();

      var startTransition = function startTransition(callback) {
        callback();
      };

      return [startTransition, false];
    }

    function useOpaqueIdentifier() {
      return (currentPartialRenderer.identifierPrefix || '') + 'R:' + (currentPartialRenderer.uniqueID++).toString(36);
    }

    function noop() {}

    var currentPartialRenderer = null;

    function setCurrentPartialRenderer(renderer) {
      currentPartialRenderer = renderer;
    }

    var Dispatcher = {
      readContext: readContext,
      useContext: useContext,
      useMemo: useMemo,
      useReducer: useReducer,
      useRef: useRef,
      useState: useState,
      useLayoutEffect: useLayoutEffect,
      useCallback: useCallback,
      useImperativeHandle: noop,
      useEffect: noop,
      useDebugValue: noop,
      useDeferredValue: useDeferredValue,
      useTransition: useTransition,
      useOpaqueIdentifier: useOpaqueIdentifier,
      useMutableSource: useMutableSource
    };
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
      html: HTML_NAMESPACE,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    };

    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;

        case 'math':
          return MATH_NAMESPACE;

        default:
          return HTML_NAMESPACE;
      }
    }

    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
        return getIntrinsicNamespace(type);
      }

      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        return HTML_NAMESPACE;
      }

      return parentNamespace;
    }

    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };

    function checkControlledValueProps(tagName, props) {
      {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
          error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }

        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
          error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
      }
    }

    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
    };

    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags);

    var HTML = '__html';

    function assertValidProps(tag, props) {
      if (!props) {
        return;
      }

      if (voidElementTags[tag]) {
        if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
          {
            throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
      }

      if (props.dangerouslySetInnerHTML != null) {
        if (!(props.children == null)) {
          {
            throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
        }

        if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
          {
            throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
      }

      {
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
          error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
        }
      }

      if (!(props.style == null || typeof props.style === 'object')) {
        {
          throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
    }

    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };

    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }

    var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });

    function dangerousStyleValue(name, value, isCustomProperty) {
      var isEmpty = value == null || typeof value === 'boolean' || value === '';

      if (isEmpty) {
        return '';
      }

      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + 'px';
      }

      return ('' + value).trim();
    }

    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;

    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }

    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }

      switch (tagName) {
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;

        default:
          return true;
      }
    }

    var warnValidStyle = function warnValidStyle() {};

    {
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;

      var camelize = function camelize(string) {
        return string.replace(hyphenPattern, function (_, character) {
          return character.toUpperCase();
        });
      };

      var warnHyphenatedStyleName = function warnHyphenatedStyleName(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, camelize(name.replace(msPattern$1, 'ms-')));
      };

      var warnBadVendoredStyleName = function warnBadVendoredStyleName(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
      };

      var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }

        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };

      var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value) {
        if (warnedForNaNValue) {
          return;
        }

        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
      };

      var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value) {
        if (warnedForInfinityValue) {
          return;
        }

        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
      };

      warnValidStyle = function warnValidStyle(name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }

        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    var ariaProperties = {
      'aria-current': 0,
      'aria-details': 0,
      'aria-disabled': 0,
      'aria-hidden': 0,
      'aria-invalid': 0,
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

    function validateProperty(tagName, name) {
      {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
          return true;
        }

        if (rARIACamel.test(name)) {
          var ariaName = 'aria-' + name.slice(4).toLowerCase();
          var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

          if (correctName == null) {
            error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
            warnedProperties[name] = true;
            return true;
          }

          if (name !== correctName) {
            error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
            warnedProperties[name] = true;
            return true;
          }
        }

        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase();
          var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

          if (standardName == null) {
            warnedProperties[name] = true;
            return false;
          }

          if (name !== standardName) {
            error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties[name] = true;
            return true;
          }
        }
      }
      return true;
    }

    function warnInvalidARIAProps(type, props) {
      {
        var invalidProps = [];

        for (var key in props) {
          var isValid = validateProperty(type, key);

          if (!isValid) {
            invalidProps.push(key);
          }
        }

        var unknownPropString = invalidProps.map(function (prop) {
          return '`' + prop + '`';
        }).join(', ');

        if (invalidProps.length === 1) {
          error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
        } else if (invalidProps.length > 1) {
          error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
        }
      }
    }

    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnInvalidARIAProps(type, props);
    }

    var didWarnValueNull = false;

    function validateProperties$1(type, props) {
      {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') {
          return;
        }

        if (props != null && props.value === null && !didWarnValueNull) {
          didWarnValueNull = true;

          if (type === 'select' && props.multiple) {
            error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
          } else {
            error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
          }
        }
      }
    }

    var possibleStandardNames = {
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      class: 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      default: 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      disablepictureinpicture: 'disablePictureInPicture',
      disableremoteplayback: 'disableRemotePlayback',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      enterkeyhint: 'enterKeyHint',
      for: 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nomodule: 'noModule',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      in: 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      suppresshydrationwarning: 'suppressHydrationWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      typeof: 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };

    var validateProperty$1 = function validateProperty$1() {};

    {
      var warnedProperties$1 = {};
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

      validateProperty$1 = function validateProperty$1(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }

        var lowerCasedName = name.toLowerCase();

        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (eventRegistry != null) {
          var registrationNameDependencies = eventRegistry.registrationNameDependencies,
              possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

          if (registrationNameDependencies.hasOwnProperty(name)) {
            return true;
          }

          var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

          if (registrationName != null) {
            error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }

          if (EVENT_NAME_REGEX.test(name)) {
            error('Unknown event handler property `%s`. It will be ignored.', name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
          }

          warnedProperties$1[name] = true;
          return true;
        }

        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }

        if (lowerCasedName === 'innerhtml') {
          error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'aria') {
          error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'number' && isNaN(value)) {
          error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
          warnedProperties$1[name] = true;
          return true;
        }

        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;

        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];

          if (standardName !== name) {
            error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }

          warnedProperties$1[name] = true;
          return true;
        }

        if (isReserved) {
          return true;
        }

        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        }

        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }

        return true;
      };
    }

    var warnUnknownProperties = function warnUnknownProperties(type, props, eventRegistry) {
      {
        var unknownProps = [];

        for (var key in props) {
          var isValid = validateProperty$1(type, key, props[key], eventRegistry);

          if (!isValid) {
            unknownProps.push(key);
          }
        }

        var unknownPropString = unknownProps.map(function (prop) {
          return '`' + prop + '`';
        }).join(', ');

        if (unknownProps.length === 1) {
          error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
        } else if (unknownProps.length > 1) {
          error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
        }
      }
    };

    function validateProperties$2(type, props, eventRegistry) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnUnknownProperties(type, props, eventRegistry);
    }

    var toArray = React.Children.toArray;
    var currentDebugStacks = [];
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var ReactDebugCurrentFrame$1;
    var prevGetCurrentStackImpl = null;

    var getCurrentServerStackImpl = function getCurrentServerStackImpl() {
      return '';
    };

    var describeStackFrame = function describeStackFrame(element) {
      return '';
    };

    var validatePropertiesInDevelopment = function validatePropertiesInDevelopment(type, props) {};

    var pushCurrentDebugStack = function pushCurrentDebugStack(stack) {};

    var pushElementToDebugStack = function pushElementToDebugStack(element) {};

    var popCurrentDebugStack = function popCurrentDebugStack() {};

    var hasWarnedAboutUsingContextAsConsumer = false;
    {
      ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

      validatePropertiesInDevelopment = function validatePropertiesInDevelopment(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, null);
      };

      describeStackFrame = function describeStackFrame(element) {
        return describeUnknownElementTypeFrameInDEV(element.type, element._source, null);
      };

      pushCurrentDebugStack = function pushCurrentDebugStack(stack) {
        currentDebugStacks.push(stack);

        if (currentDebugStacks.length === 1) {
          prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
          ReactDebugCurrentFrame$1.getCurrentStack = getCurrentServerStackImpl;
        }
      };

      pushElementToDebugStack = function pushElementToDebugStack(element) {
        var stack = currentDebugStacks[currentDebugStacks.length - 1];
        var frame = stack[stack.length - 1];
        frame.debugElementStack.push(element);
      };

      popCurrentDebugStack = function popCurrentDebugStack() {
        currentDebugStacks.pop();

        if (currentDebugStacks.length === 0) {
          ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
          prevGetCurrentStackImpl = null;
        }
      };

      getCurrentServerStackImpl = function getCurrentServerStackImpl() {
        if (currentDebugStacks.length === 0) {
          return '';
        }

        var frames = currentDebugStacks[currentDebugStacks.length - 1];
        var stack = '';

        for (var i = frames.length - 1; i >= 0; i--) {
          var frame = frames[i];
          var debugElementStack = frame.debugElementStack;

          for (var ii = debugElementStack.length - 1; ii >= 0; ii--) {
            stack += describeStackFrame(debugElementStack[ii]);
          }
        }

        return stack;
      };
    }
    var didWarnDefaultInputValue = false;
    var didWarnDefaultChecked = false;
    var didWarnDefaultSelectValue = false;
    var didWarnDefaultTextareaValue = false;
    var didWarnInvalidOptionChildren = false;
    var didWarnAboutNoopUpdateForComponent = {};
    var didWarnAboutBadClass = {};
    var didWarnAboutModulePatternComponent = {};
    var didWarnAboutDeprecatedWillMount = {};
    var didWarnAboutUndefinedDerivedState = {};
    var didWarnAboutUninitializedState = {};
    var valuePropNames = ['value', 'defaultValue'];
    var newlineEatingTags = {
      listing: true,
      pre: true,
      textarea: true
    };
    var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
    var validatedTagCache = {};

    function validateDangerousTag(tag) {
      if (!validatedTagCache.hasOwnProperty(tag)) {
        if (!VALID_TAG_REGEX.test(tag)) {
          {
            throw Error("Invalid tag: " + tag);
          }
        }

        validatedTagCache[tag] = true;
      }
    }

    var styleNameCache = {};

    var processStyleName = function processStyleName(styleName) {
      if (styleNameCache.hasOwnProperty(styleName)) {
        return styleNameCache[styleName];
      }

      var result = hyphenateStyleName(styleName);
      styleNameCache[styleName] = result;
      return result;
    };

    function createMarkupForStyles(styles) {
      var serialized = '';
      var delimiter = '';

      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }

        var isCustomProperty = styleName.indexOf('--') === 0;
        var styleValue = styles[styleName];
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styleValue);
          }
        }

        if (styleValue != null) {
          serialized += delimiter + (isCustomProperty ? styleName : processStyleName(styleName)) + ':';
          serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
          delimiter = ';';
        }
      }

      return serialized || null;
    }

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && getComponentName(_constructor) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;

        if (didWarnAboutNoopUpdateForComponent[warningKey]) {
          return;
        }

        error('%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
        didWarnAboutNoopUpdateForComponent[warningKey] = true;
      }
    }

    function shouldConstruct$1(Component) {
      return Component.prototype && Component.prototype.isReactComponent;
    }

    function getNonChildrenInnerMarkup(props) {
      var innerHTML = props.dangerouslySetInnerHTML;

      if (innerHTML != null) {
        if (innerHTML.__html != null) {
          return innerHTML.__html;
        }
      } else {
        var content = props.children;

        if (typeof content === 'string' || typeof content === 'number') {
          return escapeTextForBrowser(content);
        }
      }

      return null;
    }

    function flattenTopLevelChildren(children) {
      if (!React.isValidElement(children)) {
        return toArray(children);
      }

      var element = children;

      if (element.type !== REACT_FRAGMENT_TYPE) {
        return [element];
      }

      var fragmentChildren = element.props.children;

      if (!React.isValidElement(fragmentChildren)) {
        return toArray(fragmentChildren);
      }

      var fragmentChildElement = fragmentChildren;
      return [fragmentChildElement];
    }

    function flattenOptionChildren(children) {
      if (children === undefined || children === null) {
        return children;
      }

      var content = '';
      React.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }

        content += child;
        {
          if (!didWarnInvalidOptionChildren && typeof child !== 'string' && typeof child !== 'number') {
            didWarnInvalidOptionChildren = true;
            error('Only strings and numbers are supported as <option> children.');
          }
        }
      });
      return content;
    }

    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    var STYLE = 'style';
    var RESERVED_PROPS = {
      children: null,
      dangerouslySetInnerHTML: null,
      suppressContentEditableWarning: null,
      suppressHydrationWarning: null
    };

    function createOpenTagMarkup(tagVerbatim, tagLowercase, props, namespace, makeStaticMarkup, isRootElement) {
      var ret = '<' + tagVerbatim;
      var isCustomComponent$1 = isCustomComponent(tagLowercase, props);

      for (var propKey in props) {
        if (!hasOwnProperty$2.call(props, propKey)) {
          continue;
        }

        var propValue = props[propKey];

        if (propValue == null) {
          continue;
        }

        if (propKey === STYLE) {
          propValue = createMarkupForStyles(propValue);
        }

        var markup = null;

        if (isCustomComponent$1) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = createMarkupForProperty(propKey, propValue);
        }

        if (markup) {
          ret += ' ' + markup;
        }
      }

      if (makeStaticMarkup) {
        return ret;
      }

      if (isRootElement) {
        ret += ' ' + createMarkupForRoot();
      }

      return ret;
    }

    function validateRenderResult(child, type) {
      if (child === undefined) {
        {
          {
            throw Error((getComponentName(type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
          }
        }
      }
    }

    function resolve(child, context, threadID) {
      while (React.isValidElement(child)) {
        var element = child;
        var Component = element.type;
        {
          pushElementToDebugStack(element);
        }

        if (typeof Component !== 'function') {
          break;
        }

        processChild(element, Component);
      }

      function processChild(element, Component) {
        var isClass = shouldConstruct$1(Component);
        var publicContext = processContext(Component, context, threadID, isClass);
        var queue = [];
        var replace = false;
        var updater = {
          isMounted: function isMounted(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
            if (queue === null) {
              warnNoop(publicInstance, 'forceUpdate');
              return null;
            }
          },
          enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
            replace = true;
            queue = [completeState];
          },
          enqueueSetState: function enqueueSetState(publicInstance, currentPartialState) {
            if (queue === null) {
              warnNoop(publicInstance, 'setState');
              return null;
            }

            queue.push(currentPartialState);
          }
        };
        var inst;

        if (isClass) {
          inst = new Component(element.props, publicContext, updater);

          if (typeof Component.getDerivedStateFromProps === 'function') {
            {
              if (inst.state === null || inst.state === undefined) {
                var componentName = getComponentName(Component) || 'Unknown';

                if (!didWarnAboutUninitializedState[componentName]) {
                  error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, inst.state === null ? 'null' : 'undefined', componentName);
                  didWarnAboutUninitializedState[componentName] = true;
                }
              }
            }
            var partialState = Component.getDerivedStateFromProps.call(null, element.props, inst.state);
            {
              if (partialState === undefined) {
                var _componentName = getComponentName(Component) || 'Unknown';

                if (!didWarnAboutUndefinedDerivedState[_componentName]) {
                  error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', _componentName);
                  didWarnAboutUndefinedDerivedState[_componentName] = true;
                }
              }
            }

            if (partialState != null) {
              inst.state = _assign({}, inst.state, partialState);
            }
          }
        } else {
          {
            if (Component.prototype && typeof Component.prototype.render === 'function') {
              var _componentName2 = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutBadClass[_componentName2]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', _componentName2, _componentName2);
                didWarnAboutBadClass[_componentName2] = true;
              }
            }
          }
          var componentIdentity = {};
          prepareToUseHooks(componentIdentity);
          inst = Component(element.props, publicContext, updater);
          inst = finishHooks(Component, element.props, inst, publicContext);
          {
            if (inst != null && inst.render != null) {
              var _componentName3 = getComponentName(Component) || 'Unknown';

              if (!didWarnAboutModulePatternComponent[_componentName3]) {
                error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName3, _componentName3, _componentName3);
                didWarnAboutModulePatternComponent[_componentName3] = true;
              }
            }
          }

          if (inst == null || inst.render == null) {
            child = inst;
            validateRenderResult(child, Component);
            return;
          }
        }

        inst.props = element.props;
        inst.context = publicContext;
        inst.updater = updater;
        var initialState = inst.state;

        if (initialState === undefined) {
          inst.state = initialState = null;
        }

        if (typeof inst.UNSAFE_componentWillMount === 'function' || typeof inst.componentWillMount === 'function') {
          if (typeof inst.componentWillMount === 'function') {
            {
              if (inst.componentWillMount.__suppressDeprecationWarning !== true) {
                var _componentName4 = getComponentName(Component) || 'Unknown';

                if (!didWarnAboutDeprecatedWillMount[_componentName4]) {
                  warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code from componentWillMount to componentDidMount (preferred in most cases) ' + 'or the constructor.\n' + '\nPlease update the following components: %s', _componentName4);
                  didWarnAboutDeprecatedWillMount[_componentName4] = true;
                }
              }
            }

            if (typeof Component.getDerivedStateFromProps !== 'function') {
              inst.componentWillMount();
            }
          }

          if (typeof inst.UNSAFE_componentWillMount === 'function' && typeof Component.getDerivedStateFromProps !== 'function') {
            inst.UNSAFE_componentWillMount();
          }

          if (queue.length) {
            var oldQueue = queue;
            var oldReplace = replace;
            queue = null;
            replace = false;

            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;

              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];

                var _partialState = typeof partial === 'function' ? partial.call(inst, nextState, element.props, publicContext) : partial;

                if (_partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = _assign({}, nextState, _partialState);
                  } else {
                    _assign(nextState, _partialState);
                  }
                }
              }

              inst.state = nextState;
            }
          } else {
            queue = null;
          }
        }

        child = inst.render();
        {
          if (child === undefined && inst.render._isMockFunction) {
            child = null;
          }
        }
        validateRenderResult(child, Component);
        var childContext;
        {
          if (typeof inst.getChildContext === 'function') {
            var _childContextTypes = Component.childContextTypes;

            if (typeof _childContextTypes === 'object') {
              childContext = inst.getChildContext();

              for (var contextKey in childContext) {
                if (!(contextKey in _childContextTypes)) {
                  {
                    throw Error((getComponentName(Component) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
                  }
                }
              }
            } else {
              {
                error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', getComponentName(Component) || 'Unknown');
              }
            }
          }

          if (childContext) {
            context = _assign({}, context, childContext);
          }
        }
      }

      return {
        child: child,
        context: context
      };
    }

    var ReactDOMServerRenderer = function () {
      function ReactDOMServerRenderer(children, makeStaticMarkup, options) {
        var flatChildren = flattenTopLevelChildren(children);
        var topFrame = {
          type: null,
          domNamespace: Namespaces.html,
          children: flatChildren,
          childIndex: 0,
          context: emptyObject,
          footer: ''
        };
        {
          topFrame.debugElementStack = [];
        }
        this.threadID = allocThreadID();
        this.stack = [topFrame];
        this.exhausted = false;
        this.currentSelectValue = null;
        this.previousWasTextNode = false;
        this.makeStaticMarkup = makeStaticMarkup;
        this.suspenseDepth = 0;
        this.contextIndex = -1;
        this.contextStack = [];
        this.contextValueStack = [];
        this.uniqueID = 0;
        this.identifierPrefix = options && options.identifierPrefix || '';
        {
          this.contextProviderStack = [];
        }
      }

      var _proto = ReactDOMServerRenderer.prototype;

      _proto.destroy = function destroy() {
        if (!this.exhausted) {
          this.exhausted = true;
          this.clearProviders();
          freeThreadID(this.threadID);
        }
      };

      _proto.pushProvider = function pushProvider(provider) {
        var index = ++this.contextIndex;
        var context = provider.type._context;
        var threadID = this.threadID;
        validateContextBounds(context, threadID);
        var previousValue = context[threadID];
        this.contextStack[index] = context;
        this.contextValueStack[index] = previousValue;
        {
          this.contextProviderStack[index] = provider;
        }
        context[threadID] = provider.props.value;
      };

      _proto.popProvider = function popProvider(provider) {
        var index = this.contextIndex;
        {
          if (index < 0 || provider !== this.contextProviderStack[index]) {
            error('Unexpected pop.');
          }
        }
        var context = this.contextStack[index];
        var previousValue = this.contextValueStack[index];
        this.contextStack[index] = null;
        this.contextValueStack[index] = null;
        {
          this.contextProviderStack[index] = null;
        }
        this.contextIndex--;
        context[this.threadID] = previousValue;
      };

      _proto.clearProviders = function clearProviders() {
        for (var index = this.contextIndex; index >= 0; index--) {
          var context = this.contextStack[index];
          var previousValue = this.contextValueStack[index];
          context[this.threadID] = previousValue;
        }
      };

      _proto.read = function read(bytes) {
        if (this.exhausted) {
          return null;
        }

        var prevPartialRenderer = currentPartialRenderer;
        setCurrentPartialRenderer(this);
        var prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = Dispatcher;

        try {
          var out = [''];
          var suspended = false;

          while (out[0].length < bytes) {
            if (this.stack.length === 0) {
              this.exhausted = true;
              freeThreadID(this.threadID);
              break;
            }

            var frame = this.stack[this.stack.length - 1];

            if (suspended || frame.childIndex >= frame.children.length) {
              var footer = frame.footer;

              if (footer !== '') {
                this.previousWasTextNode = false;
              }

              this.stack.pop();

              if (frame.type === 'select') {
                this.currentSelectValue = null;
              } else if (frame.type != null && frame.type.type != null && frame.type.type.$$typeof === REACT_PROVIDER_TYPE) {
                var provider = frame.type;
                this.popProvider(provider);
              } else if (frame.type === REACT_SUSPENSE_TYPE) {
                this.suspenseDepth--;
                var buffered = out.pop();

                if (suspended) {
                  suspended = false;
                  var fallbackFrame = frame.fallbackFrame;

                  if (!fallbackFrame) {
                    {
                      throw Error(true ? "ReactDOMServer did not find an internal fallback frame for Suspense. This is a bug in React. Please file an issue." : formatProdErrorMessage(303));
                    }
                  }

                  this.stack.push(fallbackFrame);
                  out[this.suspenseDepth] += '<!--$!-->';
                  continue;
                } else {
                  out[this.suspenseDepth] += buffered;
                }
              }

              out[this.suspenseDepth] += footer;
              continue;
            }

            var child = frame.children[frame.childIndex++];
            var outBuffer = '';

            if (true) {
              pushCurrentDebugStack(this.stack);
              frame.debugElementStack.length = 0;
            }

            try {
              outBuffer += this.render(child, frame.context, frame.domNamespace);
            } catch (err) {
              if (err != null && typeof err.then === 'function') {
                if (enableSuspenseServerRenderer) {
                  if (!(this.suspenseDepth > 0)) {
                    {
                      throw Error(true ? "A React component suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." : formatProdErrorMessage(342));
                    }
                  }

                  suspended = true;
                } else {
                  if (!false) {
                    {
                      throw Error(true ? "ReactDOMServer does not yet support Suspense." : formatProdErrorMessage(294));
                    }
                  }
                }
              } else {
                throw err;
              }
            } finally {
              if (true) {
                popCurrentDebugStack();
              }
            }

            if (out.length <= this.suspenseDepth) {
              out.push('');
            }

            out[this.suspenseDepth] += outBuffer;
          }

          return out[0];
        } finally {
          ReactCurrentDispatcher$1.current = prevDispatcher;
          setCurrentPartialRenderer(prevPartialRenderer);
          resetHooksState();
        }
      };

      _proto.render = function render(child, context, parentNamespace) {
        if (typeof child === 'string' || typeof child === 'number') {
          var text = '' + child;

          if (text === '') {
            return '';
          }

          if (this.makeStaticMarkup) {
            return escapeTextForBrowser(text);
          }

          if (this.previousWasTextNode) {
            return '<!-- -->' + escapeTextForBrowser(text);
          }

          this.previousWasTextNode = true;
          return escapeTextForBrowser(text);
        } else {
          var nextChild;

          var _resolve = resolve(child, context, this.threadID);

          nextChild = _resolve.child;
          context = _resolve.context;

          if (nextChild === null || nextChild === false) {
            return '';
          } else if (!React.isValidElement(nextChild)) {
            if (nextChild != null && nextChild.$$typeof != null) {
              var $$typeof = nextChild.$$typeof;

              if (!($$typeof !== REACT_PORTAL_TYPE)) {
                {
                  throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
                }
              }

              {
                {
                  throw Error("Unknown element-like object type: " + $$typeof.toString() + ". This is likely a bug in React. Please file an issue.");
                }
              }
            }

            var nextChildren = toArray(nextChild);
            var frame = {
              type: null,
              domNamespace: parentNamespace,
              children: nextChildren,
              childIndex: 0,
              context: context,
              footer: ''
            };
            {
              frame.debugElementStack = [];
            }
            this.stack.push(frame);
            return '';
          }

          var nextElement = nextChild;
          var elementType = nextElement.type;

          if (typeof elementType === 'string') {
            return this.renderDOM(nextElement, context, parentNamespace);
          }

          switch (elementType) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_SUSPENSE_LIST_TYPE:
            case REACT_FRAGMENT_TYPE:
              {
                var _nextChildren = toArray(nextChild.props.children);

                var _frame = {
                  type: null,
                  domNamespace: parentNamespace,
                  children: _nextChildren,
                  childIndex: 0,
                  context: context,
                  footer: ''
                };
                {
                  _frame.debugElementStack = [];
                }
                this.stack.push(_frame);
                return '';
              }

            case REACT_SUSPENSE_TYPE:
              {
                {
                  {
                    {
                      throw Error("ReactDOMServer does not yet support Suspense.");
                    }
                  }
                }
              }

            case REACT_SCOPE_TYPE:
              {
                {
                  {
                    throw Error("ReactDOMServer does not yet support scope components.");
                  }
                }
              }
          }

          if (typeof elementType === 'object' && elementType !== null) {
            switch (elementType.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                {
                  var element = nextChild;

                  var _nextChildren5;

                  var componentIdentity = {};
                  prepareToUseHooks(componentIdentity);
                  _nextChildren5 = elementType.render(element.props, element.ref);
                  _nextChildren5 = finishHooks(elementType.render, element.props, _nextChildren5, element.ref);
                  _nextChildren5 = toArray(_nextChildren5);
                  var _frame5 = {
                    type: null,
                    domNamespace: parentNamespace,
                    children: _nextChildren5,
                    childIndex: 0,
                    context: context,
                    footer: ''
                  };
                  {
                    _frame5.debugElementStack = [];
                  }
                  this.stack.push(_frame5);
                  return '';
                }

              case REACT_MEMO_TYPE:
                {
                  var _element = nextChild;
                  var _nextChildren6 = [React.createElement(elementType.type, _assign({
                    ref: _element.ref
                  }, _element.props))];
                  var _frame6 = {
                    type: null,
                    domNamespace: parentNamespace,
                    children: _nextChildren6,
                    childIndex: 0,
                    context: context,
                    footer: ''
                  };
                  {
                    _frame6.debugElementStack = [];
                  }
                  this.stack.push(_frame6);
                  return '';
                }

              case REACT_PROVIDER_TYPE:
                {
                  var provider = nextChild;
                  var nextProps = provider.props;

                  var _nextChildren7 = toArray(nextProps.children);

                  var _frame7 = {
                    type: provider,
                    domNamespace: parentNamespace,
                    children: _nextChildren7,
                    childIndex: 0,
                    context: context,
                    footer: ''
                  };
                  {
                    _frame7.debugElementStack = [];
                  }
                  this.pushProvider(provider);
                  this.stack.push(_frame7);
                  return '';
                }

              case REACT_CONTEXT_TYPE:
                {
                  var reactContext = nextChild.type;
                  {
                    if (reactContext._context === undefined) {
                      if (reactContext !== reactContext.Consumer) {
                        if (!hasWarnedAboutUsingContextAsConsumer) {
                          hasWarnedAboutUsingContextAsConsumer = true;
                          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
                        }
                      }
                    } else {
                      reactContext = reactContext._context;
                    }
                  }
                  var _nextProps = nextChild.props;
                  var threadID = this.threadID;
                  validateContextBounds(reactContext, threadID);
                  var nextValue = reactContext[threadID];

                  var _nextChildren8 = toArray(_nextProps.children(nextValue));

                  var _frame8 = {
                    type: nextChild,
                    domNamespace: parentNamespace,
                    children: _nextChildren8,
                    childIndex: 0,
                    context: context,
                    footer: ''
                  };
                  {
                    _frame8.debugElementStack = [];
                  }
                  this.stack.push(_frame8);
                  return '';
                }

              case REACT_FUNDAMENTAL_TYPE:
                {
                  {
                    {
                      throw Error("ReactDOMServer does not yet support the fundamental API.");
                    }
                  }
                }

              case REACT_LAZY_TYPE:
                {
                  var _element2 = nextChild;
                  var lazyComponent = nextChild.type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  var result = init(payload);
                  var _nextChildren10 = [React.createElement(result, _assign({
                    ref: _element2.ref
                  }, _element2.props))];
                  var _frame10 = {
                    type: null,
                    domNamespace: parentNamespace,
                    children: _nextChildren10,
                    childIndex: 0,
                    context: context,
                    footer: ''
                  };
                  {
                    _frame10.debugElementStack = [];
                  }
                  this.stack.push(_frame10);
                  return '';
                }
            }
          }

          var info = '';
          {
            var owner = nextElement._owner;

            if (elementType === undefined || typeof elementType === 'object' && elementType !== null && Object.keys(elementType).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }
          {
            {
              throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (elementType == null ? elementType : typeof elementType) + "." + info);
            }
          }
        }
      };

      _proto.renderDOM = function renderDOM(element, context, parentNamespace) {
        var tag = element.type.toLowerCase();
        var namespace = parentNamespace;

        if (parentNamespace === Namespaces.html) {
          namespace = getIntrinsicNamespace(tag);
        }

        {
          if (namespace === Namespaces.html) {
            if (tag !== element.type) {
              error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', element.type);
            }
          }
        }
        validateDangerousTag(tag);
        var props = element.props;

        if (tag === 'input') {
          {
            checkControlledValueProps('input', props);

            if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnDefaultChecked) {
              error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', 'A component', props.type);
              didWarnDefaultChecked = true;
            }

            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultInputValue) {
              error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', 'A component', props.type);
              didWarnDefaultInputValue = true;
            }
          }
          props = _assign({
            type: undefined
          }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: props.value != null ? props.value : props.defaultValue,
            checked: props.checked != null ? props.checked : props.defaultChecked
          });
        } else if (tag === 'textarea') {
          {
            checkControlledValueProps('textarea', props);

            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultTextareaValue) {
              error('Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');
              didWarnDefaultTextareaValue = true;
            }
          }
          var initialValue = props.value;

          if (initialValue == null) {
            var defaultValue = props.defaultValue;
            var textareaChildren = props.children;

            if (textareaChildren != null) {
              {
                error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
              }

              if (!(defaultValue == null)) {
                {
                  throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
              }

              if (Array.isArray(textareaChildren)) {
                if (!(textareaChildren.length <= 1)) {
                  {
                    throw Error("<textarea> can only have at most one child.");
                  }
                }

                textareaChildren = textareaChildren[0];
              }

              defaultValue = '' + textareaChildren;
            }

            if (defaultValue == null) {
              defaultValue = '';
            }

            initialValue = defaultValue;
          }

          props = _assign({}, props, {
            value: undefined,
            children: '' + initialValue
          });
        } else if (tag === 'select') {
          {
            checkControlledValueProps('select', props);

            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];

              if (props[propName] == null) {
                continue;
              }

              var isArray = Array.isArray(props[propName]);

              if (props.multiple && !isArray) {
                error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.', propName);
              } else if (!props.multiple && isArray) {
                error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.', propName);
              }
            }

            if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultSelectValue) {
              error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');
              didWarnDefaultSelectValue = true;
            }
          }
          this.currentSelectValue = props.value != null ? props.value : props.defaultValue;
          props = _assign({}, props, {
            value: undefined
          });
        } else if (tag === 'option') {
          var selected = null;
          var selectValue = this.currentSelectValue;
          var optionChildren = flattenOptionChildren(props.children);

          if (selectValue != null) {
            var value;

            if (props.value != null) {
              value = props.value + '';
            } else {
              value = optionChildren;
            }

            selected = false;

            if (Array.isArray(selectValue)) {
              for (var j = 0; j < selectValue.length; j++) {
                if ('' + selectValue[j] === value) {
                  selected = true;
                  break;
                }
              }
            } else {
              selected = '' + selectValue === value;
            }

            props = _assign({
              selected: undefined,
              children: undefined
            }, props, {
              selected: selected,
              children: optionChildren
            });
          }
        }

        {
          validatePropertiesInDevelopment(tag, props);
        }
        assertValidProps(tag, props);
        var out = createOpenTagMarkup(element.type, tag, props, namespace, this.makeStaticMarkup, this.stack.length === 1);
        var footer = '';

        if (omittedCloseTags.hasOwnProperty(tag)) {
          out += '/>';
        } else {
          out += '>';
          footer = '</' + element.type + '>';
        }

        var children;
        var innerMarkup = getNonChildrenInnerMarkup(props);

        if (innerMarkup != null) {
          children = [];

          if (newlineEatingTags.hasOwnProperty(tag) && innerMarkup.charAt(0) === '\n') {
            out += '\n';
          }

          out += innerMarkup;
        } else {
          children = toArray(props.children);
        }

        var frame = {
          domNamespace: getChildNamespace(parentNamespace, element.type),
          type: tag,
          children: children,
          childIndex: 0,
          context: context,
          footer: footer
        };
        {
          frame.debugElementStack = [];
        }
        this.stack.push(frame);
        this.previousWasTextNode = false;
        return out;
      };

      return ReactDOMServerRenderer;
    }();

    function renderToString(element, options) {
      var renderer = new ReactDOMServerRenderer(element, false, options);

      try {
        var markup = renderer.read(Infinity);
        return markup;
      } finally {
        renderer.destroy();
      }
    }

    function renderToStaticMarkup(element, options) {
      var renderer = new ReactDOMServerRenderer(element, true, options);

      try {
        var markup = renderer.read(Infinity);
        return markup;
      } finally {
        renderer.destroy();
      }
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }

    var ReactMarkupReadableStream = function (_Readable) {
      _inheritsLoose(ReactMarkupReadableStream, _Readable);

      function ReactMarkupReadableStream(element, makeStaticMarkup, options) {
        var _this;

        _this = _Readable.call(this, {}) || this;
        _this.partialRenderer = new ReactDOMServerRenderer(element, makeStaticMarkup, options);
        return _this;
      }

      var _proto = ReactMarkupReadableStream.prototype;

      _proto._destroy = function _destroy(err, callback) {
        this.partialRenderer.destroy();
        callback(err);
      };

      _proto._read = function _read(size) {
        try {
          this.push(this.partialRenderer.read(size));
        } catch (err) {
          this.destroy(err);
        }
      };

      return ReactMarkupReadableStream;
    }(stream.Readable);

    function renderToNodeStream(element, options) {
      return new ReactMarkupReadableStream(element, false, options);
    }

    function renderToStaticNodeStream(element, options) {
      return new ReactMarkupReadableStream(element, true, options);
    }

    exports.renderToNodeStream = renderToNodeStream;
    exports.renderToStaticMarkup = renderToStaticMarkup;
    exports.renderToStaticNodeStream = renderToStaticNodeStream;
    exports.renderToString = renderToString;
    exports.version = ReactVersion;
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LWRvbS1zZXJ2ZXIubm9kZS5kZXZlbG9wbWVudC5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJSZWFjdCIsInJlcXVpcmUiLCJfYXNzaWduIiwic3RyZWFtIiwiUmVhY3RWZXJzaW9uIiwiZm9ybWF0UHJvZEVycm9yTWVzc2FnZSIsImNvZGUiLCJ1cmwiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiUmVhY3RTaGFyZWRJbnRlcm5hbHMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIndhcm4iLCJmb3JtYXQiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInByaW50V2FybmluZyIsImVycm9yIiwiX2xlbjIiLCJfa2V5MiIsImxldmVsIiwiUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSIsInN0YWNrIiwiZ2V0U3RhY2tBZGRlbmR1bSIsImNvbmNhdCIsImFyZ3NXaXRoRm9ybWF0IiwibWFwIiwiaXRlbSIsInVuc2hpZnQiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImFwcGx5IiwiY2FsbCIsImNvbnNvbGUiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRUFDVF9QT1JUQUxfVFlQRSIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIiwiUkVBQ1RfUFJPRklMRVJfVFlQRSIsIlJFQUNUX1BST1ZJREVSX1RZUEUiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSIsIlJFQUNUX01FTU9fVFlQRSIsIlJFQUNUX0xBWllfVFlQRSIsIlJFQUNUX0JMT0NLX1RZUEUiLCJSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSIsIlJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUiLCJSRUFDVF9TQ09QRV9UWVBFIiwiUkVBQ1RfT1BBUVVFX0lEX1RZUEUiLCJSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRSIsIlJFQUNUX09GRlNDUkVFTl9UWVBFIiwiUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFIiwiU3ltYm9sIiwiZm9yIiwic3ltYm9sRm9yIiwiZ2V0V3JhcHBlZE5hbWUiLCJvdXRlclR5cGUiLCJpbm5lclR5cGUiLCJ3cmFwcGVyTmFtZSIsImZ1bmN0aW9uTmFtZSIsImRpc3BsYXlOYW1lIiwibmFtZSIsImdldENvbnRleHROYW1lIiwidHlwZSIsImdldENvbXBvbmVudE5hbWUiLCJ0YWciLCIkJHR5cGVvZiIsImNvbnRleHQiLCJwcm92aWRlciIsIl9jb250ZXh0IiwicmVuZGVyIiwiX3JlbmRlciIsImxhenlDb21wb25lbnQiLCJwYXlsb2FkIiwiX3BheWxvYWQiLCJpbml0IiwiX2luaXQiLCJ4IiwiZW5hYmxlU3VzcGVuc2VTZXJ2ZXJSZW5kZXJlciIsImRpc2FibGVkRGVwdGgiLCJwcmV2TG9nIiwicHJldkluZm8iLCJwcmV2V2FybiIsInByZXZFcnJvciIsInByZXZHcm91cCIsInByZXZHcm91cENvbGxhcHNlZCIsInByZXZHcm91cEVuZCIsImRpc2FibGVkTG9nIiwiX19yZWFjdERpc2FibGVkTG9nIiwiZGlzYWJsZUxvZ3MiLCJsb2ciLCJpbmZvIiwiZ3JvdXAiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwicHJvcHMiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwidmFsdWUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJyZWVuYWJsZUxvZ3MiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwicHJlZml4IiwiZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUiLCJzb3VyY2UiLCJvd25lckZuIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJtYXRjaCIsInRyaW0iLCJyZWVudHJ5IiwiY29tcG9uZW50RnJhbWVDYWNoZSIsIlBvc3NpYmx5V2Vha01hcCIsIldlYWtNYXAiLCJNYXAiLCJkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lIiwiZm4iLCJjb25zdHJ1Y3QiLCJmcmFtZSIsImdldCIsImNvbnRyb2wiLCJwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJwcmV2aW91c0Rpc3BhdGNoZXIiLCJjdXJyZW50IiwiRmFrZSIsImRlZmluZVByb3BlcnR5Iiwic2V0IiwiUmVmbGVjdCIsInNhbXBsZSIsInNhbXBsZUxpbmVzIiwic3BsaXQiLCJjb250cm9sTGluZXMiLCJzIiwiYyIsIl9mcmFtZSIsInJlcGxhY2UiLCJzeW50aGV0aWNGcmFtZSIsImRlc2NyaWJlRnVuY3Rpb25Db21wb25lbnRGcmFtZSIsInNob3VsZENvbnN0cnVjdCIsIkNvbXBvbmVudCIsImlzUmVhY3RDb21wb25lbnQiLCJkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYiLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCIsImVsZW1lbnQiLCJvd25lciIsIl9vd25lciIsIl9zb3VyY2UiLCJzZXRFeHRyYVN0YWNrRnJhbWUiLCJjaGVja1Byb3BUeXBlcyIsInR5cGVTcGVjcyIsInZhbHVlcyIsImxvY2F0aW9uIiwiY29tcG9uZW50TmFtZSIsImhhcyIsImJpbmQiLCJoYXNPd25Qcm9wZXJ0eSIsInR5cGVTcGVjTmFtZSIsImVycm9yJDEiLCJlcnIiLCJleCIsIm1lc3NhZ2UiLCJkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGUiLCJTZXQiLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsIm1hc2tDb250ZXh0IiwiY29udGV4dFR5cGVzIiwibWFza2VkQ29udGV4dCIsImNvbnRleHROYW1lIiwiY2hlY2tDb250ZXh0VHlwZXMiLCJ2YWxpZGF0ZUNvbnRleHRCb3VuZHMiLCJ0aHJlYWRJRCIsIl90aHJlYWRDb3VudCIsIl9jdXJyZW50VmFsdWUyIiwicHJvY2Vzc0NvbnRleHQiLCJpc0NsYXNzIiwiY29udGV4dFR5cGUiLCJpc1ZhbGlkIiwiYWRkIiwiYWRkZW5kdW0iLCJrZXlzIiwiam9pbiIsIl9tYXNrZWRDb250ZXh0IiwibmV4dEF2YWlsYWJsZVRocmVhZElEcyIsIlVpbnQxNkFycmF5IiwiZ3Jvd1RocmVhZENvdW50QW5kUmV0dXJuTmV4dEF2YWlsYWJsZSIsIm9sZEFycmF5Iiwib2xkU2l6ZSIsIm5ld1NpemUiLCJuZXdBcnJheSIsIl9pIiwiYWxsb2NUaHJlYWRJRCIsIm5leHRJRCIsImZyZWVUaHJlYWRJRCIsImlkIiwiUkVTRVJWRUQiLCJTVFJJTkciLCJCT09MRUFOSVNIX1NUUklORyIsIkJPT0xFQU4iLCJPVkVSTE9BREVEX0JPT0xFQU4iLCJOVU1FUklDIiwiUE9TSVRJVkVfTlVNRVJJQyIsIkFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIiLCJBVFRSSUJVVEVfTkFNRV9DSEFSIiwiUk9PVF9BVFRSSUJVVEVfTkFNRSIsIlZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYIiwiUmVnRXhwIiwiaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSIsInZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSIsImlzQXR0cmlidXRlTmFtZVNhZmUiLCJhdHRyaWJ1dGVOYW1lIiwidGVzdCIsInNob3VsZElnbm9yZUF0dHJpYnV0ZSIsInByb3BlcnR5SW5mbyIsImlzQ3VzdG9tQ29tcG9uZW50VGFnIiwic2hvdWxkUmVtb3ZlQXR0cmlidXRlV2l0aFdhcm5pbmciLCJhY2NlcHRzQm9vbGVhbnMiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwic2hvdWxkUmVtb3ZlQXR0cmlidXRlIiwiaXNOYU4iLCJnZXRQcm9wZXJ0eUluZm8iLCJwcm9wZXJ0aWVzIiwiUHJvcGVydHlJbmZvUmVjb3JkIiwibXVzdFVzZVByb3BlcnR5IiwiYXR0cmlidXRlTmFtZXNwYWNlIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInByb3BlcnR5TmFtZSIsInJlc2VydmVkUHJvcHMiLCJmb3JFYWNoIiwiX3JlZiIsIkNBTUVMSVpFIiwiY2FwaXRhbGl6ZSIsInRva2VuIiwidG9VcHBlckNhc2UiLCJ4bGlua0hyZWYiLCJpc0phdmFTY3JpcHRQcm90b2NvbCIsImRpZFdhcm4iLCJKU09OIiwic3RyaW5naWZ5IiwibWF0Y2hIdG1sUmVnRXhwIiwiZXNjYXBlSHRtbCIsInN0cmluZyIsInN0ciIsImV4ZWMiLCJlc2NhcGUiLCJodG1sIiwiaW5kZXgiLCJsYXN0SW5kZXgiLCJjaGFyQ29kZUF0Iiwic3Vic3RyaW5nIiwiZXNjYXBlVGV4dEZvckJyb3dzZXIiLCJ0ZXh0IiwicXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIiLCJjcmVhdGVNYXJrdXBGb3JSb290IiwiY3JlYXRlTWFya3VwRm9yUHJvcGVydHkiLCJjcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGUiLCJpcyIsInkiLCJvYmplY3RJcyIsImN1cnJlbnRseVJlbmRlcmluZ0NvbXBvbmVudCIsImZpcnN0V29ya0luUHJvZ3Jlc3NIb29rIiwid29ya0luUHJvZ3Jlc3NIb29rIiwiaXNSZVJlbmRlciIsImRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUiLCJyZW5kZXJQaGFzZVVwZGF0ZXMiLCJudW1iZXJPZlJlUmVuZGVycyIsIlJFX1JFTkRFUl9MSU1JVCIsImlzSW5Ib29rVXNlckNvZGVJbkRldiIsImN1cnJlbnRIb29rTmFtZUluRGV2IiwicmVzb2x2ZUN1cnJlbnRseVJlbmRlcmluZ0NvbXBvbmVudCIsImFyZUhvb2tJbnB1dHNFcXVhbCIsIm5leHREZXBzIiwicHJldkRlcHMiLCJjcmVhdGVIb29rIiwibWVtb2l6ZWRTdGF0ZSIsInF1ZXVlIiwibmV4dCIsImNyZWF0ZVdvcmtJblByb2dyZXNzSG9vayIsInByZXBhcmVUb1VzZUhvb2tzIiwiY29tcG9uZW50SWRlbnRpdHkiLCJmaW5pc2hIb29rcyIsImNoaWxkcmVuIiwicmVmT3JDb250ZXh0IiwicmVzZXRIb29rc1N0YXRlIiwicmVhZENvbnRleHQiLCJvYnNlcnZlZEJpdHMiLCJjdXJyZW50UGFydGlhbFJlbmRlcmVyIiwidXNlQ29udGV4dCIsImJhc2ljU3RhdGVSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ1c2VTdGF0ZSIsImluaXRpYWxTdGF0ZSIsInVzZVJlZHVjZXIiLCJyZWR1Y2VyIiwiaW5pdGlhbEFyZyIsImRpc3BhdGNoIiwiZmlyc3RSZW5kZXJQaGFzZVVwZGF0ZSIsImRlbGV0ZSIsIm5ld1N0YXRlIiwidXBkYXRlIiwiX3F1ZXVlIiwibGFzdCIsIl9kaXNwYXRjaCIsImRpc3BhdGNoQWN0aW9uIiwidXNlTWVtbyIsIm5leHRDcmVhdGUiLCJkZXBzIiwicHJldlN0YXRlIiwibmV4dFZhbHVlIiwidXNlUmVmIiwiaW5pdGlhbFZhbHVlIiwicHJldmlvdXNSZWYiLCJyZWYiLCJzZWFsIiwidXNlTGF5b3V0RWZmZWN0IiwiY3JlYXRlIiwiaW5wdXRzIiwibGFzdFJlbmRlclBoYXNlVXBkYXRlIiwidXNlQ2FsbGJhY2siLCJjYWxsYmFjayIsInVzZU11dGFibGVTb3VyY2UiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwic3RhcnRUcmFuc2l0aW9uIiwidXNlT3BhcXVlSWRlbnRpZmllciIsImlkZW50aWZpZXJQcmVmaXgiLCJ1bmlxdWVJRCIsInRvU3RyaW5nIiwibm9vcCIsInNldEN1cnJlbnRQYXJ0aWFsUmVuZGVyZXIiLCJyZW5kZXJlciIsIkRpc3BhdGNoZXIiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRWZmZWN0IiwidXNlRGVidWdWYWx1ZSIsIkhUTUxfTkFNRVNQQUNFIiwiTUFUSF9OQU1FU1BBQ0UiLCJTVkdfTkFNRVNQQUNFIiwiTmFtZXNwYWNlcyIsIm1hdGhtbCIsInN2ZyIsImdldEludHJpbnNpY05hbWVzcGFjZSIsImdldENoaWxkTmFtZXNwYWNlIiwicGFyZW50TmFtZXNwYWNlIiwiaGFzUmVhZE9ubHlWYWx1ZSIsImJ1dHRvbiIsImNoZWNrYm94IiwiaW1hZ2UiLCJoaWRkZW4iLCJyYWRpbyIsInJlc2V0Iiwic3VibWl0IiwiY2hlY2tDb250cm9sbGVkVmFsdWVQcm9wcyIsInRhZ05hbWUiLCJvbkNoYW5nZSIsIm9uSW5wdXQiLCJyZWFkT25seSIsImRpc2FibGVkIiwiY2hlY2tlZCIsIm9taXR0ZWRDbG9zZVRhZ3MiLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidm9pZEVsZW1lbnRUYWdzIiwibWVudWl0ZW0iLCJIVE1MIiwiYXNzZXJ0VmFsaWRQcm9wcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIiwiY29udGVudEVkaXRhYmxlIiwic3R5bGUiLCJpc1VuaXRsZXNzTnVtYmVyIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJwcmVmaXhLZXkiLCJrZXkiLCJjaGFyQXQiLCJwcmVmaXhlcyIsInByb3AiLCJkYW5nZXJvdXNTdHlsZVZhbHVlIiwiaXNDdXN0b21Qcm9wZXJ0eSIsImlzRW1wdHkiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiaHlwaGVuYXRlU3R5bGVOYW1lIiwiaXNDdXN0b21Db21wb25lbnQiLCJpbmRleE9mIiwid2FyblZhbGlkU3R5bGUiLCJiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4iLCJtc1BhdHRlcm4kMSIsImh5cGhlblBhdHRlcm4iLCJiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4iLCJ3YXJuZWRTdHlsZU5hbWVzIiwid2FybmVkU3R5bGVWYWx1ZXMiLCJ3YXJuZWRGb3JOYU5WYWx1ZSIsIndhcm5lZEZvckluZmluaXR5VmFsdWUiLCJjYW1lbGl6ZSIsIl8iLCJjaGFyYWN0ZXIiLCJ3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSIsIndhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSIsIndhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiIsIndhcm5TdHlsZVZhbHVlSXNOYU4iLCJ3YXJuU3R5bGVWYWx1ZUlzSW5maW5pdHkiLCJpc0Zpbml0ZSIsIndhcm5WYWxpZFN0eWxlJDEiLCJhcmlhUHJvcGVydGllcyIsIndhcm5lZFByb3BlcnRpZXMiLCJyQVJJQSIsInJBUklBQ2FtZWwiLCJoYXNPd25Qcm9wZXJ0eSQxIiwidmFsaWRhdGVQcm9wZXJ0eSIsImFyaWFOYW1lIiwiY29ycmVjdE5hbWUiLCJsb3dlckNhc2VkTmFtZSIsInN0YW5kYXJkTmFtZSIsIndhcm5JbnZhbGlkQVJJQVByb3BzIiwiaW52YWxpZFByb3BzIiwicHVzaCIsInVua25vd25Qcm9wU3RyaW5nIiwidmFsaWRhdGVQcm9wZXJ0aWVzIiwiZGlkV2FyblZhbHVlTnVsbCIsInZhbGlkYXRlUHJvcGVydGllcyQxIiwibXVsdGlwbGUiLCJwb3NzaWJsZVN0YW5kYXJkTmFtZXMiLCJhY2NlcHQiLCJhY2NlcHRjaGFyc2V0IiwiYWNjZXNza2V5IiwiYWxsb3dmdWxsc2NyZWVuIiwiYWx0IiwiYXMiLCJhc3luYyIsImF1dG9jYXBpdGFsaXplIiwiYXV0b2NvbXBsZXRlIiwiYXV0b2NvcnJlY3QiLCJhdXRvZm9jdXMiLCJhdXRvcGxheSIsImF1dG9zYXZlIiwiY2FwdHVyZSIsImNlbGxwYWRkaW5nIiwiY2VsbHNwYWNpbmciLCJjaGFsbGVuZ2UiLCJjaGFyc2V0IiwiY2l0ZSIsImNsYXNzIiwiY2xhc3NpZCIsImNsYXNzbmFtZSIsImNvbHMiLCJjb2xzcGFuIiwiY29udGVudCIsImNvbnRlbnRlZGl0YWJsZSIsImNvbnRleHRtZW51IiwiY29udHJvbHMiLCJjb250cm9sc2xpc3QiLCJjb29yZHMiLCJjcm9zc29yaWdpbiIsImRhbmdlcm91c2x5c2V0aW5uZXJodG1sIiwiZGF0YSIsImRhdGV0aW1lIiwiZGVmYXVsdCIsImRlZmF1bHRjaGVja2VkIiwiZGVmYXVsdHZhbHVlIiwiZGVmZXIiLCJkaXIiLCJkaXNhYmxlcGljdHVyZWlucGljdHVyZSIsImRpc2FibGVyZW1vdGVwbGF5YmFjayIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZW5jdHlwZSIsImVudGVya2V5aGludCIsImZvcm0iLCJmb3JtbWV0aG9kIiwiZm9ybWFjdGlvbiIsImZvcm1lbmN0eXBlIiwiZm9ybW5vdmFsaWRhdGUiLCJmb3JtdGFyZ2V0IiwiZnJhbWVib3JkZXIiLCJoZWFkZXJzIiwiaGVpZ2h0IiwiaGlnaCIsImhyZWYiLCJocmVmbGFuZyIsImh0bWxmb3IiLCJodHRwZXF1aXYiLCJpY29uIiwiaW5uZXJodG1sIiwiaW5wdXRtb2RlIiwiaW50ZWdyaXR5IiwiaXRlbWlkIiwiaXRlbXByb3AiLCJpdGVtcmVmIiwiaXRlbXNjb3BlIiwiaXRlbXR5cGUiLCJrZXlwYXJhbXMiLCJrZXl0eXBlIiwia2luZCIsImxhYmVsIiwibGFuZyIsImxpc3QiLCJsb29wIiwibG93IiwibWFuaWZlc3QiLCJtYXJnaW53aWR0aCIsIm1hcmdpbmhlaWdodCIsIm1heCIsIm1heGxlbmd0aCIsIm1lZGlhIiwibWVkaWFncm91cCIsIm1ldGhvZCIsIm1pbiIsIm1pbmxlbmd0aCIsIm11dGVkIiwibm9tb2R1bGUiLCJub25jZSIsIm5vdmFsaWRhdGUiLCJvcGVuIiwib3B0aW11bSIsInBhdHRlcm4iLCJwbGFjZWhvbGRlciIsInBsYXlzaW5saW5lIiwicG9zdGVyIiwicHJlbG9hZCIsInByb2ZpbGUiLCJyYWRpb2dyb3VwIiwicmVhZG9ubHkiLCJyZWZlcnJlcnBvbGljeSIsInJlbCIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb2xlIiwicm93cyIsInJvd3NwYW4iLCJzYW5kYm94Iiwic2NvcGUiLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNlbGVjdGVkIiwic2hhcGUiLCJzaXplIiwic2l6ZXMiLCJzcGFuIiwic3BlbGxjaGVjayIsInNyYyIsInNyY2RvYyIsInNyY2xhbmciLCJzcmNzZXQiLCJzdGFydCIsInN0ZXAiLCJzdW1tYXJ5IiwidGFiaW5kZXgiLCJ0YXJnZXQiLCJ0aXRsZSIsInVzZW1hcCIsIndpZHRoIiwid21vZGUiLCJ3cmFwIiwiYWJvdXQiLCJhY2NlbnRoZWlnaHQiLCJhY2N1bXVsYXRlIiwiYWRkaXRpdmUiLCJhbGlnbm1lbnRiYXNlbGluZSIsImFsbG93cmVvcmRlciIsImFscGhhYmV0aWMiLCJhbXBsaXR1ZGUiLCJhcmFiaWNmb3JtIiwiYXNjZW50IiwiYXR0cmlidXRlbmFtZSIsImF0dHJpYnV0ZXR5cGUiLCJhdXRvcmV2ZXJzZSIsImF6aW11dGgiLCJiYXNlZnJlcXVlbmN5IiwiYmFzZWxpbmVzaGlmdCIsImJhc2Vwcm9maWxlIiwiYmJveCIsImJlZ2luIiwiYmlhcyIsImJ5IiwiY2FsY21vZGUiLCJjYXBoZWlnaHQiLCJjbGlwIiwiY2xpcHBhdGgiLCJjbGlwcGF0aHVuaXRzIiwiY2xpcHJ1bGUiLCJjb2xvciIsImNvbG9yaW50ZXJwb2xhdGlvbiIsImNvbG9yaW50ZXJwb2xhdGlvbmZpbHRlcnMiLCJjb2xvcnByb2ZpbGUiLCJjb2xvcnJlbmRlcmluZyIsImNvbnRlbnRzY3JpcHR0eXBlIiwiY29udGVudHN0eWxldHlwZSIsImN1cnNvciIsImN4IiwiY3kiLCJkIiwiZGF0YXR5cGUiLCJkZWNlbGVyYXRlIiwiZGVzY2VudCIsImRpZmZ1c2Vjb25zdGFudCIsImRpcmVjdGlvbiIsImRpc3BsYXkiLCJkaXZpc29yIiwiZG9taW5hbnRiYXNlbGluZSIsImR1ciIsImR4IiwiZHkiLCJlZGdlbW9kZSIsImVsZXZhdGlvbiIsImVuYWJsZWJhY2tncm91bmQiLCJlbmQiLCJleHBvbmVudCIsImV4dGVybmFscmVzb3VyY2VzcmVxdWlyZWQiLCJmaWxsIiwiZmlsbG9wYWNpdHkiLCJmaWxscnVsZSIsImZpbHRlciIsImZpbHRlcnJlcyIsImZpbHRlcnVuaXRzIiwiZmxvb2RvcGFjaXR5IiwiZmxvb2Rjb2xvciIsImZvY3VzYWJsZSIsImZvbnRmYW1pbHkiLCJmb250c2l6ZSIsImZvbnRzaXplYWRqdXN0IiwiZm9udHN0cmV0Y2giLCJmb250c3R5bGUiLCJmb250dmFyaWFudCIsImZvbnR3ZWlnaHQiLCJmcm9tIiwiZngiLCJmeSIsImcxIiwiZzIiLCJnbHlwaG5hbWUiLCJnbHlwaG9yaWVudGF0aW9uaG9yaXpvbnRhbCIsImdseXBob3JpZW50YXRpb252ZXJ0aWNhbCIsImdseXBocmVmIiwiZ3JhZGllbnR0cmFuc2Zvcm0iLCJncmFkaWVudHVuaXRzIiwiaGFuZ2luZyIsImhvcml6YWR2eCIsImhvcml6b3JpZ2lueCIsImlkZW9ncmFwaGljIiwiaW1hZ2VyZW5kZXJpbmciLCJpbjIiLCJpbiIsImlubGlzdCIsImludGVyY2VwdCIsImsxIiwiazIiLCJrMyIsIms0IiwiayIsImtlcm5lbG1hdHJpeCIsImtlcm5lbHVuaXRsZW5ndGgiLCJrZXJuaW5nIiwia2V5cG9pbnRzIiwia2V5c3BsaW5lcyIsImtleXRpbWVzIiwibGVuZ3RoYWRqdXN0IiwibGV0dGVyc3BhY2luZyIsImxpZ2h0aW5nY29sb3IiLCJsaW1pdGluZ2NvbmVhbmdsZSIsImxvY2FsIiwibWFya2VyZW5kIiwibWFya2VyaGVpZ2h0IiwibWFya2VybWlkIiwibWFya2Vyc3RhcnQiLCJtYXJrZXJ1bml0cyIsIm1hcmtlcndpZHRoIiwibWFzayIsIm1hc2tjb250ZW50dW5pdHMiLCJtYXNrdW5pdHMiLCJtYXRoZW1hdGljYWwiLCJtb2RlIiwibnVtb2N0YXZlcyIsIm9mZnNldCIsIm9wZXJhdG9yIiwib3JpZW50Iiwib3JpZW50YXRpb24iLCJvcmlnaW4iLCJvdmVyZmxvdyIsIm92ZXJsaW5lcG9zaXRpb24iLCJvdmVybGluZXRoaWNrbmVzcyIsInBhaW50b3JkZXIiLCJwYW5vc2UxIiwicGF0aGxlbmd0aCIsInBhdHRlcm5jb250ZW50dW5pdHMiLCJwYXR0ZXJudHJhbnNmb3JtIiwicGF0dGVybnVuaXRzIiwicG9pbnRlcmV2ZW50cyIsInBvaW50cyIsInBvaW50c2F0eCIsInBvaW50c2F0eSIsInBvaW50c2F0eiIsInByZXNlcnZlYWxwaGEiLCJwcmVzZXJ2ZWFzcGVjdHJhdGlvIiwicHJpbWl0aXZldW5pdHMiLCJwcm9wZXJ0eSIsInIiLCJyYWRpdXMiLCJyZWZ4IiwicmVmeSIsInJlbmRlcmluZ2ludGVudCIsInJlcGVhdGNvdW50IiwicmVwZWF0ZHVyIiwicmVxdWlyZWRleHRlbnNpb25zIiwicmVxdWlyZWRmZWF0dXJlcyIsInJlc291cmNlIiwicmVzdGFydCIsInJlc3VsdCIsInJlc3VsdHMiLCJyb3RhdGUiLCJyeCIsInJ5Iiwic2NhbGUiLCJzZWN1cml0eSIsInNlZWQiLCJzaGFwZXJlbmRlcmluZyIsInNsb3BlIiwic3BhY2luZyIsInNwZWN1bGFyY29uc3RhbnQiLCJzcGVjdWxhcmV4cG9uZW50Iiwic3BlZWQiLCJzcHJlYWRtZXRob2QiLCJzdGFydG9mZnNldCIsInN0ZGRldmlhdGlvbiIsInN0ZW1oIiwic3RlbXYiLCJzdGl0Y2h0aWxlcyIsInN0b3Bjb2xvciIsInN0b3BvcGFjaXR5Iiwic3RyaWtldGhyb3VnaHBvc2l0aW9uIiwic3RyaWtldGhyb3VnaHRoaWNrbmVzcyIsInN0cm9rZSIsInN0cm9rZWRhc2hhcnJheSIsInN0cm9rZWRhc2hvZmZzZXQiLCJzdHJva2VsaW5lY2FwIiwic3Ryb2tlbGluZWpvaW4iLCJzdHJva2VtaXRlcmxpbWl0Iiwic3Ryb2tld2lkdGgiLCJzdHJva2VvcGFjaXR5Iiwic3VwcHJlc3Njb250ZW50ZWRpdGFibGV3YXJuaW5nIiwic3VwcHJlc3NoeWRyYXRpb253YXJuaW5nIiwic3VyZmFjZXNjYWxlIiwic3lzdGVtbGFuZ3VhZ2UiLCJ0YWJsZXZhbHVlcyIsInRhcmdldHgiLCJ0YXJnZXR5IiwidGV4dGFuY2hvciIsInRleHRkZWNvcmF0aW9uIiwidGV4dGxlbmd0aCIsInRleHRyZW5kZXJpbmciLCJ0byIsInRyYW5zZm9ybSIsInR5cGVvZiIsInUxIiwidTIiLCJ1bmRlcmxpbmVwb3NpdGlvbiIsInVuZGVybGluZXRoaWNrbmVzcyIsInVuaWNvZGUiLCJ1bmljb2RlYmlkaSIsInVuaWNvZGVyYW5nZSIsInVuaXRzcGVyZW0iLCJ1bnNlbGVjdGFibGUiLCJ2YWxwaGFiZXRpYyIsInZlY3RvcmVmZmVjdCIsInZlcnNpb24iLCJ2ZXJ0YWR2eSIsInZlcnRvcmlnaW54IiwidmVydG9yaWdpbnkiLCJ2aGFuZ2luZyIsInZpZGVvZ3JhcGhpYyIsInZpZXdib3giLCJ2aWV3dGFyZ2V0IiwidmlzaWJpbGl0eSIsInZtYXRoZW1hdGljYWwiLCJ2b2NhYiIsIndpZHRocyIsIndvcmRzcGFjaW5nIiwid3JpdGluZ21vZGUiLCJ4MSIsIngyIiwieGNoYW5uZWxzZWxlY3RvciIsInhoZWlnaHQiLCJ4bGlua2FjdHVhdGUiLCJ4bGlua2FyY3JvbGUiLCJ4bGlua2hyZWYiLCJ4bGlua3JvbGUiLCJ4bGlua3Nob3ciLCJ4bGlua3RpdGxlIiwieGxpbmt0eXBlIiwieG1sYmFzZSIsInhtbGxhbmciLCJ4bWxucyIsInhtbG5zeGxpbmsiLCJ4bWxzcGFjZSIsInkxIiwieTIiLCJ5Y2hhbm5lbHNlbGVjdG9yIiwieiIsInpvb21hbmRwYW4iLCJ2YWxpZGF0ZVByb3BlcnR5JDEiLCJ3YXJuZWRQcm9wZXJ0aWVzJDEiLCJfaGFzT3duUHJvcGVydHkiLCJFVkVOVF9OQU1FX1JFR0VYIiwiSU5WQUxJRF9FVkVOVF9OQU1FX1JFR0VYIiwickFSSUEkMSIsInJBUklBQ2FtZWwkMSIsImV2ZW50UmVnaXN0cnkiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsInJlZ2lzdHJhdGlvbk5hbWUiLCJpc1Jlc2VydmVkIiwid2FyblVua25vd25Qcm9wZXJ0aWVzIiwidW5rbm93blByb3BzIiwidmFsaWRhdGVQcm9wZXJ0aWVzJDIiLCJ0b0FycmF5IiwiQ2hpbGRyZW4iLCJjdXJyZW50RGVidWdTdGFja3MiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEiLCJSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEiLCJwcmV2R2V0Q3VycmVudFN0YWNrSW1wbCIsImdldEN1cnJlbnRTZXJ2ZXJTdGFja0ltcGwiLCJkZXNjcmliZVN0YWNrRnJhbWUiLCJ2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50IiwicHVzaEN1cnJlbnREZWJ1Z1N0YWNrIiwicHVzaEVsZW1lbnRUb0RlYnVnU3RhY2siLCJwb3BDdXJyZW50RGVidWdTdGFjayIsImhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lciIsImdldEN1cnJlbnRTdGFjayIsImRlYnVnRWxlbWVudFN0YWNrIiwicG9wIiwiZnJhbWVzIiwiaWkiLCJkaWRXYXJuRGVmYXVsdElucHV0VmFsdWUiLCJkaWRXYXJuRGVmYXVsdENoZWNrZWQiLCJkaWRXYXJuRGVmYXVsdFNlbGVjdFZhbHVlIiwiZGlkV2FybkRlZmF1bHRUZXh0YXJlYVZhbHVlIiwiZGlkV2FybkludmFsaWRPcHRpb25DaGlsZHJlbiIsImRpZFdhcm5BYm91dE5vb3BVcGRhdGVGb3JDb21wb25lbnQiLCJkaWRXYXJuQWJvdXRCYWRDbGFzcyIsImRpZFdhcm5BYm91dE1vZHVsZVBhdHRlcm5Db21wb25lbnQiLCJkaWRXYXJuQWJvdXREZXByZWNhdGVkV2lsbE1vdW50IiwiZGlkV2FybkFib3V0VW5kZWZpbmVkRGVyaXZlZFN0YXRlIiwiZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlIiwidmFsdWVQcm9wTmFtZXMiLCJuZXdsaW5lRWF0aW5nVGFncyIsImxpc3RpbmciLCJwcmUiLCJ0ZXh0YXJlYSIsIlZBTElEX1RBR19SRUdFWCIsInZhbGlkYXRlZFRhZ0NhY2hlIiwidmFsaWRhdGVEYW5nZXJvdXNUYWciLCJzdHlsZU5hbWVDYWNoZSIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJjcmVhdGVNYXJrdXBGb3JTdHlsZXMiLCJzdHlsZXMiLCJzZXJpYWxpemVkIiwiZGVsaW1pdGVyIiwic3R5bGVWYWx1ZSIsIndhcm5Ob29wIiwicHVibGljSW5zdGFuY2UiLCJjYWxsZXJOYW1lIiwiX2NvbnN0cnVjdG9yIiwiY29uc3RydWN0b3IiLCJ3YXJuaW5nS2V5Iiwic2hvdWxkQ29uc3RydWN0JDEiLCJnZXROb25DaGlsZHJlbklubmVyTWFya3VwIiwiaW5uZXJIVE1MIiwiX19odG1sIiwiZmxhdHRlblRvcExldmVsQ2hpbGRyZW4iLCJpc1ZhbGlkRWxlbWVudCIsImZyYWdtZW50Q2hpbGRyZW4iLCJmcmFnbWVudENoaWxkRWxlbWVudCIsImZsYXR0ZW5PcHRpb25DaGlsZHJlbiIsImNoaWxkIiwiaGFzT3duUHJvcGVydHkkMiIsIlNUWUxFIiwiUkVTRVJWRURfUFJPUFMiLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJjcmVhdGVPcGVuVGFnTWFya3VwIiwidGFnVmVyYmF0aW0iLCJ0YWdMb3dlcmNhc2UiLCJuYW1lc3BhY2UiLCJtYWtlU3RhdGljTWFya3VwIiwiaXNSb290RWxlbWVudCIsInJldCIsImlzQ3VzdG9tQ29tcG9uZW50JDEiLCJwcm9wS2V5IiwicHJvcFZhbHVlIiwibWFya3VwIiwidmFsaWRhdGVSZW5kZXJSZXN1bHQiLCJyZXNvbHZlIiwicHJvY2Vzc0NoaWxkIiwicHVibGljQ29udGV4dCIsInVwZGF0ZXIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiY29tcGxldGVTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsImN1cnJlbnRQYXJ0aWFsU3RhdGUiLCJpbnN0IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwicGFydGlhbFN0YXRlIiwiX2NvbXBvbmVudE5hbWUiLCJfY29tcG9uZW50TmFtZTIiLCJfY29tcG9uZW50TmFtZTMiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyIsIl9jb21wb25lbnROYW1lNCIsIm9sZFF1ZXVlIiwib2xkUmVwbGFjZSIsIm5leHRTdGF0ZSIsImRvbnRNdXRhdGUiLCJwYXJ0aWFsIiwiX3BhcnRpYWxTdGF0ZSIsIl9pc01vY2tGdW5jdGlvbiIsImNoaWxkQ29udGV4dCIsImdldENoaWxkQ29udGV4dCIsIl9jaGlsZENvbnRleHRUeXBlcyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dEtleSIsIlJlYWN0RE9NU2VydmVyUmVuZGVyZXIiLCJvcHRpb25zIiwiZmxhdENoaWxkcmVuIiwidG9wRnJhbWUiLCJkb21OYW1lc3BhY2UiLCJjaGlsZEluZGV4IiwiZm9vdGVyIiwiZXhoYXVzdGVkIiwiY3VycmVudFNlbGVjdFZhbHVlIiwicHJldmlvdXNXYXNUZXh0Tm9kZSIsInN1c3BlbnNlRGVwdGgiLCJjb250ZXh0SW5kZXgiLCJjb250ZXh0U3RhY2siLCJjb250ZXh0VmFsdWVTdGFjayIsImNvbnRleHRQcm92aWRlclN0YWNrIiwiX3Byb3RvIiwiZGVzdHJveSIsImNsZWFyUHJvdmlkZXJzIiwicHVzaFByb3ZpZGVyIiwicHJldmlvdXNWYWx1ZSIsInBvcFByb3ZpZGVyIiwicmVhZCIsImJ5dGVzIiwicHJldlBhcnRpYWxSZW5kZXJlciIsInByZXZEaXNwYXRjaGVyIiwib3V0Iiwic3VzcGVuZGVkIiwiYnVmZmVyZWQiLCJmYWxsYmFja0ZyYW1lIiwib3V0QnVmZmVyIiwidGhlbiIsIm5leHRDaGlsZCIsIl9yZXNvbHZlIiwibmV4dENoaWxkcmVuIiwibmV4dEVsZW1lbnQiLCJlbGVtZW50VHlwZSIsInJlbmRlckRPTSIsIl9uZXh0Q2hpbGRyZW4iLCJfbmV4dENoaWxkcmVuNSIsIl9mcmFtZTUiLCJfZWxlbWVudCIsIl9uZXh0Q2hpbGRyZW42IiwiY3JlYXRlRWxlbWVudCIsIl9mcmFtZTYiLCJuZXh0UHJvcHMiLCJfbmV4dENoaWxkcmVuNyIsIl9mcmFtZTciLCJyZWFjdENvbnRleHQiLCJDb25zdW1lciIsIl9uZXh0UHJvcHMiLCJfbmV4dENoaWxkcmVuOCIsIl9mcmFtZTgiLCJfZWxlbWVudDIiLCJfbmV4dENoaWxkcmVuMTAiLCJfZnJhbWUxMCIsIm93bmVyTmFtZSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwidGV4dGFyZWFDaGlsZHJlbiIsImlzQXJyYXkiLCJwcm9wTmFtZSIsInNlbGVjdFZhbHVlIiwib3B0aW9uQ2hpbGRyZW4iLCJqIiwiaW5uZXJNYXJrdXAiLCJyZW5kZXJUb1N0cmluZyIsIkluZmluaXR5IiwicmVuZGVyVG9TdGF0aWNNYXJrdXAiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIlJlYWN0TWFya3VwUmVhZGFibGVTdHJlYW0iLCJfUmVhZGFibGUiLCJfdGhpcyIsInBhcnRpYWxSZW5kZXJlciIsIl9kZXN0cm95IiwiX3JlYWQiLCJSZWFkYWJsZSIsInJlbmRlclRvTm9kZVN0cmVhbSIsInJlbmRlclRvU3RhdGljTm9kZVN0cmVhbSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFF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QUNBYyxJQUFBQSxPQUFPLENBQUNELHdCQUFSLEdBQW1DQSx3QkFBbkM7QUFDQUMsSUFBQUEsT0FBTyxDQUFDaEIsY0FBUixHQUF5QkEsY0FBekI7QUFDQWdCLElBQUFBLE9BQU8sQ0FBQ2hQLE9BQVIsR0FBa0I3ekIsWUFBbEI7QUFDRyxHQWp4SUQ7QUFreElEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjFcbiAqIHJlYWN0LWRvbS1zZXJ2ZXIubm9kZS5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxuLy8gVE9ETzogdGhpcyBpcyBzcGVjaWFsIGJlY2F1c2UgaXQgZ2V0cyBpbXBvcnRlZCBkdXJpbmcgYnVpbGQuXG52YXIgUmVhY3RWZXJzaW9uID0gJzE3LjAuMSc7XG5cbi8vIERvIG5vdCByZXF1aXJlIHRoaXMgbW9kdWxlIGRpcmVjdGx5ISBVc2Ugbm9ybWFsIGBpbnZhcmlhbnRgIGNhbGxzIHdpdGhcbi8vIHRlbXBsYXRlIGxpdGVyYWwgc3RyaW5ncy4gVGhlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuLy8gZHVyaW5nIGJ1aWxkLlxuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHZhciB1cmwgPSAnaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9JyArIGNvZGU7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiICsgY29kZSArIFwiOyB2aXNpdCBcIiArIHVybCArIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIFwiICsgJ3VzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgJyArICdoZWxwZnVsIHdhcm5pbmdzLic7XG59XG5cbnZhciBSZWFjdFNoYXJlZEludGVybmFscyA9IFJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuXG4vLyBieSBjYWxscyB0byB0aGVzZSBtZXRob2RzIGJ5IGEgQmFiZWwgcGx1Z2luLlxuLy9cbi8vIEluIFBST0QgKG9yIGluIHBhY2thZ2VzIHdpdGhvdXQgYWNjZXNzIHRvIFJlYWN0IGludGVybmFscyksXG4vLyB0aGV5IGFyZSBsZWZ0IGFzIHRoZXkgYXJlIGluc3RlYWQuXG5cbmZ1bmN0aW9uIHdhcm4oZm9ybWF0KSB7XG4gIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwcmludFdhcm5pbmcoJ3dhcm4nLCBmb3JtYXQsIGFyZ3MpO1xuICB9XG59XG5mdW5jdGlvbiBlcnJvcihmb3JtYXQpIHtcbiAge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHByaW50V2FybmluZygnZXJyb3InLCBmb3JtYXQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50V2FybmluZyhsZXZlbCwgZm9ybWF0LCBhcmdzKSB7XG4gIC8vIFdoZW4gY2hhbmdpbmcgdGhpcyBsb2dpYywgeW91IG1pZ2h0IHdhbnQgdG8gYWxzb1xuICAvLyB1cGRhdGUgY29uc29sZVdpdGhTdGFja0Rldi53d3cuanMgYXMgd2VsbC5cbiAge1xuICAgIHZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcbiAgICB2YXIgc3RhY2sgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcblxuICAgIGlmIChzdGFjayAhPT0gJycpIHtcbiAgICAgIGZvcm1hdCArPSAnJXMnO1xuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFtzdGFja10pO1xuICAgIH1cblxuICAgIHZhciBhcmdzV2l0aEZvcm1hdCA9IGFyZ3MubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gJycgKyBpdGVtO1xuICAgIH0pOyAvLyBDYXJlZnVsOiBSTiBjdXJyZW50bHkgZGVwZW5kcyBvbiB0aGlzIHByZWZpeFxuXG4gICAgYXJnc1dpdGhGb3JtYXQudW5zaGlmdCgnV2FybmluZzogJyArIGZvcm1hdCk7IC8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIHNwcmVhZCAob3IgLmFwcGx5KSBkaXJlY3RseSBiZWNhdXNlIGl0XG4gICAgLy8gYnJlYWtzIElFOTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMzYxMFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmdcblxuICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGVbbGV2ZWxdLCBjb25zb2xlLCBhcmdzV2l0aEZvcm1hdCk7XG4gIH1cbn1cblxuLy8gQVRURU5USU9OXG4vLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsXG4vLyBQbGVhc2UgY29uc2lkZXIgYWxzbyBhZGRpbmcgdG8gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9SZWFjdFN5bWJvbHMnXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IDB4ZWFjNztcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IDB4ZWFjYTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gMHhlYWNiO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSAweGVhY2M7XG52YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IDB4ZWFkMjtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gMHhlYWNkO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IDB4ZWFjZTtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gMHhlYWQwO1xudmFyIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSAweGVhZDE7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gMHhlYWQ4O1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IDB4ZWFkMztcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSAweGVhZDQ7XG52YXIgUkVBQ1RfQkxPQ0tfVFlQRSA9IDB4ZWFkOTtcbnZhciBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSA9IDB4ZWFkYTtcbnZhciBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gMHhlYWQ1O1xudmFyIFJFQUNUX1NDT1BFX1RZUEUgPSAweGVhZDc7XG52YXIgUkVBQ1RfT1BBUVVFX0lEX1RZUEUgPSAweGVhZTA7XG52YXIgUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUgPSAweGVhZTE7XG52YXIgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSAweGVhZTI7XG52YXIgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gMHhlYWUzO1xuXG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yKSB7XG4gIHZhciBzeW1ib2xGb3IgPSBTeW1ib2wuZm9yO1xuICBSRUFDVF9FTEVNRU5UX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmVsZW1lbnQnKTtcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnBvcnRhbCcpO1xuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mcmFnbWVudCcpO1xuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpO1xuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wcm9maWxlcicpO1xuICBSRUFDVF9QUk9WSURFUl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wcm92aWRlcicpO1xuICBSRUFDVF9DT05URVhUX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmNvbnRleHQnKTtcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuZm9yd2FyZF9yZWYnKTtcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Quc3VzcGVuc2UnKTtcbiAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0Jyk7XG4gIFJFQUNUX01FTU9fVFlQRSA9IHN5bWJvbEZvcigncmVhY3QubWVtbycpO1xuICBSRUFDVF9MQVpZX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmxhenknKTtcbiAgUkVBQ1RfQkxPQ0tfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuYmxvY2snKTtcbiAgUkVBQ1RfU0VSVkVSX0JMT0NLX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnNlcnZlci5ibG9jaycpO1xuICBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mdW5kYW1lbnRhbCcpO1xuICBSRUFDVF9TQ09QRV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zY29wZScpO1xuICBSRUFDVF9PUEFRVUVfSURfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Qub3BhcXVlLmlkJyk7XG4gIFJFQUNUX0RFQlVHX1RSQUNJTkdfTU9ERV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5kZWJ1Z190cmFjZV9tb2RlJyk7XG4gIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5vZmZzY3JlZW4nKTtcbiAgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5sZWdhY3lfaGlkZGVuJyk7XG59XG5cbmZ1bmN0aW9uIGdldFdyYXBwZWROYW1lKG91dGVyVHlwZSwgaW5uZXJUeXBlLCB3cmFwcGVyTmFtZSkge1xuICB2YXIgZnVuY3Rpb25OYW1lID0gaW5uZXJUeXBlLmRpc3BsYXlOYW1lIHx8IGlubmVyVHlwZS5uYW1lIHx8ICcnO1xuICByZXR1cm4gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lIHx8IChmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyBcIihcIiArIGZ1bmN0aW9uTmFtZSArIFwiKVwiIDogd3JhcHBlck5hbWUpO1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZXh0TmFtZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8ICdDb250ZXh0Jztcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSh0eXBlKSB7XG4gIGlmICh0eXBlID09IG51bGwpIHtcbiAgICAvLyBIb3N0IHJvb3QsIHRleHQgbm9kZSBvciBqdXN0IGludmFsaWQgdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHtcbiAgICBpZiAodHlwZW9mIHR5cGUudGFnID09PSAnbnVtYmVyJykge1xuICAgICAgZXJyb3IoJ1JlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgb2JqZWN0IGluIGdldENvbXBvbmVudE5hbWUoKS4gJyArICdUaGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gJ0ZyYWdtZW50JztcblxuICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICByZXR1cm4gJ1BvcnRhbCc7XG5cbiAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICByZXR1cm4gJ1Byb2ZpbGVyJztcblxuICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgIHJldHVybiAnU3RyaWN0TW9kZSc7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N1c3BlbnNlJztcblxuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZUxpc3QnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHZhciBjb250ZXh0ID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIGdldENvbnRleHROYW1lKGNvbnRleHQpICsgJy5Db25zdW1lcic7XG5cbiAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIGdldENvbnRleHROYW1lKHByb3ZpZGVyLl9jb250ZXh0KSArICcuUHJvdmlkZXInO1xuXG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRXcmFwcGVkTmFtZSh0eXBlLCB0eXBlLnJlbmRlciwgJ0ZvcndhcmRSZWYnKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lKHR5cGUudHlwZSk7XG5cbiAgICAgIGNhc2UgUkVBQ1RfQkxPQ0tfVFlQRTpcbiAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUodHlwZS5fcmVuZGVyKTtcblxuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7XG4gICAgICAgICAgdmFyIHBheWxvYWQgPSBsYXp5Q29tcG9uZW50Ll9wYXlsb2FkO1xuICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZShpbml0KHBheWxvYWQpKTtcbiAgICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLy8gRmlsdGVyIGNlcnRhaW4gRE9NIGF0dHJpYnV0ZXMgKGUuZy4gc3JjLCBocmVmKSBpZiB0aGVpciB2YWx1ZXMgYXJlIGVtcHR5IHN0cmluZ3MuXG5cbnZhciBlbmFibGVTdXNwZW5zZVNlcnZlclJlbmRlcmVyID0gZmFsc2U7XG5cbi8vIEhlbHBlcnMgdG8gcGF0Y2ggY29uc29sZS5sb2dzIHRvIGF2b2lkIGxvZ2dpbmcgZHVyaW5nIHNpZGUtZWZmZWN0IGZyZWVcbi8vIHJlcGxheWluZyBvbiByZW5kZXIgZnVuY3Rpb24uIFRoaXMgY3VycmVudGx5IG9ubHkgcGF0Y2hlcyB0aGUgb2JqZWN0XG4vLyBsYXppbHkgd2hpY2ggd29uJ3QgY292ZXIgaWYgdGhlIGxvZyBmdW5jdGlvbiB3YXMgZXh0cmFjdGVkIGVhZ2VybHkuXG4vLyBXZSBjb3VsZCBhbHNvIGVhZ2VybHkgcGF0Y2ggdGhlIG1ldGhvZC5cbnZhciBkaXNhYmxlZERlcHRoID0gMDtcbnZhciBwcmV2TG9nO1xudmFyIHByZXZJbmZvO1xudmFyIHByZXZXYXJuO1xudmFyIHByZXZFcnJvcjtcbnZhciBwcmV2R3JvdXA7XG52YXIgcHJldkdyb3VwQ29sbGFwc2VkO1xudmFyIHByZXZHcm91cEVuZDtcblxuZnVuY3Rpb24gZGlzYWJsZWRMb2coKSB7fVxuXG5kaXNhYmxlZExvZy5fX3JlYWN0RGlzYWJsZWRMb2cgPSB0cnVlO1xuZnVuY3Rpb24gZGlzYWJsZUxvZ3MoKSB7XG4gIHtcbiAgICBpZiAoZGlzYWJsZWREZXB0aCA9PT0gMCkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgICBwcmV2TG9nID0gY29uc29sZS5sb2c7XG4gICAgICBwcmV2SW5mbyA9IGNvbnNvbGUuaW5mbztcbiAgICAgIHByZXZXYXJuID0gY29uc29sZS53YXJuO1xuICAgICAgcHJldkVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICAgIHByZXZHcm91cCA9IGNvbnNvbGUuZ3JvdXA7XG4gICAgICBwcmV2R3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkO1xuICAgICAgcHJldkdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZDsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xOTA5OVxuXG4gICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGRpc2FibGVkTG9nLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfTsgLy8gJEZsb3dGaXhNZSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgICBpbmZvOiBwcm9wcyxcbiAgICAgICAgbG9nOiBwcm9wcyxcbiAgICAgICAgd2FybjogcHJvcHMsXG4gICAgICAgIGVycm9yOiBwcm9wcyxcbiAgICAgICAgZ3JvdXA6IHByb3BzLFxuICAgICAgICBncm91cENvbGxhcHNlZDogcHJvcHMsXG4gICAgICAgIGdyb3VwRW5kOiBwcm9wc1xuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgIH1cblxuICAgIGRpc2FibGVkRGVwdGgrKztcbiAgfVxufVxuZnVuY3Rpb24gcmVlbmFibGVMb2dzKCkge1xuICB7XG4gICAgZGlzYWJsZWREZXB0aC0tO1xuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9OyAvLyAkRmxvd0ZpeE1lIEZsb3cgdGhpbmtzIGNvbnNvbGUgaXMgaW1tdXRhYmxlLlxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb25zb2xlLCB7XG4gICAgICAgIGxvZzogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkxvZ1xuICAgICAgICB9KSxcbiAgICAgICAgaW5mbzogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkluZm9cbiAgICAgICAgfSksXG4gICAgICAgIHdhcm46IF9hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZXYXJuXG4gICAgICAgIH0pLFxuICAgICAgICBlcnJvcjogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkVycm9yXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cDogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cENvbGxhcHNlZDogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwQ29sbGFwc2VkXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cEVuZDogX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwRW5kXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7XG4gICAgICBlcnJvcignZGlzYWJsZWREZXB0aCBmZWxsIGJlbG93IHplcm8uICcgKyAnVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBwcmVmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRXh0cmFjdCB0aGUgVk0gc3BlY2lmaWMgcHJlZml4IHVzZWQgYnkgZWFjaCBsaW5lLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgICAgcHJlZml4ID0gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG4gICAgICB9XG4gICAgfSAvLyBXZSB1c2UgdGhlIHByZWZpeCB0byBlbnN1cmUgb3VyIHN0YWNrcyBsaW5lIHVwIHdpdGggbmF0aXZlIHN0YWNrIGZyYW1lcy5cblxuXG4gICAgcmV0dXJuICdcXG4nICsgcHJlZml4ICsgbmFtZTtcbiAgfVxufVxudmFyIHJlZW50cnkgPSBmYWxzZTtcbnZhciBjb21wb25lbnRGcmFtZUNhY2hlO1xuXG57XG4gIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbXBvbmVudEZyYW1lQ2FjaGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICAvLyBJZiBzb21ldGhpbmcgYXNrZWQgZm9yIGEgc3RhY2sgaW5zaWRlIGEgZmFrZSByZW5kZXIsIGl0IHNob3VsZCBnZXQgaWdub3JlZC5cbiAgaWYgKCFmbiB8fCByZWVudHJ5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAge1xuICAgIHZhciBmcmFtZSA9IGNvbXBvbmVudEZyYW1lQ2FjaGUuZ2V0KGZuKTtcblxuICAgIGlmIChmcmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZnJhbWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbnRyb2w7XG4gIHJlZW50cnkgPSB0cnVlO1xuICB2YXIgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlOyAvLyAkRmxvd0ZpeE1lIEl0IGRvZXMgYWNjZXB0IHVuZGVmaW5lZC5cblxuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHVuZGVmaW5lZDtcbiAgdmFyIHByZXZpb3VzRGlzcGF0Y2hlcjtcblxuICB7XG4gICAgcHJldmlvdXNEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50OyAvLyBTZXQgdGhlIGRpc3BhdGNoZXIgaW4gREVWIGJlY2F1c2UgdGhpcyBtaWdodCBiZSBjYWxsIGluIHRoZSByZW5kZXIgZnVuY3Rpb25cbiAgICAvLyBmb3Igd2FybmluZ3MuXG5cbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBudWxsO1xuICAgIGRpc2FibGVMb2dzKCk7XG4gIH1cblxuICB0cnkge1xuICAgIC8vIFRoaXMgc2hvdWxkIHRocm93LlxuICAgIGlmIChjb25zdHJ1Y3QpIHtcbiAgICAgIC8vIFNvbWV0aGluZyBzaG91bGQgYmUgc2V0dGluZyB0aGUgcHJvcHMgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgdmFyIEZha2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICB9OyAvLyAkRmxvd0ZpeE1lXG5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZha2UucHJvdG90eXBlLCAncHJvcHMnLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIFdlIHVzZSBhIHRocm93aW5nIHNldHRlciBpbnN0ZWFkIG9mIGZyb3plbiBvciBub24td3JpdGFibGUgcHJvcHNcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoYXQgd29uJ3QgdGhyb3cgaW4gYSBub24tc3RyaWN0IG1vZGUgZnVuY3Rpb24uXG4gICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgICAgICAgLy8gV2UgY29uc3RydWN0IGEgZGlmZmVyZW50IGNvbnRyb2wgZm9yIHRoaXMgY2FzZSB0byBpbmNsdWRlIGFueSBleHRyYVxuICAgICAgICAvLyBmcmFtZXMgYWRkZWQgYnkgdGhlIGNvbnN0cnVjdCBjYWxsLlxuICAgICAgICB0cnkge1xuICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgIGNvbnRyb2wgPSB4O1xuICAgICAgICB9XG5cbiAgICAgICAgUmVmbGVjdC5jb25zdHJ1Y3QoZm4sIFtdLCBGYWtlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgRmFrZS5jYWxsKCk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICBjb250cm9sID0geDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZuLmNhbGwoRmFrZS5wcm90b3R5cGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICBjb250cm9sID0geDtcbiAgICAgIH1cblxuICAgICAgZm4oKTtcbiAgICB9XG4gIH0gY2F0Y2ggKHNhbXBsZSkge1xuICAgIC8vIFRoaXMgaXMgaW5saW5lZCBtYW51YWxseSBiZWNhdXNlIGNsb3N1cmUgZG9lc24ndCBkbyBpdCBmb3IgdXMuXG4gICAgaWYgKHNhbXBsZSAmJiBjb250cm9sICYmIHR5cGVvZiBzYW1wbGUuc3RhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBUaGlzIGV4dHJhY3RzIHRoZSBmaXJzdCBmcmFtZSBmcm9tIHRoZSBzYW1wbGUgdGhhdCBpc24ndCBhbHNvIGluIHRoZSBjb250cm9sLlxuICAgICAgLy8gU2tpcHBpbmcgb25lIGZyYW1lIHRoYXQgd2UgYXNzdW1lIGlzIHRoZSBmcmFtZSB0aGF0IGNhbGxzIHRoZSB0d28uXG4gICAgICB2YXIgc2FtcGxlTGluZXMgPSBzYW1wbGUuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIGNvbnRyb2xMaW5lcyA9IGNvbnRyb2wuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdmFyIHMgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgdmFyIGMgPSBjb250cm9sTGluZXMubGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKHMgPj0gMSAmJiBjID49IDAgJiYgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAvLyBXZSBleHBlY3QgYXQgbGVhc3Qgb25lIHN0YWNrIGZyYW1lIHRvIGJlIHNoYXJlZC5cbiAgICAgICAgLy8gVHlwaWNhbGx5IHRoaXMgd2lsbCBiZSB0aGUgcm9vdCBtb3N0IG9uZS4gSG93ZXZlciwgc3RhY2sgZnJhbWVzIG1heSBiZVxuICAgICAgICAvLyBjdXQgb2ZmIGR1ZSB0byBtYXhpbXVtIHN0YWNrIGxpbWl0cy4gSW4gdGhpcyBjYXNlLCBvbmUgbWF5YmUgY3V0IG9mZlxuICAgICAgICAvLyBlYXJsaWVyIHRoYW4gdGhlIG90aGVyLiBXZSBhc3N1bWUgdGhhdCB0aGUgc2FtcGxlIGlzIGxvbmdlciBvciB0aGUgc2FtZVxuICAgICAgICAvLyBhbmQgdGhlcmUgZm9yIGN1dCBvZmYgZWFybGllci4gU28gd2Ugc2hvdWxkIGZpbmQgdGhlIHJvb3QgbW9zdCBmcmFtZSBpblxuICAgICAgICAvLyB0aGUgc2FtcGxlIHNvbWV3aGVyZSBpbiB0aGUgY29udHJvbC5cbiAgICAgICAgYy0tO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgcyA+PSAxICYmIGMgPj0gMDsgcy0tLCBjLS0pIHtcbiAgICAgICAgLy8gTmV4dCB3ZSBmaW5kIHRoZSBmaXJzdCBvbmUgdGhhdCBpc24ndCB0aGUgc2FtZSB3aGljaCBzaG91bGQgYmUgdGhlXG4gICAgICAgIC8vIGZyYW1lIHRoYXQgY2FsbGVkIG91ciBzYW1wbGUgZnVuY3Rpb24gYW5kIHRoZSBjb250cm9sLlxuICAgICAgICBpZiAoc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAgIC8vIEluIFY4LCB0aGUgZmlyc3QgbGluZSBpcyBkZXNjcmliaW5nIHRoZSBtZXNzYWdlIGJ1dCBvdGhlciBWTXMgZG9uJ3QuXG4gICAgICAgICAgLy8gSWYgd2UncmUgYWJvdXQgdG8gcmV0dXJuIHRoZSBmaXJzdCBsaW5lLCBhbmQgdGhlIGNvbnRyb2wgaXMgYWxzbyBvbiB0aGUgc2FtZVxuICAgICAgICAgIC8vIGxpbmUsIHRoYXQncyBhIHByZXR0eSBnb29kIGluZGljYXRvciB0aGF0IG91ciBzYW1wbGUgdGhyZXcgYXQgc2FtZSBsaW5lIGFzXG4gICAgICAgICAgLy8gdGhlIGNvbnRyb2wuIEkuZS4gYmVmb3JlIHdlIGVudGVyZWQgdGhlIHNhbXBsZSBmcmFtZS4gU28gd2UgaWdub3JlIHRoaXMgcmVzdWx0LlxuICAgICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgcGFzc2VkIGEgY2xhc3MgdG8gZnVuY3Rpb24gY29tcG9uZW50LCBvciBub24tZnVuY3Rpb24uXG4gICAgICAgICAgaWYgKHMgIT09IDEgfHwgYyAhPT0gMSkge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICBzLS07XG4gICAgICAgICAgICAgIGMtLTsgLy8gV2UgbWF5IHN0aWxsIGhhdmUgc2ltaWxhciBpbnRlcm1lZGlhdGUgZnJhbWVzIGZyb20gdGhlIGNvbnN0cnVjdCBjYWxsLlxuICAgICAgICAgICAgICAvLyBUaGUgbmV4dCBvbmUgdGhhdCBpc24ndCB0aGUgc2FtZSBzaG91bGQgYmUgb3VyIG1hdGNoIHRob3VnaC5cblxuICAgICAgICAgICAgICBpZiAoYyA8IDAgfHwgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkge1xuICAgICAgICAgICAgICAgIC8vIFY4IGFkZHMgYSBcIm5ld1wiIHByZWZpeCBmb3IgbmF0aXZlIGNsYXNzZXMuIExldCdzIHJlbW92ZSBpdCB0byBtYWtlIGl0IHByZXR0aWVyLlxuICAgICAgICAgICAgICAgIHZhciBfZnJhbWUgPSAnXFxuJyArIHNhbXBsZUxpbmVzW3NdLnJlcGxhY2UoJyBhdCBuZXcgJywgJyBhdCAnKTtcblxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50RnJhbWVDYWNoZS5zZXQoZm4sIF9mcmFtZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSAvLyBSZXR1cm4gdGhlIGxpbmUgd2UgZm91bmQuXG5cblxuICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHMgPj0gMSAmJiBjID49IDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHJlZW50cnkgPSBmYWxzZTtcblxuICAgIHtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudCA9IHByZXZpb3VzRGlzcGF0Y2hlcjtcbiAgICAgIHJlZW5hYmxlTG9ncygpO1xuICAgIH1cblxuICAgIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZTtcbiAgfSAvLyBGYWxsYmFjayB0byBqdXN0IHVzaW5nIHRoZSBuYW1lIGlmIHdlIGNvdWxkbid0IG1ha2UgaXQgdGhyb3cuXG5cblxuICB2YXIgbmFtZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6ICcnO1xuICB2YXIgc3ludGhldGljRnJhbWUgPSBuYW1lID8gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSkgOiAnJztcblxuICB7XG4gICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29tcG9uZW50RnJhbWVDYWNoZS5zZXQoZm4sIHN5bnRoZXRpY0ZyYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3ludGhldGljRnJhbWU7XG59XG5mdW5jdGlvbiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUoZm4sIHNvdXJjZSwgb3duZXJGbikge1xuICB7XG4gICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISEocHJvdG90eXBlICYmIHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKHR5cGUsIHNvdXJjZSwgb3duZXJGbikge1xuXG4gIGlmICh0eXBlID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSh0eXBlLCBzaG91bGRDb25zdHJ1Y3QodHlwZSkpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUodHlwZSk7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlJyk7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnU3VzcGVuc2VMaXN0Jyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUodHlwZS5yZW5kZXIpO1xuXG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgLy8gTWVtbyBtYXkgY29udGFpbiBhbnkgY29tcG9uZW50IHR5cGUgc28gd2UgcmVjdXJzaXZlbHkgcmVzb2x2ZSBpdC5cbiAgICAgICAgcmV0dXJuIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVih0eXBlLnR5cGUsIHNvdXJjZSwgb3duZXJGbik7XG5cbiAgICAgIGNhc2UgUkVBQ1RfQkxPQ0tfVFlQRTpcbiAgICAgICAgcmV0dXJuIGRlc2NyaWJlRnVuY3Rpb25Db21wb25lbnRGcmFtZSh0eXBlLl9yZW5kZXIpO1xuXG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIExhenkgbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGluaXQocGF5bG9hZCksIHNvdXJjZSwgb3duZXJGbik7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuXG5mdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KSB7XG4gIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICB2YXIgc3RhY2sgPSBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYoZWxlbWVudC50eXBlLCBlbGVtZW50Ll9zb3VyY2UsIG93bmVyID8gb3duZXIudHlwZSA6IG51bGwpO1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5zZXRFeHRyYVN0YWNrRnJhbWUoc3RhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLnNldEV4dHJhU3RhY2tGcmFtZShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50KSB7XG4gIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgb2theSBidXQgRmxvdyBkb2Vzbid0IGtub3cgaXQuXG4gICAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuICAgIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICAgIGlmIChoYXModHlwZVNwZWNzLCB0eXBlU3BlY05hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvciQxID0gdm9pZCAwOyAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy5cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiAnICsgbG9jYXRpb24gKyAnIHR5cGUgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyAnICsgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICsgJ2AuJyArICdUaGlzIG9mdGVuIGhhcHBlbnMgYmVjYXVzZSBvZiB0eXBvcyBzdWNoIGFzIGBQcm9wVHlwZXMuZnVuY3Rpb25gIGluc3RlYWQgb2YgYFByb3BUeXBlcy5mdW5jYC4nKTtcbiAgICAgICAgICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVycm9yJDEgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCcpO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGVycm9yJDEgPSBleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvciQxICYmICEoZXJyb3IkMSBpbnN0YW5jZW9mIEVycm9yKSkge1xuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgICAgZXJyb3IoJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMnICsgJyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgJyArICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gJyArICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICsgJ2NyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgJyArICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBsb2NhdGlvbiwgdHlwZVNwZWNOYW1lLCB0eXBlb2YgZXJyb3IkMSk7XG5cbiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvciQxLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yJDEubWVzc2FnZV0gPSB0cnVlO1xuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgICAgZXJyb3IoJ0ZhaWxlZCAlcyB0eXBlOiAlcycsIGxvY2F0aW9uLCBlcnJvciQxLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGRpZFdhcm5BYm91dEludmFsaWRhdGVDb250ZXh0VHlwZTtcblxue1xuICBkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGUgPSBuZXcgU2V0KCk7XG59XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG57XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5mdW5jdGlvbiBtYXNrQ29udGV4dCh0eXBlLCBjb250ZXh0KSB7XG4gIHZhciBjb250ZXh0VHlwZXMgPSB0eXBlLmNvbnRleHRUeXBlcztcblxuICBpZiAoIWNvbnRleHRUeXBlcykge1xuICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgfVxuXG4gIHZhciBtYXNrZWRDb250ZXh0ID0ge307XG5cbiAgZm9yICh2YXIgY29udGV4dE5hbWUgaW4gY29udGV4dFR5cGVzKSB7XG4gICAgbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV0gPSBjb250ZXh0W2NvbnRleHROYW1lXTtcbiAgfVxuXG4gIHJldHVybiBtYXNrZWRDb250ZXh0O1xufVxuXG5mdW5jdGlvbiBjaGVja0NvbnRleHRUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24pIHtcbiAge1xuICAgIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgJ0NvbXBvbmVudCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ29udGV4dEJvdW5kcyhjb250ZXh0LCB0aHJlYWRJRCkge1xuICAvLyBJZiB3ZSBkb24ndCBoYXZlIGVub3VnaCBzbG90cyBpbiB0aGlzIGNvbnRleHQgdG8gc3RvcmUgdGhpcyB0aHJlYWRJRCxcbiAgLy8gZmlsbCBpdCBpbiB3aXRob3V0IGxlYXZpbmcgYW55IGhvbGVzIHRvIGVuc3VyZSB0aGF0IHRoZSBWTSBvcHRpbWl6ZXNcbiAgLy8gdGhpcyBhcyBub24taG9sZXkgaW5kZXggcHJvcGVydGllcy5cbiAgLy8gKE5vdGU6IElmIGByZWFjdGAgcGFja2FnZSBpcyA8IDE2LjYsIF90aHJlYWRDb3VudCBpcyB1bmRlZmluZWQuKVxuICBmb3IgKHZhciBpID0gY29udGV4dC5fdGhyZWFkQ291bnQgfCAwOyBpIDw9IHRocmVhZElEOyBpKyspIHtcbiAgICAvLyBXZSBhc3N1bWUgdGhhdCB0aGlzIGlzIHRoZSBzYW1lIGFzIHRoZSBkZWZhdWx0VmFsdWUgd2hpY2ggbWlnaHQgbm90IGJlXG4gICAgLy8gdHJ1ZSBpZiB3ZSdyZSByZW5kZXJpbmcgaW5zaWRlIGEgc2Vjb25kYXJ5IHJlbmRlcmVyIGJ1dCB0aGV5IGFyZVxuICAgIC8vIHNlY29uZGFyeSBiZWNhdXNlIHRoZXNlIHVzZSBjYXNlcyBhcmUgdmVyeSByYXJlLlxuICAgIGNvbnRleHRbaV0gPSBjb250ZXh0Ll9jdXJyZW50VmFsdWUyO1xuICAgIGNvbnRleHQuX3RocmVhZENvdW50ID0gaSArIDE7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NDb250ZXh0KHR5cGUsIGNvbnRleHQsIHRocmVhZElELCBpc0NsYXNzKSB7XG4gIGlmIChpc0NsYXNzKSB7XG4gICAgdmFyIGNvbnRleHRUeXBlID0gdHlwZS5jb250ZXh0VHlwZTtcblxuICAgIHtcbiAgICAgIGlmICgnY29udGV4dFR5cGUnIGluIHR5cGUpIHtcbiAgICAgICAgdmFyIGlzVmFsaWQgPSAvLyBBbGxvdyBudWxsIGZvciBjb25kaXRpb25hbCBkZWNsYXJhdGlvblxuICAgICAgICBjb250ZXh0VHlwZSA9PT0gbnVsbCB8fCBjb250ZXh0VHlwZSAhPT0gdW5kZWZpbmVkICYmIGNvbnRleHRUeXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgJiYgY29udGV4dFR5cGUuX2NvbnRleHQgPT09IHVuZGVmaW5lZDsgLy8gTm90IGEgPENvbnRleHQuQ29uc3VtZXI+XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkICYmICFkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGUuaGFzKHR5cGUpKSB7XG4gICAgICAgICAgZGlkV2FybkFib3V0SW52YWxpZGF0ZUNvbnRleHRUeXBlLmFkZCh0eXBlKTtcbiAgICAgICAgICB2YXIgYWRkZW5kdW0gPSAnJztcblxuICAgICAgICAgIGlmIChjb250ZXh0VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBhZGRlbmR1bSA9ICcgSG93ZXZlciwgaXQgaXMgc2V0IHRvIHVuZGVmaW5lZC4gJyArICdUaGlzIGNhbiBiZSBjYXVzZWQgYnkgYSB0eXBvIG9yIGJ5IG1peGluZyB1cCBuYW1lZCBhbmQgZGVmYXVsdCBpbXBvcnRzLiAnICsgJ1RoaXMgY2FuIGFsc28gaGFwcGVuIGR1ZSB0byBhIGNpcmN1bGFyIGRlcGVuZGVuY3ksIHNvICcgKyAndHJ5IG1vdmluZyB0aGUgY3JlYXRlQ29udGV4dCgpIGNhbGwgdG8gYSBzZXBhcmF0ZSBmaWxlLic7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29udGV4dFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBhZGRlbmR1bSA9ICcgSG93ZXZlciwgaXQgaXMgc2V0IHRvIGEgJyArIHR5cGVvZiBjb250ZXh0VHlwZSArICcuJztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHRUeXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFKSB7XG4gICAgICAgICAgICBhZGRlbmR1bSA9ICcgRGlkIHlvdSBhY2NpZGVudGFsbHkgcGFzcyB0aGUgQ29udGV4dC5Qcm92aWRlciBpbnN0ZWFkPyc7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0VHlwZS5fY29udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyA8Q29udGV4dC5Db25zdW1lcj5cbiAgICAgICAgICAgIGFkZGVuZHVtID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBwYXNzIHRoZSBDb250ZXh0LkNvbnN1bWVyIGluc3RlYWQ/JztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWRkZW5kdW0gPSAnIEhvd2V2ZXIsIGl0IGlzIHNldCB0byBhbiBvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY29udGV4dFR5cGUpLmpvaW4oJywgJykgKyAnfS4nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVycm9yKCclcyBkZWZpbmVzIGFuIGludmFsaWQgY29udGV4dFR5cGUuICcgKyAnY29udGV4dFR5cGUgc2hvdWxkIHBvaW50IHRvIHRoZSBDb250ZXh0IG9iamVjdCByZXR1cm5lZCBieSBSZWFjdC5jcmVhdGVDb250ZXh0KCkuJXMnLCBnZXRDb21wb25lbnROYW1lKHR5cGUpIHx8ICdDb21wb25lbnQnLCBhZGRlbmR1bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbnRleHRUeXBlID09PSAnb2JqZWN0JyAmJiBjb250ZXh0VHlwZSAhPT0gbnVsbCkge1xuICAgICAgdmFsaWRhdGVDb250ZXh0Qm91bmRzKGNvbnRleHRUeXBlLCB0aHJlYWRJRCk7XG4gICAgICByZXR1cm4gY29udGV4dFR5cGVbdGhyZWFkSURdO1xuICAgIH1cblxuICAgIHtcbiAgICAgIHZhciBtYXNrZWRDb250ZXh0ID0gbWFza0NvbnRleHQodHlwZSwgY29udGV4dCk7XG5cbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGUuY29udGV4dFR5cGVzKSB7XG4gICAgICAgICAgY2hlY2tDb250ZXh0VHlwZXModHlwZS5jb250ZXh0VHlwZXMsIG1hc2tlZENvbnRleHQsICdjb250ZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHtcbiAgICAgIHZhciBfbWFza2VkQ29udGV4dCA9IG1hc2tDb250ZXh0KHR5cGUsIGNvbnRleHQpO1xuXG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlLmNvbnRleHRUeXBlcykge1xuICAgICAgICAgIGNoZWNrQ29udGV4dFR5cGVzKHR5cGUuY29udGV4dFR5cGVzLCBfbWFza2VkQ29udGV4dCwgJ2NvbnRleHQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX21hc2tlZENvbnRleHQ7XG4gICAgfVxuICB9XG59XG5cbnZhciBuZXh0QXZhaWxhYmxlVGhyZWFkSURzID0gbmV3IFVpbnQxNkFycmF5KDE2KTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAxNTsgaSsrKSB7XG4gIG5leHRBdmFpbGFibGVUaHJlYWRJRHNbaV0gPSBpICsgMTtcbn1cblxubmV4dEF2YWlsYWJsZVRocmVhZElEc1sxNV0gPSAwO1xuXG5mdW5jdGlvbiBncm93VGhyZWFkQ291bnRBbmRSZXR1cm5OZXh0QXZhaWxhYmxlKCkge1xuICB2YXIgb2xkQXJyYXkgPSBuZXh0QXZhaWxhYmxlVGhyZWFkSURzO1xuICB2YXIgb2xkU2l6ZSA9IG9sZEFycmF5Lmxlbmd0aDtcbiAgdmFyIG5ld1NpemUgPSBvbGRTaXplICogMjtcblxuICBpZiAoIShuZXdTaXplIDw9IDB4MTAwMDApKSB7XG4gICAge1xuICAgICAgdGhyb3cgRXJyb3IoIFwiTWF4aW11bSBudW1iZXIgb2YgY29uY3VycmVudCBSZWFjdCByZW5kZXJlcnMgZXhjZWVkZWQuIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgYXJlIG5vdCBwcm9wZXJseSBkZXN0cm95aW5nIHRoZSBSZWFkYWJsZSBwcm92aWRlZCBieSBSZWFjdC4gRW5zdXJlIHRoYXQgeW91IGNhbGwgLmRlc3Ryb3koKSBvbiBpdCBpZiB5b3Ugbm8gbG9uZ2VyIHdhbnQgdG8gcmVhZCBmcm9tIGl0LCBhbmQgZGlkIG5vdCByZWFkIHRvIHRoZSBlbmQuIElmIHlvdSB1c2UgLnBpcGUoKSB0aGlzIHNob3VsZCBiZSBhdXRvbWF0aWMuXCIgKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbmV3QXJyYXkgPSBuZXcgVWludDE2QXJyYXkobmV3U2l6ZSk7XG4gIG5ld0FycmF5LnNldChvbGRBcnJheSk7XG4gIG5leHRBdmFpbGFibGVUaHJlYWRJRHMgPSBuZXdBcnJheTtcbiAgbmV4dEF2YWlsYWJsZVRocmVhZElEc1swXSA9IG9sZFNpemUgKyAxO1xuXG4gIGZvciAodmFyIF9pID0gb2xkU2l6ZTsgX2kgPCBuZXdTaXplIC0gMTsgX2krKykge1xuICAgIG5leHRBdmFpbGFibGVUaHJlYWRJRHNbX2ldID0gX2kgKyAxO1xuICB9XG5cbiAgbmV4dEF2YWlsYWJsZVRocmVhZElEc1tuZXdTaXplIC0gMV0gPSAwO1xuICByZXR1cm4gb2xkU2l6ZTtcbn1cblxuZnVuY3Rpb24gYWxsb2NUaHJlYWRJRCgpIHtcbiAgdmFyIG5leHRJRCA9IG5leHRBdmFpbGFibGVUaHJlYWRJRHNbMF07XG5cbiAgaWYgKG5leHRJRCA9PT0gMCkge1xuICAgIHJldHVybiBncm93VGhyZWFkQ291bnRBbmRSZXR1cm5OZXh0QXZhaWxhYmxlKCk7XG4gIH1cblxuICBuZXh0QXZhaWxhYmxlVGhyZWFkSURzWzBdID0gbmV4dEF2YWlsYWJsZVRocmVhZElEc1tuZXh0SURdO1xuICByZXR1cm4gbmV4dElEO1xufVxuZnVuY3Rpb24gZnJlZVRocmVhZElEKGlkKSB7XG4gIG5leHRBdmFpbGFibGVUaHJlYWRJRHNbaWRdID0gbmV4dEF2YWlsYWJsZVRocmVhZElEc1swXTtcbiAgbmV4dEF2YWlsYWJsZVRocmVhZElEc1swXSA9IGlkO1xufVxuXG4vLyBBIHJlc2VydmVkIGF0dHJpYnV0ZS5cbi8vIEl0IGlzIGhhbmRsZWQgYnkgUmVhY3Qgc2VwYXJhdGVseSBhbmQgc2hvdWxkbid0IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cbnZhciBSRVNFUlZFRCA9IDA7IC8vIEEgc2ltcGxlIHN0cmluZyBhdHRyaWJ1dGUuXG4vLyBBdHRyaWJ1dGVzIHRoYXQgYXJlbid0IGluIHRoZSBmaWx0ZXIgYXJlIHByZXN1bWVkIHRvIGhhdmUgdGhpcyB0eXBlLlxuXG52YXIgU1RSSU5HID0gMTsgLy8gQSBzdHJpbmcgYXR0cmlidXRlIHRoYXQgYWNjZXB0cyBib29sZWFucyBpbiBSZWFjdC4gSW4gSFRNTCwgdGhlc2UgYXJlIGNhbGxlZFxuLy8gXCJlbnVtZXJhdGVkXCIgYXR0cmlidXRlcyB3aXRoIFwidHJ1ZVwiIGFuZCBcImZhbHNlXCIgYXMgcG9zc2libGUgdmFsdWVzLlxuLy8gV2hlbiB0cnVlLCBpdCBzaG91bGQgYmUgc2V0IHRvIGEgXCJ0cnVlXCIgc3RyaW5nLlxuLy8gV2hlbiBmYWxzZSwgaXQgc2hvdWxkIGJlIHNldCB0byBhIFwiZmFsc2VcIiBzdHJpbmcuXG5cbnZhciBCT09MRUFOSVNIX1NUUklORyA9IDI7IC8vIEEgcmVhbCBib29sZWFuIGF0dHJpYnV0ZS5cbi8vIFdoZW4gdHJ1ZSwgaXQgc2hvdWxkIGJlIHByZXNlbnQgKHNldCBlaXRoZXIgdG8gYW4gZW1wdHkgc3RyaW5nIG9yIGl0cyBuYW1lKS5cbi8vIFdoZW4gZmFsc2UsIGl0IHNob3VsZCBiZSBvbWl0dGVkLlxuXG52YXIgQk9PTEVBTiA9IDM7IC8vIEFuIGF0dHJpYnV0ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgZmxhZyBhcyB3ZWxsIGFzIHdpdGggYSB2YWx1ZS5cbi8vIFdoZW4gdHJ1ZSwgaXQgc2hvdWxkIGJlIHByZXNlbnQgKHNldCBlaXRoZXIgdG8gYW4gZW1wdHkgc3RyaW5nIG9yIGl0cyBuYW1lKS5cbi8vIFdoZW4gZmFsc2UsIGl0IHNob3VsZCBiZSBvbWl0dGVkLlxuLy8gRm9yIGFueSBvdGhlciB2YWx1ZSwgc2hvdWxkIGJlIHByZXNlbnQgd2l0aCB0aGF0IHZhbHVlLlxuXG52YXIgT1ZFUkxPQURFRF9CT09MRUFOID0gNDsgLy8gQW4gYXR0cmlidXRlIHRoYXQgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgbnVtZXJpYy5cbi8vIFdoZW4gZmFsc3ksIGl0IHNob3VsZCBiZSByZW1vdmVkLlxuXG52YXIgTlVNRVJJQyA9IDU7IC8vIEFuIGF0dHJpYnV0ZSB0aGF0IG11c3QgYmUgcG9zaXRpdmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhIHBvc2l0aXZlIG51bWVyaWMuXG4vLyBXaGVuIGZhbHN5LCBpdCBzaG91bGQgYmUgcmVtb3ZlZC5cblxudmFyIFBPU0lUSVZFX05VTUVSSUMgPSA2O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG52YXIgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiA9IFwiOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRFwiO1xuLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cbnZhciBBVFRSSUJVVEVfTkFNRV9DSEFSID0gQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiArIFwiXFxcXC0uMC05XFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDBcIjtcbnZhciBST09UX0FUVFJJQlVURV9OQU1FID0gJ2RhdGEtcmVhY3Ryb290JztcbnZhciBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IG5ldyBSZWdFeHAoJ15bJyArIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgKyAnXVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xudmFyIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gaXNBdHRyaWJ1dGVOYW1lU2FmZShhdHRyaWJ1dGVOYW1lKSB7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSwgYXR0cmlidXRlTmFtZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUsIGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYLnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcbiAgICB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9IHRydWU7XG5cbiAge1xuICAgIGVycm9yKCdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lOiBgJXNgJywgYXR0cmlidXRlTmFtZSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBzaG91bGRJZ25vcmVBdHRyaWJ1dGUobmFtZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SW5mby50eXBlID09PSBSRVNFUlZFRDtcbiAgfVxuXG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChuYW1lLmxlbmd0aCA+IDIgJiYgKG5hbWVbMF0gPT09ICdvJyB8fCBuYW1lWzBdID09PSAnTycpICYmIChuYW1lWzFdID09PSAnbicgfHwgbmFtZVsxXSA9PT0gJ04nKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gc2hvdWxkUmVtb3ZlQXR0cmlidXRlV2l0aFdhcm5pbmcobmFtZSwgdmFsdWUsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgaWYgKHByb3BlcnR5SW5mbyAhPT0gbnVsbCAmJiBwcm9wZXJ0eUluZm8udHlwZSA9PT0gUkVTRVJWRUQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzogLy8gJEZsb3dJc3N1ZSBzeW1ib2wgaXMgcGVyZmVjdGx5IHZhbGlkIGhlcmVcblxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICBpZiAoaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICFwcm9wZXJ0eUluZm8uYWNjZXB0c0Jvb2xlYW5zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmVmaXggPSBuYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgNSk7XG4gICAgICAgICAgcmV0dXJuIHByZWZpeCAhPT0gJ2RhdGEtJyAmJiBwcmVmaXggIT09ICdhcmlhLSc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIHNob3VsZFJlbW92ZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZVdpdGhXYXJuaW5nKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHByb3BlcnR5SW5mbyAhPT0gbnVsbCkge1xuXG4gICAgc3dpdGNoIChwcm9wZXJ0eUluZm8udHlwZSkge1xuICAgICAgY2FzZSBCT09MRUFOOlxuICAgICAgICByZXR1cm4gIXZhbHVlO1xuXG4gICAgICBjYXNlIE9WRVJMT0FERURfQk9PTEVBTjpcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBmYWxzZTtcblxuICAgICAgY2FzZSBOVU1FUklDOlxuICAgICAgICByZXR1cm4gaXNOYU4odmFsdWUpO1xuXG4gICAgICBjYXNlIFBPU0lUSVZFX05VTUVSSUM6XG4gICAgICAgIHJldHVybiBpc05hTih2YWx1ZSkgfHwgdmFsdWUgPCAxO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFByb3BlcnR5SW5mbyhuYW1lKSB7XG4gIHJldHVybiBwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gcHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCB0eXBlLCBtdXN0VXNlUHJvcGVydHksIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZU5hbWVzcGFjZSwgc2FuaXRpemVVUkwsIHJlbW92ZUVtcHR5U3RyaW5nKSB7XG4gIHRoaXMuYWNjZXB0c0Jvb2xlYW5zID0gdHlwZSA9PT0gQk9PTEVBTklTSF9TVFJJTkcgfHwgdHlwZSA9PT0gQk9PTEVBTiB8fCB0eXBlID09PSBPVkVSTE9BREVEX0JPT0xFQU47XG4gIHRoaXMuYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gIHRoaXMuYXR0cmlidXRlTmFtZXNwYWNlID0gYXR0cmlidXRlTmFtZXNwYWNlO1xuICB0aGlzLm11c3RVc2VQcm9wZXJ0eSA9IG11c3RVc2VQcm9wZXJ0eTtcbiAgdGhpcy5wcm9wZXJ0eU5hbWUgPSBuYW1lO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnNhbml0aXplVVJMID0gc2FuaXRpemVVUkw7XG4gIHRoaXMucmVtb3ZlRW1wdHlTdHJpbmcgPSByZW1vdmVFbXB0eVN0cmluZztcbn0gLy8gV2hlbiBhZGRpbmcgYXR0cmlidXRlcyB0byB0aGlzIGxpc3QsIGJlIHN1cmUgdG8gYWxzbyBhZGQgdGhlbSB0b1xuLy8gdGhlIGBwb3NzaWJsZVN0YW5kYXJkTmFtZXNgIG1vZHVsZSB0byBlbnN1cmUgY2FzaW5nIGFuZCBpbmNvcnJlY3Rcbi8vIG5hbWUgd2FybmluZ3MuXG5cblxudmFyIHByb3BlcnRpZXMgPSB7fTsgLy8gVGhlc2UgcHJvcHMgYXJlIHJlc2VydmVkIGJ5IFJlYWN0LiBUaGV5IHNob3VsZG4ndCBiZSB3cml0dGVuIHRvIHRoZSBET00uXG5cbnZhciByZXNlcnZlZFByb3BzID0gWydjaGlsZHJlbicsICdkYW5nZXJvdXNseVNldElubmVySFRNTCcsIC8vIFRPRE86IFRoaXMgcHJldmVudHMgdGhlIGFzc2lnbm1lbnQgb2YgZGVmYXVsdFZhbHVlIHRvIHJlZ3VsYXJcbi8vIGVsZW1lbnRzIChub3QganVzdCBpbnB1dHMpLiBOb3cgdGhhdCBSZWFjdERPTUlucHV0IGFzc2lnbnMgdG8gdGhlXG4vLyBkZWZhdWx0VmFsdWUgcHJvcGVydHkgLS0gZG8gd2UgbmVlZCB0aGlzP1xuJ2RlZmF1bHRWYWx1ZScsICdkZWZhdWx0Q2hlY2tlZCcsICdpbm5lckhUTUwnLCAnc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nJywgJ3N1cHByZXNzSHlkcmF0aW9uV2FybmluZycsICdzdHlsZSddO1xucmVzZXJ2ZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFJFU0VSVkVELCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gQSBmZXcgUmVhY3Qgc3RyaW5nIGF0dHJpYnV0ZXMgaGF2ZSBhIGRpZmZlcmVudCBuYW1lLlxuLy8gVGhpcyBpcyBhIG1hcHBpbmcgZnJvbSBSZWFjdCBwcm9wIG5hbWVzIHRvIHRoZSBhdHRyaWJ1dGUgbmFtZXMuXG5cbltbJ2FjY2VwdENoYXJzZXQnLCAnYWNjZXB0LWNoYXJzZXQnXSwgWydjbGFzc05hbWUnLCAnY2xhc3MnXSwgWydodG1sRm9yJywgJ2ZvciddLCBbJ2h0dHBFcXVpdicsICdodHRwLWVxdWl2J11dLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIG5hbWUgPSBfcmVmWzBdLFxuICAgICAgYXR0cmlidXRlTmFtZSA9IF9yZWZbMV07XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFRoZXNlIGFyZSBcImVudW1lcmF0ZWRcIiBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBhY2NlcHQgXCJ0cnVlXCIgYW5kIFwiZmFsc2VcIi5cbi8vIEluIFJlYWN0LCB3ZSBsZXQgdXNlcnMgcGFzcyBgdHJ1ZWAgYW5kIGBmYWxzZWAgZXZlbiB0aG91Z2ggdGVjaG5pY2FsbHlcbi8vIHRoZXNlIGFyZW4ndCBib29sZWFuIGF0dHJpYnV0ZXMgKHRoZXkgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncykuXG5cblsnY29udGVudEVkaXRhYmxlJywgJ2RyYWdnYWJsZScsICdzcGVsbENoZWNrJywgJ3ZhbHVlJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBCT09MRUFOSVNIX1NUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLnRvTG93ZXJDYXNlKCksIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gVGhlc2UgYXJlIFwiZW51bWVyYXRlZFwiIFNWRyBhdHRyaWJ1dGVzIHRoYXQgYWNjZXB0IFwidHJ1ZVwiIGFuZCBcImZhbHNlXCIuXG4vLyBJbiBSZWFjdCwgd2UgbGV0IHVzZXJzIHBhc3MgYHRydWVgIGFuZCBgZmFsc2VgIGV2ZW4gdGhvdWdoIHRlY2huaWNhbGx5XG4vLyB0aGVzZSBhcmVuJ3QgYm9vbGVhbiBhdHRyaWJ1dGVzICh0aGV5IGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MpLlxuLy8gU2luY2UgdGhlc2UgYXJlIFNWRyBhdHRyaWJ1dGVzLCB0aGVpciBhdHRyaWJ1dGUgbmFtZXMgYXJlIGNhc2Utc2Vuc2l0aXZlLlxuXG5bJ2F1dG9SZXZlcnNlJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZm9jdXNhYmxlJywgJ3ByZXNlcnZlQWxwaGEnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIEJPT0xFQU5JU0hfU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gVGhlc2UgYXJlIEhUTUwgYm9vbGVhbiBhdHRyaWJ1dGVzLlxuXG5bJ2FsbG93RnVsbFNjcmVlbicsICdhc3luYycsIC8vIE5vdGU6IHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlIHRoYXQgcHJldmVudHMgaXQgZnJvbSBiZWluZyB3cml0dGVuIHRvIHRoZSBET01cbi8vIG9uIHRoZSBjbGllbnQgc2lkZSBiZWNhdXNlIHRoZSBicm93c2VycyBhcmUgaW5jb25zaXN0ZW50LiBJbnN0ZWFkIHdlIGNhbGwgZm9jdXMoKS5cbidhdXRvRm9jdXMnLCAnYXV0b1BsYXknLCAnY29udHJvbHMnLCAnZGVmYXVsdCcsICdkZWZlcicsICdkaXNhYmxlZCcsICdkaXNhYmxlUGljdHVyZUluUGljdHVyZScsICdkaXNhYmxlUmVtb3RlUGxheWJhY2snLCAnZm9ybU5vVmFsaWRhdGUnLCAnaGlkZGVuJywgJ2xvb3AnLCAnbm9Nb2R1bGUnLCAnbm9WYWxpZGF0ZScsICdvcGVuJywgJ3BsYXlzSW5saW5lJywgJ3JlYWRPbmx5JywgJ3JlcXVpcmVkJywgJ3JldmVyc2VkJywgJ3Njb3BlZCcsICdzZWFtbGVzcycsIC8vIE1pY3JvZGF0YVxuJ2l0ZW1TY29wZSddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgQk9PTEVBTiwgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLnRvTG93ZXJDYXNlKCksIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gVGhlc2UgYXJlIHRoZSBmZXcgUmVhY3QgcHJvcHMgdGhhdCB3ZSBzZXQgYXMgRE9NIHByb3BlcnRpZXNcbi8vIHJhdGhlciB0aGFuIGF0dHJpYnV0ZXMuIFRoZXNlIGFyZSBhbGwgYm9vbGVhbnMuXG5cblsnY2hlY2tlZCcsIC8vIE5vdGU6IGBvcHRpb24uc2VsZWN0ZWRgIGlzIG5vdCB1cGRhdGVkIGlmIGBzZWxlY3QubXVsdGlwbGVgIGlzXG4vLyBkaXNhYmxlZCB3aXRoIGByZW1vdmVBdHRyaWJ1dGVgLiBXZSBoYXZlIHNwZWNpYWwgbG9naWMgZm9yIGhhbmRsaW5nIHRoaXMuXG4nbXVsdGlwbGUnLCAnbXV0ZWQnLCAnc2VsZWN0ZWQnIC8vIE5PVEU6IGlmIHlvdSBhZGQgYSBjYW1lbENhc2VkIHByb3AgdG8gdGhpcyBsaXN0LFxuLy8geW91J2xsIG5lZWQgdG8gc2V0IGF0dHJpYnV0ZU5hbWUgdG8gbmFtZS50b0xvd2VyQ2FzZSgpXG4vLyBpbnN0ZWFkIGluIHRoZSBhc3NpZ25tZW50IGJlbG93LlxuXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIEJPT0xFQU4sIHRydWUsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFRoZXNlIGFyZSBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBhcmUgXCJvdmVybG9hZGVkIGJvb2xlYW5zXCI6IHRoZXkgYmVoYXZlIGxpa2Vcbi8vIGJvb2xlYW5zLCBidXQgY2FuIGFsc28gYWNjZXB0IGEgc3RyaW5nIHZhbHVlLlxuXG5bJ2NhcHR1cmUnLCAnZG93bmxvYWQnIC8vIE5PVEU6IGlmIHlvdSBhZGQgYSBjYW1lbENhc2VkIHByb3AgdG8gdGhpcyBsaXN0LFxuLy8geW91J2xsIG5lZWQgdG8gc2V0IGF0dHJpYnV0ZU5hbWUgdG8gbmFtZS50b0xvd2VyQ2FzZSgpXG4vLyBpbnN0ZWFkIGluIHRoZSBhc3NpZ25tZW50IGJlbG93LlxuXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIE9WRVJMT0FERURfQk9PTEVBTiwgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFRoZXNlIGFyZSBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBtdXN0IGJlIHBvc2l0aXZlIG51bWJlcnMuXG5cblsnY29scycsICdyb3dzJywgJ3NpemUnLCAnc3BhbicgLy8gTk9URTogaWYgeW91IGFkZCBhIGNhbWVsQ2FzZWQgcHJvcCB0byB0aGlzIGxpc3QsXG4vLyB5b3UnbGwgbmVlZCB0byBzZXQgYXR0cmlidXRlTmFtZSB0byBuYW1lLnRvTG93ZXJDYXNlKClcbi8vIGluc3RlYWQgaW4gdGhlIGFzc2lnbm1lbnQgYmVsb3cuXG5dLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgUE9TSVRJVkVfTlVNRVJJQywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFRoZXNlIGFyZSBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBtdXN0IGJlIG51bWJlcnMuXG5cblsncm93U3BhbicsICdzdGFydCddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgTlVNRVJJQywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLnRvTG93ZXJDYXNlKCksIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTtcbnZhciBDQU1FTElaRSA9IC9bXFwtXFw6XShbYS16XSkvZztcblxudmFyIGNhcGl0YWxpemUgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgcmV0dXJuIHRva2VuWzFdLnRvVXBwZXJDYXNlKCk7XG59OyAvLyBUaGlzIGlzIGEgbGlzdCBvZiBhbGwgU1ZHIGF0dHJpYnV0ZXMgdGhhdCBuZWVkIHNwZWNpYWwgY2FzaW5nLCBuYW1lc3BhY2luZyxcbi8vIG9yIGJvb2xlYW4gdmFsdWUgYXNzaWdubWVudC4gUmVndWxhciBhdHRyaWJ1dGVzIHRoYXQganVzdCBhY2NlcHQgc3RyaW5nc1xuLy8gYW5kIGhhdmUgdGhlIHNhbWUgbmFtZXMgYXJlIG9taXR0ZWQsIGp1c3QgbGlrZSBpbiB0aGUgSFRNTCBhdHRyaWJ1dGUgZmlsdGVyLlxuLy8gU29tZSBvZiB0aGVzZSBhdHRyaWJ1dGVzIGNhbiBiZSBoYXJkIHRvIGZpbmQuIFRoaXMgbGlzdCB3YXMgY3JlYXRlZCBieVxuLy8gc2NyYXBpbmcgdGhlIE1ETiBkb2N1bWVudGF0aW9uLlxuXG5cblsnYWNjZW50LWhlaWdodCcsICdhbGlnbm1lbnQtYmFzZWxpbmUnLCAnYXJhYmljLWZvcm0nLCAnYmFzZWxpbmUtc2hpZnQnLCAnY2FwLWhlaWdodCcsICdjbGlwLXBhdGgnLCAnY2xpcC1ydWxlJywgJ2NvbG9yLWludGVycG9sYXRpb24nLCAnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ2NvbG9yLXByb2ZpbGUnLCAnY29sb3ItcmVuZGVyaW5nJywgJ2RvbWluYW50LWJhc2VsaW5lJywgJ2VuYWJsZS1iYWNrZ3JvdW5kJywgJ2ZpbGwtb3BhY2l0eScsICdmaWxsLXJ1bGUnLCAnZmxvb2QtY29sb3InLCAnZmxvb2Qtb3BhY2l0eScsICdmb250LWZhbWlseScsICdmb250LXNpemUnLCAnZm9udC1zaXplLWFkanVzdCcsICdmb250LXN0cmV0Y2gnLCAnZm9udC1zdHlsZScsICdmb250LXZhcmlhbnQnLCAnZm9udC13ZWlnaHQnLCAnZ2x5cGgtbmFtZScsICdnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsJywgJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJywgJ2hvcml6LWFkdi14JywgJ2hvcml6LW9yaWdpbi14JywgJ2ltYWdlLXJlbmRlcmluZycsICdsZXR0ZXItc3BhY2luZycsICdsaWdodGluZy1jb2xvcicsICdtYXJrZXItZW5kJywgJ21hcmtlci1taWQnLCAnbWFya2VyLXN0YXJ0JywgJ292ZXJsaW5lLXBvc2l0aW9uJywgJ292ZXJsaW5lLXRoaWNrbmVzcycsICdwYWludC1vcmRlcicsICdwYW5vc2UtMScsICdwb2ludGVyLWV2ZW50cycsICdyZW5kZXJpbmctaW50ZW50JywgJ3NoYXBlLXJlbmRlcmluZycsICdzdG9wLWNvbG9yJywgJ3N0b3Atb3BhY2l0eScsICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJywgJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJywgJ3N0cm9rZS1kYXNoYXJyYXknLCAnc3Ryb2tlLWRhc2hvZmZzZXQnLCAnc3Ryb2tlLWxpbmVjYXAnLCAnc3Ryb2tlLWxpbmVqb2luJywgJ3N0cm9rZS1taXRlcmxpbWl0JywgJ3N0cm9rZS1vcGFjaXR5JywgJ3N0cm9rZS13aWR0aCcsICd0ZXh0LWFuY2hvcicsICd0ZXh0LWRlY29yYXRpb24nLCAndGV4dC1yZW5kZXJpbmcnLCAndW5kZXJsaW5lLXBvc2l0aW9uJywgJ3VuZGVybGluZS10aGlja25lc3MnLCAndW5pY29kZS1iaWRpJywgJ3VuaWNvZGUtcmFuZ2UnLCAndW5pdHMtcGVyLWVtJywgJ3YtYWxwaGFiZXRpYycsICd2LWhhbmdpbmcnLCAndi1pZGVvZ3JhcGhpYycsICd2LW1hdGhlbWF0aWNhbCcsICd2ZWN0b3ItZWZmZWN0JywgJ3ZlcnQtYWR2LXknLCAndmVydC1vcmlnaW4teCcsICd2ZXJ0LW9yaWdpbi15JywgJ3dvcmQtc3BhY2luZycsICd3cml0aW5nLW1vZGUnLCAneG1sbnM6eGxpbmsnLCAneC1oZWlnaHQnIC8vIE5PVEU6IGlmIHlvdSBhZGQgYSBjYW1lbENhc2VkIHByb3AgdG8gdGhpcyBsaXN0LFxuLy8geW91J2xsIG5lZWQgdG8gc2V0IGF0dHJpYnV0ZU5hbWUgdG8gbmFtZS50b0xvd2VyQ2FzZSgpXG4vLyBpbnN0ZWFkIGluIHRoZSBhc3NpZ25tZW50IGJlbG93LlxuXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZS5yZXBsYWNlKENBTUVMSVpFLCBjYXBpdGFsaXplKTtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIGF0dHJpYnV0ZU5hbWUsIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFN0cmluZyBTVkcgYXR0cmlidXRlcyB3aXRoIHRoZSB4bGluayBuYW1lc3BhY2UuXG5cblsneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJyAvLyBOT1RFOiBpZiB5b3UgYWRkIGEgY2FtZWxDYXNlZCBwcm9wIHRvIHRoaXMgbGlzdCxcbi8vIHlvdSdsbCBuZWVkIHRvIHNldCBhdHRyaWJ1dGVOYW1lIHRvIG5hbWUudG9Mb3dlckNhc2UoKVxuLy8gaW5zdGVhZCBpbiB0aGUgYXNzaWdubWVudCBiZWxvdy5cbl0uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICB2YXIgbmFtZSA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZShDQU1FTElaRSwgY2FwaXRhbGl6ZSk7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gU3RyaW5nIFNWRyBhdHRyaWJ1dGVzIHdpdGggdGhlIHhtbCBuYW1lc3BhY2UuXG5cblsneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJyAvLyBOT1RFOiBpZiB5b3UgYWRkIGEgY2FtZWxDYXNlZCBwcm9wIHRvIHRoaXMgbGlzdCxcbi8vIHlvdSdsbCBuZWVkIHRvIHNldCBhdHRyaWJ1dGVOYW1lIHRvIG5hbWUudG9Mb3dlckNhc2UoKVxuLy8gaW5zdGVhZCBpbiB0aGUgYXNzaWdubWVudCBiZWxvdy5cbl0uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICB2YXIgbmFtZSA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZShDQU1FTElaRSwgY2FwaXRhbGl6ZSk7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJywgZmFsc2UsIC8vIHNhbml0aXplVVJMXG4gIGZhbHNlKTtcbn0pOyAvLyBUaGVzZSBhdHRyaWJ1dGUgZXhpc3RzIGJvdGggaW4gSFRNTCBhbmQgU1ZHLlxuLy8gVGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGNhc2Utc2Vuc2l0aXZlIGluIFNWRyBzbyB3ZSBjYW4ndCBqdXN0IHVzZVxuLy8gdGhlIFJlYWN0IG5hbWUgbGlrZSB3ZSBkbyBmb3IgYXR0cmlidXRlcyB0aGF0IGV4aXN0IG9ubHkgaW4gSFRNTC5cblxuWyd0YWJJbmRleCcsICdjcm9zc09yaWdpbiddLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgcHJvcGVydGllc1thdHRyaWJ1dGVOYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQoYXR0cmlidXRlTmFtZSwgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsLCAvLyBhdHRyaWJ1dGVOYW1lc3BhY2VcbiAgZmFsc2UsIC8vIHNhbml0aXplVVJMXG4gIGZhbHNlKTtcbn0pOyAvLyBUaGVzZSBhdHRyaWJ1dGVzIGFjY2VwdCBVUkxzLiBUaGVzZSBtdXN0IG5vdCBhbGxvdyBqYXZhc2NyaXB0OiBVUkxTLlxuLy8gVGhlc2Ugd2lsbCBhbHNvIG5lZWQgdG8gYWNjZXB0IFRydXN0ZWQgVHlwZXMgb2JqZWN0IGluIHRoZSBmdXR1cmUuXG5cbnZhciB4bGlua0hyZWYgPSAneGxpbmtIcmVmJztcbnByb3BlcnRpZXNbeGxpbmtIcmVmXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQoJ3hsaW5rSHJlZicsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuJ3hsaW5rOmhyZWYnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIHRydWUsIC8vIHNhbml0aXplVVJMXG5mYWxzZSk7XG5bJ3NyYycsICdocmVmJywgJ2FjdGlvbicsICdmb3JtQWN0aW9uJ10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICBwcm9wZXJ0aWVzW2F0dHJpYnV0ZU5hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChhdHRyaWJ1dGVOYW1lLCBTVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgYXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICB0cnVlLCAvLyBzYW5pdGl6ZVVSTFxuICB0cnVlKTtcbn0pO1xuXG4vLyBhbmQgYW55IG5ld2xpbmUgb3IgdGFiIGFyZSBmaWx0ZXJlZCBvdXQgYXMgaWYgdGhleSdyZSBub3QgcGFydCBvZiB0aGUgVVJMLlxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtcGFyc2luZ1xuLy8gVGFiIG9yIG5ld2xpbmUgYXJlIGRlZmluZWQgYXMgXFxyXFxuXFx0OlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2FzY2lpLXRhYi1vci1uZXdsaW5lXG4vLyBBIEMwIGNvbnRyb2wgaXMgYSBjb2RlIHBvaW50IGluIHRoZSByYW5nZSBcXHUwMDAwIE5VTEwgdG8gXFx1MDAxRlxuLy8gSU5GT1JNQVRJT04gU0VQQVJBVE9SIE9ORSwgaW5jbHVzaXZlOlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2MwLWNvbnRyb2wtb3Itc3BhY2VcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG52YXIgaXNKYXZhU2NyaXB0UHJvdG9jb2wgPSAvXltcXHUwMDAwLVxcdTAwMUYgXSpqW1xcclxcblxcdF0qYVtcXHJcXG5cXHRdKnZbXFxyXFxuXFx0XSphW1xcclxcblxcdF0qc1tcXHJcXG5cXHRdKmNbXFxyXFxuXFx0XSpyW1xcclxcblxcdF0qaVtcXHJcXG5cXHRdKnBbXFxyXFxuXFx0XSp0W1xcclxcblxcdF0qXFw6L2k7XG52YXIgZGlkV2FybiA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZVVSTCh1cmwpIHtcbiAge1xuICAgIGlmICghZGlkV2FybiAmJiBpc0phdmFTY3JpcHRQcm90b2NvbC50ZXN0KHVybCkpIHtcbiAgICAgIGRpZFdhcm4gPSB0cnVlO1xuXG4gICAgICBlcnJvcignQSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdCB3aWxsIGJsb2NrIGphdmFzY3JpcHQ6IFVSTHMgYXMgYSBzZWN1cml0eSBwcmVjYXV0aW9uLiAnICsgJ1VzZSBldmVudCBoYW5kbGVycyBpbnN0ZWFkIGlmIHlvdSBjYW4uIElmIHlvdSBuZWVkIHRvIGdlbmVyYXRlIHVuc2FmZSBIVE1MIHRyeSAnICsgJ3VzaW5nIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGluc3RlYWQuIFJlYWN0IHdhcyBwYXNzZWQgJXMuJywgSlNPTi5zdHJpbmdpZnkodXJsKSk7XG4gICAgfVxuICB9XG59XG5cbi8vIGNvZGUgY29waWVkIGFuZCBtb2RpZmllZCBmcm9tIGVzY2FwZS1odG1sXG5cbi8qKlxuICogTW9kdWxlIHZhcmlhYmxlcy5cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBtYXRjaEh0bWxSZWdFeHAgPSAvW1wiJyY8Pl0vO1xuLyoqXG4gKiBFc2NhcGVzIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgSFRNTCBlbnRpdGllcyBpbiBhIGdpdmVuIGh0bWwgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyaW5nIEhUTUwgc3RyaW5nIHRvIGVzY2FwZSBmb3IgbGF0ZXIgaW5zZXJ0aW9uXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcbiAgdmFyIHN0ciA9ICcnICsgc3RyaW5nO1xuICB2YXIgbWF0Y2ggPSBtYXRjaEh0bWxSZWdFeHAuZXhlYyhzdHIpO1xuXG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgdmFyIGVzY2FwZTtcbiAgdmFyIGh0bWwgPSAnJztcbiAgdmFyIGluZGV4O1xuICB2YXIgbGFzdEluZGV4ID0gMDtcblxuICBmb3IgKGluZGV4ID0gbWF0Y2guaW5kZXg7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaW5kZXgpKSB7XG4gICAgICBjYXNlIDM0OlxuICAgICAgICAvLyBcIlxuICAgICAgICBlc2NhcGUgPSAnJnF1b3Q7JztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIC8vICZcbiAgICAgICAgZXNjYXBlID0gJyZhbXA7JztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzk6XG4gICAgICAgIC8vICdcbiAgICAgICAgZXNjYXBlID0gJyYjeDI3Oyc7IC8vIG1vZGlmaWVkIGZyb20gZXNjYXBlLWh0bWw7IHVzZWQgdG8gYmUgJyYjMzknXG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNjA6XG4gICAgICAgIC8vIDxcbiAgICAgICAgZXNjYXBlID0gJyZsdDsnO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA2MjpcbiAgICAgICAgLy8gPlxuICAgICAgICBlc2NhcGUgPSAnJmd0Oyc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGFzdEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaHRtbCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJbmRleCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcbiAgICBodG1sICs9IGVzY2FwZTtcbiAgfVxuXG4gIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4ID8gaHRtbCArIHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleCkgOiBodG1sO1xufSAvLyBlbmQgY29kZSBjb3BpZWQgYW5kIG1vZGlmaWVkIGZyb20gZXNjYXBlLWh0bWxcblxuLyoqXG4gKiBFc2NhcGVzIHRleHQgdG8gcHJldmVudCBzY3JpcHRpbmcgYXR0YWNrcy5cbiAqXG4gKiBAcGFyYW0geyp9IHRleHQgVGV4dCB2YWx1ZSB0byBlc2NhcGUuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEFuIGVzY2FwZWQgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gZXNjYXBlVGV4dEZvckJyb3dzZXIodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgdGV4dCA9PT0gJ251bWJlcicpIHtcbiAgICAvLyB0aGlzIHNob3J0Y2lyY3VpdCBoZWxwcyBwZXJmIGZvciB0eXBlcyB0aGF0IHdlIGtub3cgd2lsbCBuZXZlciBoYXZlXG4gICAgLy8gc3BlY2lhbCBjaGFyYWN0ZXJzLCBlc3BlY2lhbGx5IGdpdmVuIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyB1c2VkIG9mdGVuXG4gICAgLy8gZm9yIG51bWVyaWMgZG9tIGlkcy5cbiAgICByZXR1cm4gJycgKyB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIGVzY2FwZUh0bWwodGV4dCk7XG59XG5cbi8qKlxuICogRXNjYXBlcyBhdHRyaWJ1dGUgdmFsdWUgdG8gcHJldmVudCBzY3JpcHRpbmcgYXR0YWNrcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cblxuZnVuY3Rpb24gcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpIHtcbiAgcmV0dXJuICdcIicgKyBlc2NhcGVUZXh0Rm9yQnJvd3Nlcih2YWx1ZSkgKyAnXCInO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXJrdXBGb3JSb290KCkge1xuICByZXR1cm4gUk9PVF9BVFRSSUJVVEVfTkFNRSArICc9XCJcIic7XG59XG4vKipcbiAqIENyZWF0ZXMgbWFya3VwIGZvciBhIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBNYXJrdXAgc3RyaW5nLCBvciBudWxsIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlJbmZvID0gZ2V0UHJvcGVydHlJbmZvKG5hbWUpO1xuXG4gIGlmIChuYW1lICE9PSAnc3R5bGUnICYmIHNob3VsZElnbm9yZUF0dHJpYnV0ZShuYW1lLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChzaG91bGRSZW1vdmVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIHByb3BlcnR5SW5mbywgZmFsc2UpKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHByb3BlcnR5SW5mbyAhPT0gbnVsbCkge1xuICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWU7XG4gICAgdmFyIHR5cGUgPSBwcm9wZXJ0eUluZm8udHlwZTtcblxuICAgIGlmICh0eXBlID09PSBCT09MRUFOIHx8IHR5cGUgPT09IE9WRVJMT0FERURfQk9PTEVBTiAmJiB2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPVwiXCInO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcGVydHlJbmZvLnNhbml0aXplVVJMKSB7XG4gICAgICAgIHZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICAgICAgc2FuaXRpemVVUkwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXR0cmlidXRlTmFtZSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSkge1xuICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuLyoqXG4gKiBDcmVhdGVzIG1hcmt1cCBmb3IgYSBjdXN0b20gcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZywgb3IgZW1wdHkgc3RyaW5nIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcbiAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICByZXR1cm4geCA9PT0geSAmJiAoeCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkpIHx8IHggIT09IHggJiYgeSAhPT0geSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICA7XG59XG5cbnZhciBvYmplY3RJcyA9IHR5cGVvZiBPYmplY3QuaXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuaXMgOiBpcztcblxudmFyIGN1cnJlbnRseVJlbmRlcmluZ0NvbXBvbmVudCA9IG51bGw7XG52YXIgZmlyc3RXb3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsO1xudmFyIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGw7IC8vIFdoZXRoZXIgdGhlIHdvcmstaW4tcHJvZ3Jlc3MgaG9vayBpcyBhIHJlLXJlbmRlcmVkIGhvb2tcblxudmFyIGlzUmVSZW5kZXIgPSBmYWxzZTsgLy8gV2hldGhlciBhbiB1cGRhdGUgd2FzIHNjaGVkdWxlZCBkdXJpbmcgdGhlIGN1cnJlbnRseSBleGVjdXRpbmcgcmVuZGVyIHBhc3MuXG5cbnZhciBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gZmFsc2U7IC8vIExhemlseSBjcmVhdGVkIG1hcCBvZiByZW5kZXItcGhhc2UgdXBkYXRlc1xuXG52YXIgcmVuZGVyUGhhc2VVcGRhdGVzID0gbnVsbDsgLy8gQ291bnRlciB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzLlxuXG52YXIgbnVtYmVyT2ZSZVJlbmRlcnMgPSAwO1xudmFyIFJFX1JFTkRFUl9MSU1JVCA9IDI1O1xudmFyIGlzSW5Ib29rVXNlckNvZGVJbkRldiA9IGZhbHNlOyAvLyBJbiBERVYsIHRoaXMgaXMgdGhlIG5hbWUgb2YgdGhlIGN1cnJlbnRseSBleGVjdXRpbmcgcHJpbWl0aXZlIGhvb2tcblxudmFyIGN1cnJlbnRIb29rTmFtZUluRGV2O1xuXG5mdW5jdGlvbiByZXNvbHZlQ3VycmVudGx5UmVuZGVyaW5nQ29tcG9uZW50KCkge1xuICBpZiAoIShjdXJyZW50bHlSZW5kZXJpbmdDb21wb25lbnQgIT09IG51bGwpKSB7XG4gICAge1xuICAgICAgdGhyb3cgRXJyb3IoIFwiSW52YWxpZCBob29rIGNhbGwuIEhvb2tzIGNhbiBvbmx5IGJlIGNhbGxlZCBpbnNpZGUgb2YgdGhlIGJvZHkgb2YgYSBmdW5jdGlvbiBjb21wb25lbnQuIFRoaXMgY291bGQgaGFwcGVuIGZvciBvbmUgb2YgdGhlIGZvbGxvd2luZyByZWFzb25zOlxcbjEuIFlvdSBtaWdodCBoYXZlIG1pc21hdGNoaW5nIHZlcnNpb25zIG9mIFJlYWN0IGFuZCB0aGUgcmVuZGVyZXIgKHN1Y2ggYXMgUmVhY3QgRE9NKVxcbjIuIFlvdSBtaWdodCBiZSBicmVha2luZyB0aGUgUnVsZXMgb2YgSG9va3NcXG4zLiBZb3UgbWlnaHQgaGF2ZSBtb3JlIHRoYW4gb25lIGNvcHkgb2YgUmVhY3QgaW4gdGhlIHNhbWUgYXBwXFxuU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9pbnZhbGlkLWhvb2stY2FsbCBmb3IgdGlwcyBhYm91dCBob3cgdG8gZGVidWcgYW5kIGZpeCB0aGlzIHByb2JsZW0uXCIgKTtcbiAgICB9XG4gIH1cblxuICB7XG4gICAgaWYgKGlzSW5Ib29rVXNlckNvZGVJbkRldikge1xuICAgICAgZXJyb3IoJ0RvIG5vdCBjYWxsIEhvb2tzIGluc2lkZSB1c2VFZmZlY3QoLi4uKSwgdXNlTWVtbyguLi4pLCBvciBvdGhlciBidWlsdC1pbiBIb29rcy4gJyArICdZb3UgY2FuIG9ubHkgY2FsbCBIb29rcyBhdCB0aGUgdG9wIGxldmVsIG9mIHlvdXIgUmVhY3QgZnVuY3Rpb24uICcgKyAnRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9ydWxlcy1vZi1ob29rcycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjdXJyZW50bHlSZW5kZXJpbmdDb21wb25lbnQ7XG59XG5cbmZ1bmN0aW9uIGFyZUhvb2tJbnB1dHNFcXVhbChuZXh0RGVwcywgcHJldkRlcHMpIHtcbiAgaWYgKHByZXZEZXBzID09PSBudWxsKSB7XG4gICAge1xuICAgICAgZXJyb3IoJyVzIHJlY2VpdmVkIGEgZmluYWwgYXJndW1lbnQgZHVyaW5nIHRoaXMgcmVuZGVyLCBidXQgbm90IGR1cmluZyAnICsgJ3RoZSBwcmV2aW91cyByZW5kZXIuIEV2ZW4gdGhvdWdoIHRoZSBmaW5hbCBhcmd1bWVudCBpcyBvcHRpb25hbCwgJyArICdpdHMgdHlwZSBjYW5ub3QgY2hhbmdlIGJldHdlZW4gcmVuZGVycy4nLCBjdXJyZW50SG9va05hbWVJbkRldik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAge1xuICAgIC8vIERvbid0IGJvdGhlciBjb21wYXJpbmcgbGVuZ3RocyBpbiBwcm9kIGJlY2F1c2UgdGhlc2UgYXJyYXlzIHNob3VsZCBiZVxuICAgIC8vIHBhc3NlZCBpbmxpbmUuXG4gICAgaWYgKG5leHREZXBzLmxlbmd0aCAhPT0gcHJldkRlcHMubGVuZ3RoKSB7XG4gICAgICBlcnJvcignVGhlIGZpbmFsIGFyZ3VtZW50IHBhc3NlZCB0byAlcyBjaGFuZ2VkIHNpemUgYmV0d2VlbiByZW5kZXJzLiBUaGUgJyArICdvcmRlciBhbmQgc2l6ZSBvZiB0aGlzIGFycmF5IG11c3QgcmVtYWluIGNvbnN0YW50LlxcblxcbicgKyAnUHJldmlvdXM6ICVzXFxuJyArICdJbmNvbWluZzogJXMnLCBjdXJyZW50SG9va05hbWVJbkRldiwgXCJbXCIgKyBuZXh0RGVwcy5qb2luKCcsICcpICsgXCJdXCIsIFwiW1wiICsgcHJldkRlcHMuam9pbignLCAnKSArIFwiXVwiKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXZEZXBzLmxlbmd0aCAmJiBpIDwgbmV4dERlcHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAob2JqZWN0SXMobmV4dERlcHNbaV0sIHByZXZEZXBzW2ldKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhvb2soKSB7XG4gIGlmIChudW1iZXJPZlJlUmVuZGVycyA+IDApIHtcbiAgICB7XG4gICAgICB7XG4gICAgICAgIHRocm93IEVycm9yKCBcIlJlbmRlcmVkIG1vcmUgaG9va3MgdGhhbiBkdXJpbmcgdGhlIHByZXZpb3VzIHJlbmRlclwiICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtZW1vaXplZFN0YXRlOiBudWxsLFxuICAgIHF1ZXVlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlV29ya0luUHJvZ3Jlc3NIb29rKCkge1xuICBpZiAod29ya0luUHJvZ3Jlc3NIb29rID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgaG9vayBpbiB0aGUgbGlzdFxuICAgIGlmIChmaXJzdFdvcmtJblByb2dyZXNzSG9vayA9PT0gbnVsbCkge1xuICAgICAgaXNSZVJlbmRlciA9IGZhbHNlO1xuICAgICAgZmlyc3RXb3JrSW5Qcm9ncmVzc0hvb2sgPSB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjcmVhdGVIb29rKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlJ3MgYWxyZWFkeSBhIHdvcmstaW4tcHJvZ3Jlc3MuIFJldXNlIGl0LlxuICAgICAgaXNSZVJlbmRlciA9IHRydWU7XG4gICAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBmaXJzdFdvcmtJblByb2dyZXNzSG9vaztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID09PSBudWxsKSB7XG4gICAgICBpc1JlUmVuZGVyID0gZmFsc2U7IC8vIEFwcGVuZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0XG5cbiAgICAgIHdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID0gY3JlYXRlSG9vaygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVyZSdzIGFscmVhZHkgYSB3b3JrLWluLXByb2dyZXNzLiBSZXVzZSBpdC5cbiAgICAgIGlzUmVSZW5kZXIgPSB0cnVlO1xuICAgICAgd29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzSG9vaztcbn1cblxuZnVuY3Rpb24gcHJlcGFyZVRvVXNlSG9va3MoY29tcG9uZW50SWRlbnRpdHkpIHtcbiAgY3VycmVudGx5UmVuZGVyaW5nQ29tcG9uZW50ID0gY29tcG9uZW50SWRlbnRpdHk7XG5cbiAge1xuICAgIGlzSW5Ib29rVXNlckNvZGVJbkRldiA9IGZhbHNlO1xuICB9IC8vIFRoZSBmb2xsb3dpbmcgc2hvdWxkIGhhdmUgYWxyZWFkeSBiZWVuIHJlc2V0XG4gIC8vIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSBmYWxzZTtcbiAgLy8gZmlyc3RXb3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsO1xuICAvLyBudW1iZXJPZlJlUmVuZGVycyA9IDA7XG4gIC8vIHJlbmRlclBoYXNlVXBkYXRlcyA9IG51bGw7XG4gIC8vIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGw7XG5cbn1cbmZ1bmN0aW9uIGZpbmlzaEhvb2tzKENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuLCByZWZPckNvbnRleHQpIHtcbiAgLy8gVGhpcyBtdXN0IGJlIGNhbGxlZCBhZnRlciBldmVyeSBmdW5jdGlvbiBjb21wb25lbnQgdG8gcHJldmVudCBob29rcyBmcm9tXG4gIC8vIGJlaW5nIHVzZWQgaW4gY2xhc3Nlcy5cbiAgd2hpbGUgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUpIHtcbiAgICAvLyBVcGRhdGVzIHdlcmUgc2NoZWR1bGVkIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLiBUaGV5IGFyZSBzdG9yZWQgaW5cbiAgICAvLyB0aGUgYHJlbmRlclBoYXNlVXBkYXRlc2AgbWFwLiBDYWxsIHRoZSBjb21wb25lbnQgYWdhaW4sIHJldXNpbmcgdGhlXG4gICAgLy8gd29yay1pbi1wcm9ncmVzcyBob29rcyBhbmQgYXBwbHlpbmcgdGhlIGFkZGl0aW9uYWwgdXBkYXRlcyBvbiB0b3AuIEtlZXBcbiAgICAvLyByZXN0YXJ0aW5nIHVudGlsIG5vIG1vcmUgdXBkYXRlcyBhcmUgc2NoZWR1bGVkLlxuICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSBmYWxzZTtcbiAgICBudW1iZXJPZlJlUmVuZGVycyArPSAxOyAvLyBTdGFydCBvdmVyIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdFxuXG4gICAgd29ya0luUHJvZ3Jlc3NIb29rID0gbnVsbDtcbiAgICBjaGlsZHJlbiA9IENvbXBvbmVudChwcm9wcywgcmVmT3JDb250ZXh0KTtcbiAgfVxuXG4gIHJlc2V0SG9va3NTdGF0ZSgpO1xuICByZXR1cm4gY2hpbGRyZW47XG59IC8vIFJlc2V0IHRoZSBpbnRlcm5hbCBob29rcyBzdGF0ZSBpZiBhbiBlcnJvciBvY2N1cnMgd2hpbGUgcmVuZGVyaW5nIGEgY29tcG9uZW50XG5cbmZ1bmN0aW9uIHJlc2V0SG9va3NTdGF0ZSgpIHtcbiAge1xuICAgIGlzSW5Ib29rVXNlckNvZGVJbkRldiA9IGZhbHNlO1xuICB9XG5cbiAgY3VycmVudGx5UmVuZGVyaW5nQ29tcG9uZW50ID0gbnVsbDtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9IGZhbHNlO1xuICBmaXJzdFdvcmtJblByb2dyZXNzSG9vayA9IG51bGw7XG4gIG51bWJlck9mUmVSZW5kZXJzID0gMDtcbiAgcmVuZGVyUGhhc2VVcGRhdGVzID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVhZENvbnRleHQoY29udGV4dCwgb2JzZXJ2ZWRCaXRzKSB7XG4gIHZhciB0aHJlYWRJRCA9IGN1cnJlbnRQYXJ0aWFsUmVuZGVyZXIudGhyZWFkSUQ7XG4gIHZhbGlkYXRlQ29udGV4dEJvdW5kcyhjb250ZXh0LCB0aHJlYWRJRCk7XG5cbiAge1xuICAgIGlmIChpc0luSG9va1VzZXJDb2RlSW5EZXYpIHtcbiAgICAgIGVycm9yKCdDb250ZXh0IGNhbiBvbmx5IGJlIHJlYWQgd2hpbGUgUmVhY3QgaXMgcmVuZGVyaW5nLiAnICsgJ0luIGNsYXNzZXMsIHlvdSBjYW4gcmVhZCBpdCBpbiB0aGUgcmVuZGVyIG1ldGhvZCBvciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuICcgKyAnSW4gZnVuY3Rpb24gY29tcG9uZW50cywgeW91IGNhbiByZWFkIGl0IGRpcmVjdGx5IGluIHRoZSBmdW5jdGlvbiBib2R5LCBidXQgbm90ICcgKyAnaW5zaWRlIEhvb2tzIGxpa2UgdXNlUmVkdWNlcigpIG9yIHVzZU1lbW8oKS4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29udGV4dFt0aHJlYWRJRF07XG59XG5cbmZ1bmN0aW9uIHVzZUNvbnRleHQoY29udGV4dCwgb2JzZXJ2ZWRCaXRzKSB7XG4gIHtcbiAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VDb250ZXh0JztcbiAgfVxuXG4gIHJlc29sdmVDdXJyZW50bHlSZW5kZXJpbmdDb21wb25lbnQoKTtcbiAgdmFyIHRocmVhZElEID0gY3VycmVudFBhcnRpYWxSZW5kZXJlci50aHJlYWRJRDtcbiAgdmFsaWRhdGVDb250ZXh0Qm91bmRzKGNvbnRleHQsIHRocmVhZElEKTtcbiAgcmV0dXJuIGNvbnRleHRbdGhyZWFkSURdO1xufVxuXG5mdW5jdGlvbiBiYXNpY1N0YXRlUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIC8vICRGbG93Rml4TWU6IEZsb3cgZG9lc24ndCBsaWtlIG1peGVkIHR5cGVzXG4gIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nID8gYWN0aW9uKHN0YXRlKSA6IGFjdGlvbjtcbn1cblxuZnVuY3Rpb24gdXNlU3RhdGUoaW5pdGlhbFN0YXRlKSB7XG4gIHtcbiAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VTdGF0ZSc7XG4gIH1cblxuICByZXR1cm4gdXNlUmVkdWNlcihiYXNpY1N0YXRlUmVkdWNlciwgLy8gdXNlUmVkdWNlciBoYXMgYSBzcGVjaWFsIGNhc2UgdG8gc3VwcG9ydCBsYXp5IHVzZVN0YXRlIGluaXRpYWxpemVyc1xuICBpbml0aWFsU3RhdGUpO1xufVxuZnVuY3Rpb24gdXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gIHtcbiAgICBpZiAocmVkdWNlciAhPT0gYmFzaWNTdGF0ZVJlZHVjZXIpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVJlZHVjZXInO1xuICAgIH1cbiAgfVxuXG4gIGN1cnJlbnRseVJlbmRlcmluZ0NvbXBvbmVudCA9IHJlc29sdmVDdXJyZW50bHlSZW5kZXJpbmdDb21wb25lbnQoKTtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3JlYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG5cbiAgaWYgKGlzUmVSZW5kZXIpIHtcbiAgICAvLyBUaGlzIGlzIGEgcmUtcmVuZGVyLiBBcHBseSB0aGUgbmV3IHJlbmRlciBwaGFzZSB1cGRhdGVzIHRvIHRoZSBwcmV2aW91c1xuICAgIC8vIGN1cnJlbnQgaG9vay5cbiAgICB2YXIgcXVldWUgPSB3b3JrSW5Qcm9ncmVzc0hvb2sucXVldWU7XG4gICAgdmFyIGRpc3BhdGNoID0gcXVldWUuZGlzcGF0Y2g7XG5cbiAgICBpZiAocmVuZGVyUGhhc2VVcGRhdGVzICE9PSBudWxsKSB7XG4gICAgICAvLyBSZW5kZXIgcGhhc2UgdXBkYXRlcyBhcmUgc3RvcmVkIGluIGEgbWFwIG9mIHF1ZXVlIC0+IGxpbmtlZCBsaXN0XG4gICAgICB2YXIgZmlyc3RSZW5kZXJQaGFzZVVwZGF0ZSA9IHJlbmRlclBoYXNlVXBkYXRlcy5nZXQocXVldWUpO1xuXG4gICAgICBpZiAoZmlyc3RSZW5kZXJQaGFzZVVwZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlbmRlclBoYXNlVXBkYXRlcy5kZWxldGUocXVldWUpO1xuICAgICAgICB2YXIgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzc0hvb2subWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgdmFyIHVwZGF0ZSA9IGZpcnN0UmVuZGVyUGhhc2VVcGRhdGU7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIC8vIFByb2Nlc3MgdGhpcyByZW5kZXIgcGhhc2UgdXBkYXRlLiBXZSBkb24ndCBoYXZlIHRvIGNoZWNrIHRoZVxuICAgICAgICAgIC8vIHByaW9yaXR5IGJlY2F1c2UgaXQgd2lsbCBhbHdheXMgYmUgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnRcbiAgICAgICAgICAvLyByZW5kZXIncy5cbiAgICAgICAgICB2YXIgYWN0aW9uID0gdXBkYXRlLmFjdGlvbjtcblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlzSW5Ib29rVXNlckNvZGVJbkRldiA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3U3RhdGUgPSByZWR1Y2VyKG5ld1N0YXRlLCBhY3Rpb24pO1xuXG4gICAgICAgICAge1xuICAgICAgICAgICAgaXNJbkhvb2tVc2VyQ29kZUluRGV2ID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgICAgIH0gd2hpbGUgKHVwZGF0ZSAhPT0gbnVsbCk7XG5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3NIb29rLm1lbW9pemVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgcmV0dXJuIFtuZXdTdGF0ZSwgZGlzcGF0Y2hdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbd29ya0luUHJvZ3Jlc3NIb29rLm1lbW9pemVkU3RhdGUsIGRpc3BhdGNoXTtcbiAgfSBlbHNlIHtcbiAgICB7XG4gICAgICBpc0luSG9va1VzZXJDb2RlSW5EZXYgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsU3RhdGU7XG5cbiAgICBpZiAocmVkdWNlciA9PT0gYmFzaWNTdGF0ZVJlZHVjZXIpIHtcbiAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYHVzZVN0YXRlYC5cbiAgICAgIGluaXRpYWxTdGF0ZSA9IHR5cGVvZiBpbml0aWFsQXJnID09PSAnZnVuY3Rpb24nID8gaW5pdGlhbEFyZygpIDogaW5pdGlhbEFyZztcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdGlhbFN0YXRlID0gaW5pdCAhPT0gdW5kZWZpbmVkID8gaW5pdChpbml0aWFsQXJnKSA6IGluaXRpYWxBcmc7XG4gICAgfVxuXG4gICAge1xuICAgICAgaXNJbkhvb2tVc2VyQ29kZUluRGV2ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgd29ya0luUHJvZ3Jlc3NIb29rLm1lbW9pemVkU3RhdGUgPSBpbml0aWFsU3RhdGU7XG5cbiAgICB2YXIgX3F1ZXVlID0gd29ya0luUHJvZ3Jlc3NIb29rLnF1ZXVlID0ge1xuICAgICAgbGFzdDogbnVsbCxcbiAgICAgIGRpc3BhdGNoOiBudWxsXG4gICAgfTtcblxuICAgIHZhciBfZGlzcGF0Y2ggPSBfcXVldWUuZGlzcGF0Y2ggPSBkaXNwYXRjaEFjdGlvbi5iaW5kKG51bGwsIGN1cnJlbnRseVJlbmRlcmluZ0NvbXBvbmVudCwgX3F1ZXVlKTtcblxuICAgIHJldHVybiBbd29ya0luUHJvZ3Jlc3NIb29rLm1lbW9pemVkU3RhdGUsIF9kaXNwYXRjaF07XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlTWVtbyhuZXh0Q3JlYXRlLCBkZXBzKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0NvbXBvbmVudCA9IHJlc29sdmVDdXJyZW50bHlSZW5kZXJpbmdDb21wb25lbnQoKTtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3JlYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBuZXh0RGVwcyA9IGRlcHMgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZXBzO1xuXG4gIGlmICh3b3JrSW5Qcm9ncmVzc0hvb2sgIT09IG51bGwpIHtcbiAgICB2YXIgcHJldlN0YXRlID0gd29ya0luUHJvZ3Jlc3NIb29rLm1lbW9pemVkU3RhdGU7XG5cbiAgICBpZiAocHJldlN0YXRlICE9PSBudWxsKSB7XG4gICAgICBpZiAobmV4dERlcHMgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHByZXZEZXBzID0gcHJldlN0YXRlWzFdO1xuXG4gICAgICAgIGlmIChhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSkge1xuICAgICAgICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB7XG4gICAgaXNJbkhvb2tVc2VyQ29kZUluRGV2ID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBuZXh0VmFsdWUgPSBuZXh0Q3JlYXRlKCk7XG5cbiAge1xuICAgIGlzSW5Ib29rVXNlckNvZGVJbkRldiA9IGZhbHNlO1xuICB9XG5cbiAgd29ya0luUHJvZ3Jlc3NIb29rLm1lbW9pemVkU3RhdGUgPSBbbmV4dFZhbHVlLCBuZXh0RGVwc107XG4gIHJldHVybiBuZXh0VmFsdWU7XG59XG5cbmZ1bmN0aW9uIHVzZVJlZihpbml0aWFsVmFsdWUpIHtcbiAgY3VycmVudGx5UmVuZGVyaW5nQ29tcG9uZW50ID0gcmVzb2x2ZUN1cnJlbnRseVJlbmRlcmluZ0NvbXBvbmVudCgpO1xuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIHByZXZpb3VzUmVmID0gd29ya0luUHJvZ3Jlc3NIb29rLm1lbW9pemVkU3RhdGU7XG5cbiAgaWYgKHByZXZpb3VzUmVmID09PSBudWxsKSB7XG4gICAgdmFyIHJlZiA9IHtcbiAgICAgIGN1cnJlbnQ6IGluaXRpYWxWYWx1ZVxuICAgIH07XG5cbiAgICB7XG4gICAgICBPYmplY3Quc2VhbChyZWYpO1xuICAgIH1cblxuICAgIHdvcmtJblByb2dyZXNzSG9vay5tZW1vaXplZFN0YXRlID0gcmVmO1xuICAgIHJldHVybiByZWY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByZXZpb3VzUmVmO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVzZUxheW91dEVmZmVjdChjcmVhdGUsIGlucHV0cykge1xuICB7XG4gICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTGF5b3V0RWZmZWN0JztcblxuICAgIGVycm9yKCd1c2VMYXlvdXRFZmZlY3QgZG9lcyBub3RoaW5nIG9uIHRoZSBzZXJ2ZXIsIGJlY2F1c2UgaXRzIGVmZmVjdCBjYW5ub3QgJyArIFwiYmUgZW5jb2RlZCBpbnRvIHRoZSBzZXJ2ZXIgcmVuZGVyZXIncyBvdXRwdXQgZm9ybWF0LiBUaGlzIHdpbGwgbGVhZCBcIiArICd0byBhIG1pc21hdGNoIGJldHdlZW4gdGhlIGluaXRpYWwsIG5vbi1oeWRyYXRlZCBVSSBhbmQgdGhlIGludGVuZGVkICcgKyAnVUkuIFRvIGF2b2lkIHRoaXMsIHVzZUxheW91dEVmZmVjdCBzaG91bGQgb25seSBiZSB1c2VkIGluICcgKyAnY29tcG9uZW50cyB0aGF0IHJlbmRlciBleGNsdXNpdmVseSBvbiB0aGUgY2xpZW50LiAnICsgJ1NlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvdXNlbGF5b3V0ZWZmZWN0LXNzciBmb3IgY29tbW9uIGZpeGVzLicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQWN0aW9uKGNvbXBvbmVudElkZW50aXR5LCBxdWV1ZSwgYWN0aW9uKSB7XG4gIGlmICghKG51bWJlck9mUmVSZW5kZXJzIDwgUkVfUkVOREVSX0xJTUlUKSkge1xuICAgIHtcbiAgICAgIHRocm93IEVycm9yKCBcIlRvbyBtYW55IHJlLXJlbmRlcnMuIFJlYWN0IGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJlbmRlcnMgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLlwiICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbXBvbmVudElkZW50aXR5ID09PSBjdXJyZW50bHlSZW5kZXJpbmdDb21wb25lbnQpIHtcbiAgICAvLyBUaGlzIGlzIGEgcmVuZGVyIHBoYXNlIHVwZGF0ZS4gU3Rhc2ggaXQgaW4gYSBsYXppbHktY3JlYXRlZCBtYXAgb2ZcbiAgICAvLyBxdWV1ZSAtPiBsaW5rZWQgbGlzdCBvZiB1cGRhdGVzLiBBZnRlciB0aGlzIHJlbmRlciBwYXNzLCB3ZSdsbCByZXN0YXJ0XG4gICAgLy8gYW5kIGFwcGx5IHRoZSBzdGFzaGVkIHVwZGF0ZXMgb24gdG9wIG9mIHRoZSB3b3JrLWluLXByb2dyZXNzIGhvb2suXG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9IHRydWU7XG4gICAgdmFyIHVwZGF0ZSA9IHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG5cbiAgICBpZiAocmVuZGVyUGhhc2VVcGRhdGVzID09PSBudWxsKSB7XG4gICAgICByZW5kZXJQaGFzZVVwZGF0ZXMgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0UmVuZGVyUGhhc2VVcGRhdGUgPSByZW5kZXJQaGFzZVVwZGF0ZXMuZ2V0KHF1ZXVlKTtcblxuICAgIGlmIChmaXJzdFJlbmRlclBoYXNlVXBkYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlbmRlclBoYXNlVXBkYXRlcy5zZXQocXVldWUsIHVwZGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFwcGVuZCB0aGUgdXBkYXRlIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3QuXG4gICAgICB2YXIgbGFzdFJlbmRlclBoYXNlVXBkYXRlID0gZmlyc3RSZW5kZXJQaGFzZVVwZGF0ZTtcblxuICAgICAgd2hpbGUgKGxhc3RSZW5kZXJQaGFzZVVwZGF0ZS5uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgIGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSA9IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZS5uZXh0O1xuICAgICAgfVxuXG4gICAgICBsYXN0UmVuZGVyUGhhc2VVcGRhdGUubmV4dCA9IHVwZGF0ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgcmV0dXJuIHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfSwgZGVwcyk7XG59IC8vIFRPRE8gRGVjaWRlIG9uIGhvdyB0byBpbXBsZW1lbnQgdGhpcyBob29rIGZvciBzZXJ2ZXIgcmVuZGVyaW5nLlxuLy8gSWYgYSBtdXRhdGlvbiBvY2N1cnMgZHVyaW5nIHJlbmRlciwgY29uc2lkZXIgdHJpZ2dlcmluZyBhIFN1c3BlbnNlIGJvdW5kYXJ5XG4vLyBhbmQgZmFsbGluZyBiYWNrIHRvIGNsaWVudCByZW5kZXJpbmcuXG5cbmZ1bmN0aW9uIHVzZU11dGFibGVTb3VyY2Uoc291cmNlLCBnZXRTbmFwc2hvdCwgc3Vic2NyaWJlKSB7XG4gIHJlc29sdmVDdXJyZW50bHlSZW5kZXJpbmdDb21wb25lbnQoKTtcbiAgcmV0dXJuIGdldFNuYXBzaG90KHNvdXJjZS5fc291cmNlKTtcbn1cblxuZnVuY3Rpb24gdXNlRGVmZXJyZWRWYWx1ZSh2YWx1ZSkge1xuICByZXNvbHZlQ3VycmVudGx5UmVuZGVyaW5nQ29tcG9uZW50KCk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdXNlVHJhbnNpdGlvbigpIHtcbiAgcmVzb2x2ZUN1cnJlbnRseVJlbmRlcmluZ0NvbXBvbmVudCgpO1xuXG4gIHZhciBzdGFydFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjaygpO1xuICB9O1xuXG4gIHJldHVybiBbc3RhcnRUcmFuc2l0aW9uLCBmYWxzZV07XG59XG5cbmZ1bmN0aW9uIHVzZU9wYXF1ZUlkZW50aWZpZXIoKSB7XG4gIHJldHVybiAoY3VycmVudFBhcnRpYWxSZW5kZXJlci5pZGVudGlmaWVyUHJlZml4IHx8ICcnKSArICdSOicgKyAoY3VycmVudFBhcnRpYWxSZW5kZXJlci51bmlxdWVJRCsrKS50b1N0cmluZygzNik7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG52YXIgY3VycmVudFBhcnRpYWxSZW5kZXJlciA9IG51bGw7XG5mdW5jdGlvbiBzZXRDdXJyZW50UGFydGlhbFJlbmRlcmVyKHJlbmRlcmVyKSB7XG4gIGN1cnJlbnRQYXJ0aWFsUmVuZGVyZXIgPSByZW5kZXJlcjtcbn1cbnZhciBEaXNwYXRjaGVyID0ge1xuICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZUNvbnRleHQ6IHVzZUNvbnRleHQsXG4gIHVzZU1lbW86IHVzZU1lbW8sXG4gIHVzZVJlZHVjZXI6IHVzZVJlZHVjZXIsXG4gIHVzZVJlZjogdXNlUmVmLFxuICB1c2VTdGF0ZTogdXNlU3RhdGUsXG4gIHVzZUxheW91dEVmZmVjdDogdXNlTGF5b3V0RWZmZWN0LFxuICB1c2VDYWxsYmFjazogdXNlQ2FsbGJhY2ssXG4gIC8vIHVzZUltcGVyYXRpdmVIYW5kbGUgaXMgbm90IHJ1biBpbiB0aGUgc2VydmVyIGVudmlyb25tZW50XG4gIHVzZUltcGVyYXRpdmVIYW5kbGU6IG5vb3AsXG4gIC8vIEVmZmVjdHMgYXJlIG5vdCBydW4gaW4gdGhlIHNlcnZlciBlbnZpcm9ubWVudC5cbiAgdXNlRWZmZWN0OiBub29wLFxuICAvLyBEZWJ1Z2dpbmcgZWZmZWN0XG4gIHVzZURlYnVnVmFsdWU6IG5vb3AsXG4gIHVzZURlZmVycmVkVmFsdWU6IHVzZURlZmVycmVkVmFsdWUsXG4gIHVzZVRyYW5zaXRpb246IHVzZVRyYW5zaXRpb24sXG4gIHVzZU9wYXF1ZUlkZW50aWZpZXI6IHVzZU9wYXF1ZUlkZW50aWZpZXIsXG4gIC8vIFN1YnNjcmlwdGlvbnMgYXJlIG5vdCBzZXR1cCBpbiBhIHNlcnZlciBlbnZpcm9ubWVudC5cbiAgdXNlTXV0YWJsZVNvdXJjZTogdXNlTXV0YWJsZVNvdXJjZVxufTtcblxudmFyIEhUTUxfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xudmFyIE1BVEhfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnO1xudmFyIFNWR19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xudmFyIE5hbWVzcGFjZXMgPSB7XG4gIGh0bWw6IEhUTUxfTkFNRVNQQUNFLFxuICBtYXRobWw6IE1BVEhfTkFNRVNQQUNFLFxuICBzdmc6IFNWR19OQU1FU1BBQ0Vcbn07IC8vIEFzc3VtZXMgdGhlcmUgaXMgbm8gcGFyZW50IG5hbWVzcGFjZS5cblxuZnVuY3Rpb24gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHR5cGUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnc3ZnJzpcbiAgICAgIHJldHVybiBTVkdfTkFNRVNQQUNFO1xuXG4gICAgY2FzZSAnbWF0aCc6XG4gICAgICByZXR1cm4gTUFUSF9OQU1FU1BBQ0U7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIEhUTUxfTkFNRVNQQUNFO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZE5hbWVzcGFjZShwYXJlbnROYW1lc3BhY2UsIHR5cGUpIHtcbiAgaWYgKHBhcmVudE5hbWVzcGFjZSA9PSBudWxsIHx8IHBhcmVudE5hbWVzcGFjZSA9PT0gSFRNTF9OQU1FU1BBQ0UpIHtcbiAgICAvLyBObyAob3IgZGVmYXVsdCkgcGFyZW50IG5hbWVzcGFjZTogcG90ZW50aWFsIGVudHJ5IHBvaW50LlxuICAgIHJldHVybiBnZXRJbnRyaW5zaWNOYW1lc3BhY2UodHlwZSk7XG4gIH1cblxuICBpZiAocGFyZW50TmFtZXNwYWNlID09PSBTVkdfTkFNRVNQQUNFICYmIHR5cGUgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIFdlJ3JlIGxlYXZpbmcgU1ZHLlxuICAgIHJldHVybiBIVE1MX05BTUVTUEFDRTtcbiAgfSAvLyBCeSBkZWZhdWx0LCBwYXNzIG5hbWVzcGFjZSBiZWxvdy5cblxuXG4gIHJldHVybiBwYXJlbnROYW1lc3BhY2U7XG59XG5cbnZhciBoYXNSZWFkT25seVZhbHVlID0ge1xuICBidXR0b246IHRydWUsXG4gIGNoZWNrYm94OiB0cnVlLFxuICBpbWFnZTogdHJ1ZSxcbiAgaGlkZGVuOiB0cnVlLFxuICByYWRpbzogdHJ1ZSxcbiAgcmVzZXQ6IHRydWUsXG4gIHN1Ym1pdDogdHJ1ZVxufTtcbmZ1bmN0aW9uIGNoZWNrQ29udHJvbGxlZFZhbHVlUHJvcHModGFnTmFtZSwgcHJvcHMpIHtcbiAge1xuICAgIGlmICghKGhhc1JlYWRPbmx5VmFsdWVbcHJvcHMudHlwZV0gfHwgcHJvcHMub25DaGFuZ2UgfHwgcHJvcHMub25JbnB1dCB8fCBwcm9wcy5yZWFkT25seSB8fCBwcm9wcy5kaXNhYmxlZCB8fCBwcm9wcy52YWx1ZSA9PSBudWxsKSkge1xuICAgICAgZXJyb3IoJ1lvdSBwcm92aWRlZCBhIGB2YWx1ZWAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICsgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0VmFsdWVgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gICAgfVxuXG4gICAgaWYgKCEocHJvcHMub25DaGFuZ2UgfHwgcHJvcHMucmVhZE9ubHkgfHwgcHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMuY2hlY2tlZCA9PSBudWxsKSkge1xuICAgICAgZXJyb3IoJ1lvdSBwcm92aWRlZCBhIGBjaGVja2VkYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRDaGVja2VkYC4gT3RoZXJ3aXNlLCAnICsgJ3NldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLicpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBGb3IgSFRNTCwgY2VydGFpbiB0YWdzIHNob3VsZCBvbWl0IHRoZWlyIGNsb3NlIHRhZy4gV2Uga2VlcCBhIGxpc3QgZm9yXG4vLyB0aG9zZSBzcGVjaWFsLWNhc2UgdGFncy5cbnZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICBhcmVhOiB0cnVlLFxuICBiYXNlOiB0cnVlLFxuICBicjogdHJ1ZSxcbiAgY29sOiB0cnVlLFxuICBlbWJlZDogdHJ1ZSxcbiAgaHI6IHRydWUsXG4gIGltZzogdHJ1ZSxcbiAgaW5wdXQ6IHRydWUsXG4gIGtleWdlbjogdHJ1ZSxcbiAgbGluazogdHJ1ZSxcbiAgbWV0YTogdHJ1ZSxcbiAgcGFyYW06IHRydWUsXG4gIHNvdXJjZTogdHJ1ZSxcbiAgdHJhY2s6IHRydWUsXG4gIHdicjogdHJ1ZSAvLyBOT1RFOiBtZW51aXRlbSdzIGNsb3NlIHRhZyBzaG91bGQgYmUgb21pdHRlZCwgYnV0IHRoYXQgY2F1c2VzIHByb2JsZW1zLlxuXG59O1xuXG4vLyBgb21pdHRlZENsb3NlVGFnc2AgZXhjZXB0IHRoYXQgYG1lbnVpdGVtYCBzaG91bGQgc3RpbGwgaGF2ZSBpdHMgY2xvc2luZyB0YWcuXG5cbnZhciB2b2lkRWxlbWVudFRhZ3MgPSBfYXNzaWduKHtcbiAgbWVudWl0ZW06IHRydWVcbn0sIG9taXR0ZWRDbG9zZVRhZ3MpO1xuXG52YXIgSFRNTCA9ICdfX2h0bWwnO1xuXG5mdW5jdGlvbiBhc3NlcnRWYWxpZFByb3BzKHRhZywgcHJvcHMpIHtcbiAgaWYgKCFwcm9wcykge1xuICAgIHJldHVybjtcbiAgfSAvLyBOb3RlIHRoZSB1c2Ugb2YgYD09YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuXG5cbiAgaWYgKHZvaWRFbGVtZW50VGFnc1t0YWddKSB7XG4gICAgaWYgKCEocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCAmJiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSkge1xuICAgICAge1xuICAgICAgICB0aHJvdyBFcnJvciggdGFnICsgXCIgaXMgYSB2b2lkIGVsZW1lbnQgdGFnIGFuZCBtdXN0IG5laXRoZXIgaGF2ZSBgY2hpbGRyZW5gIG5vciB1c2UgYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC5cIiApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAhPSBudWxsKSB7XG4gICAgaWYgKCEocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCkpIHtcbiAgICAgIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoIFwiQ2FuIG9ubHkgc2V0IG9uZSBvZiBgY2hpbGRyZW5gIG9yIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuXCIgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoISh0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmIEhUTUwgaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKSB7XG4gICAgICB7XG4gICAgICAgIHRocm93IEVycm9yKCBcImBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAgbXVzdCBiZSBpbiB0aGUgZm9ybSBge19faHRtbDogLi4ufWAuIFBsZWFzZSB2aXNpdCBodHRwczovL3JlYWN0anMub3JnL2xpbmsvZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB7XG4gICAgaWYgKCFwcm9wcy5zdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgJiYgcHJvcHMuY29udGVudEVkaXRhYmxlICYmIHByb3BzLmNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIGVycm9yKCdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgKyAnUmVhY3QuIEl0IGlzIG5vdyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIGd1YXJhbnRlZSB0aGF0IG5vbmUgb2YgJyArICd0aG9zZSBub2RlcyBhcmUgdW5leHBlY3RlZGx5IG1vZGlmaWVkIG9yIGR1cGxpY2F0ZWQuIFRoaXMgaXMgJyArICdwcm9iYWJseSBub3QgaW50ZW50aW9uYWwuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCEocHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnKSkge1xuICAgIHtcbiAgICAgIHRocm93IEVycm9yKCBcIlRoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgbm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArICdlbSd9fSB3aGVuIHVzaW5nIEpTWC5cIiApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqL1xudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogdHJ1ZSxcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBib3hPcmRpbmFsR3JvdXA6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBjb2x1bW5zOiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZ3JpZEFyZWE6IHRydWUsXG4gIGdyaWRSb3c6IHRydWUsXG4gIGdyaWRSb3dFbmQ6IHRydWUsXG4gIGdyaWRSb3dTcGFuOiB0cnVlLFxuICBncmlkUm93U3RhcnQ6IHRydWUsXG4gIGdyaWRDb2x1bW46IHRydWUsXG4gIGdyaWRDb2x1bW5FbmQ6IHRydWUsXG4gIGdyaWRDb2x1bW5TcGFuOiB0cnVlLFxuICBncmlkQ29sdW1uU3RhcnQ6IHRydWUsXG4gIGZvbnRXZWlnaHQ6IHRydWUsXG4gIGxpbmVDbGFtcDogdHJ1ZSxcbiAgbGluZUhlaWdodDogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgb3JkZXI6IHRydWUsXG4gIG9ycGhhbnM6IHRydWUsXG4gIHRhYlNpemU6IHRydWUsXG4gIHdpZG93czogdHJ1ZSxcbiAgekluZGV4OiB0cnVlLFxuICB6b29tOiB0cnVlLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBmbG9vZE9wYWNpdHk6IHRydWUsXG4gIHN0b3BPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNoYXJyYXk6IHRydWUsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IHRydWUsXG4gIHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG4gIHN0cm9rZU9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZVdpZHRoOiB0cnVlXG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4S2V5KHByZWZpeCwga2V5KSB7XG4gIHJldHVybiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xufVxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xuXG5cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107IC8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGlzVW5pdGxlc3NOdW1iZXJbcHJlZml4S2V5KHByZWZpeCwgcHJvcCldID0gaXNVbml0bGVzc051bWJlcltwcm9wXTtcbiAgfSk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgaW50byB0aGUgcHJvcGVyIGNzcyB3cml0YWJsZSB2YWx1ZS4gVGhlIHN0eWxlIG5hbWUgYG5hbWVgXG4gKiBzaG91bGQgYmUgbG9naWNhbCAobm8gaHlwaGVucyksIGFzIHNwZWNpZmllZFxuICogaW4gYENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXJgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENTUyBwcm9wZXJ0eSBuYW1lIHN1Y2ggYXMgYHRvcE1hcmdpbmAuXG4gKiBAcGFyYW0geyp9IHZhbHVlIENTUyBwcm9wZXJ0eSB2YWx1ZSBzdWNoIGFzIGAxMHB4YC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBzdHlsZSB2YWx1ZSB3aXRoIGRpbWVuc2lvbnMgYXBwbGllZC5cbiAqL1xuXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlLCBpc0N1c3RvbVByb3BlcnR5KSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG4gIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG5cbiAgaWYgKGlzRW1wdHkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoIWlzQ3VzdG9tUHJvcGVydHkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCAmJiAhKGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkpIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnOyAvLyBQcmVzdW1lcyBpbXBsaWNpdCAncHgnIHN1ZmZpeCBmb3IgdW5pdGxlc3MgbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuICgnJyArIHZhbHVlKS50cmltKCk7XG59XG5cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqL1xuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5mdW5jdGlvbiBpc0N1c3RvbUNvbXBvbmVudCh0YWdOYW1lLCBwcm9wcykge1xuICBpZiAodGFnTmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5pcyA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICAvLyBUaGVzZSBhcmUgcmVzZXJ2ZWQgU1ZHIGFuZCBNYXRoTUwgZWxlbWVudHMuXG4gICAgLy8gV2UgZG9uJ3QgbWluZCB0aGlzIGxpc3QgdG9vIG11Y2ggYmVjYXVzZSB3ZSBleHBlY3QgaXQgdG8gbmV2ZXIgZ3Jvdy5cbiAgICAvLyBUaGUgYWx0ZXJuYXRpdmUgaXMgdG8gdHJhY2sgdGhlIG5hbWVzcGFjZSBpbiBhIGZldyBwbGFjZXMgd2hpY2ggaXMgY29udm9sdXRlZC5cbiAgICAvLyBodHRwczovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL2N1c3RvbS8jY3VzdG9tLWVsZW1lbnRzLWNvcmUtY29uY2VwdHNcbiAgICBjYXNlICdhbm5vdGF0aW9uLXhtbCc6XG4gICAgY2FzZSAnY29sb3ItcHJvZmlsZSc6XG4gICAgY2FzZSAnZm9udC1mYWNlJzpcbiAgICBjYXNlICdmb250LWZhY2Utc3JjJzpcbiAgICBjYXNlICdmb250LWZhY2UtdXJpJzpcbiAgICBjYXNlICdmb250LWZhY2UtZm9ybWF0JzpcbiAgICBjYXNlICdmb250LWZhY2UtbmFtZSc6XG4gICAgY2FzZSAnbWlzc2luZy1nbHlwaCc6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxudmFyIHdhcm5WYWxpZFN0eWxlID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgLy8gJ21zVHJhbnNmb3JtJyBpcyBjb3JyZWN0LCBidXQgdGhlIG90aGVyIHByZWZpeGVzIHNob3VsZCBiZSBjYXBpdGFsaXplZFxuICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuICB2YXIgbXNQYXR0ZXJuJDEgPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7IC8vIHN0eWxlIHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvblxuXG4gIHZhciBiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4gPSAvO1xccyokLztcbiAgdmFyIHdhcm5lZFN0eWxlTmFtZXMgPSB7fTtcbiAgdmFyIHdhcm5lZFN0eWxlVmFsdWVzID0ge307XG4gIHZhciB3YXJuZWRGb3JOYU5WYWx1ZSA9IGZhbHNlO1xuICB2YXIgd2FybmVkRm9ySW5maW5pdHlWYWx1ZSA9IGZhbHNlO1xuXG4gIHZhciBjYW1lbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKF8sIGNoYXJhY3Rlcikge1xuICAgICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuXG4gICAgZXJyb3IoJ1Vuc3VwcG9ydGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JywgbmFtZSwgLy8gQXMgQW5kaSBTbWl0aCBzdWdnZXN0c1xuICAgIC8vIChodHRwOi8vd3d3LmFuZGlzbWl0aC5jb20vYmxvZy8yMDEyLzAyL21vZGVybml6ci1wcmVmaXhlZC8pLCBhbiBgLW1zYCBwcmVmaXhcbiAgICAvLyBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gICAgY2FtZWxpemUobmFtZS5yZXBsYWNlKG1zUGF0dGVybiQxLCAnbXMtJykpKTtcbiAgfTtcblxuICB2YXIgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG5cbiAgICBlcnJvcignVW5zdXBwb3J0ZWQgdmVuZG9yLXByZWZpeGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JywgbmFtZSwgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSkpO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVWYWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpICYmIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSA9IHRydWU7XG5cbiAgICBlcnJvcihcIlN0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuJ3QgY29udGFpbiBhIHNlbWljb2xvbi4gXCIgKyAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4nLCBuYW1lLCB2YWx1ZS5yZXBsYWNlKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiwgJycpKTtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVJc05hTiA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh3YXJuZWRGb3JOYU5WYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZEZvck5hTlZhbHVlID0gdHJ1ZTtcblxuICAgIGVycm9yKCdgTmFOYCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvciB0aGUgYCVzYCBjc3Mgc3R5bGUgcHJvcGVydHkuJywgbmFtZSk7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlSXNJbmZpbml0eSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh3YXJuZWRGb3JJbmZpbml0eVZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkRm9ySW5maW5pdHlWYWx1ZSA9IHRydWU7XG5cbiAgICBlcnJvcignYEluZmluaXR5YCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvciB0aGUgYCVzYCBjc3Mgc3R5bGUgcHJvcGVydHkuJywgbmFtZSk7XG4gIH07XG5cbiAgd2FyblZhbGlkU3R5bGUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAobmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKSkge1xuICAgICAgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24obmFtZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIHdhcm5TdHlsZVZhbHVlSXNOYU4obmFtZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICghaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIHdhcm5TdHlsZVZhbHVlSXNJbmZpbml0eShuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG52YXIgd2FyblZhbGlkU3R5bGUkMSA9IHdhcm5WYWxpZFN0eWxlO1xuXG52YXIgYXJpYVByb3BlcnRpZXMgPSB7XG4gICdhcmlhLWN1cnJlbnQnOiAwLFxuICAvLyBzdGF0ZVxuICAnYXJpYS1kZXRhaWxzJzogMCxcbiAgJ2FyaWEtZGlzYWJsZWQnOiAwLFxuICAvLyBzdGF0ZVxuICAnYXJpYS1oaWRkZW4nOiAwLFxuICAvLyBzdGF0ZVxuICAnYXJpYS1pbnZhbGlkJzogMCxcbiAgLy8gc3RhdGVcbiAgJ2FyaWEta2V5c2hvcnRjdXRzJzogMCxcbiAgJ2FyaWEtbGFiZWwnOiAwLFxuICAnYXJpYS1yb2xlZGVzY3JpcHRpb24nOiAwLFxuICAvLyBXaWRnZXQgQXR0cmlidXRlc1xuICAnYXJpYS1hdXRvY29tcGxldGUnOiAwLFxuICAnYXJpYS1jaGVja2VkJzogMCxcbiAgJ2FyaWEtZXhwYW5kZWQnOiAwLFxuICAnYXJpYS1oYXNwb3B1cCc6IDAsXG4gICdhcmlhLWxldmVsJzogMCxcbiAgJ2FyaWEtbW9kYWwnOiAwLFxuICAnYXJpYS1tdWx0aWxpbmUnOiAwLFxuICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiAwLFxuICAnYXJpYS1vcmllbnRhdGlvbic6IDAsXG4gICdhcmlhLXBsYWNlaG9sZGVyJzogMCxcbiAgJ2FyaWEtcHJlc3NlZCc6IDAsXG4gICdhcmlhLXJlYWRvbmx5JzogMCxcbiAgJ2FyaWEtcmVxdWlyZWQnOiAwLFxuICAnYXJpYS1zZWxlY3RlZCc6IDAsXG4gICdhcmlhLXNvcnQnOiAwLFxuICAnYXJpYS12YWx1ZW1heCc6IDAsXG4gICdhcmlhLXZhbHVlbWluJzogMCxcbiAgJ2FyaWEtdmFsdWVub3cnOiAwLFxuICAnYXJpYS12YWx1ZXRleHQnOiAwLFxuICAvLyBMaXZlIFJlZ2lvbiBBdHRyaWJ1dGVzXG4gICdhcmlhLWF0b21pYyc6IDAsXG4gICdhcmlhLWJ1c3knOiAwLFxuICAnYXJpYS1saXZlJzogMCxcbiAgJ2FyaWEtcmVsZXZhbnQnOiAwLFxuICAvLyBEcmFnLWFuZC1Ecm9wIEF0dHJpYnV0ZXNcbiAgJ2FyaWEtZHJvcGVmZmVjdCc6IDAsXG4gICdhcmlhLWdyYWJiZWQnOiAwLFxuICAvLyBSZWxhdGlvbnNoaXAgQXR0cmlidXRlc1xuICAnYXJpYS1hY3RpdmVkZXNjZW5kYW50JzogMCxcbiAgJ2FyaWEtY29sY291bnQnOiAwLFxuICAnYXJpYS1jb2xpbmRleCc6IDAsXG4gICdhcmlhLWNvbHNwYW4nOiAwLFxuICAnYXJpYS1jb250cm9scyc6IDAsXG4gICdhcmlhLWRlc2NyaWJlZGJ5JzogMCxcbiAgJ2FyaWEtZXJyb3JtZXNzYWdlJzogMCxcbiAgJ2FyaWEtZmxvd3RvJzogMCxcbiAgJ2FyaWEtbGFiZWxsZWRieSc6IDAsXG4gICdhcmlhLW93bnMnOiAwLFxuICAnYXJpYS1wb3NpbnNldCc6IDAsXG4gICdhcmlhLXJvd2NvdW50JzogMCxcbiAgJ2FyaWEtcm93aW5kZXgnOiAwLFxuICAnYXJpYS1yb3dzcGFuJzogMCxcbiAgJ2FyaWEtc2V0c2l6ZSc6IDBcbn07XG5cbnZhciB3YXJuZWRQcm9wZXJ0aWVzID0ge307XG52YXIgckFSSUEgPSBuZXcgUmVnRXhwKCdeKGFyaWEpLVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcbnZhciByQVJJQUNhbWVsID0gbmV3IFJlZ0V4cCgnXihhcmlhKVtBLVpdWycgKyBBVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpO1xudmFyIGhhc093blByb3BlcnR5JDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5KHRhZ05hbWUsIG5hbWUpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSQxLmNhbGwod2FybmVkUHJvcGVydGllcywgbmFtZSkgJiYgd2FybmVkUHJvcGVydGllc1tuYW1lXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHJBUklBQ2FtZWwudGVzdChuYW1lKSkge1xuICAgICAgdmFyIGFyaWFOYW1lID0gJ2FyaWEtJyArIG5hbWUuc2xpY2UoNCkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBjb3JyZWN0TmFtZSA9IGFyaWFQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGFyaWFOYW1lKSA/IGFyaWFOYW1lIDogbnVsbDsgLy8gSWYgdGhpcyBpcyBhbiBhcmlhLSogYXR0cmlidXRlLCBidXQgaXMgbm90IGxpc3RlZCBpbiB0aGUga25vd24gRE9NXG4gICAgICAvLyBET00gcHJvcGVydGllcywgdGhlbiBpdCBpcyBhbiBpbnZhbGlkIGFyaWEtKiBhdHRyaWJ1dGUuXG5cbiAgICAgIGlmIChjb3JyZWN0TmFtZSA9PSBudWxsKSB7XG4gICAgICAgIGVycm9yKCdJbnZhbGlkIEFSSUEgYXR0cmlidXRlIGAlc2AuIEFSSUEgYXR0cmlidXRlcyBmb2xsb3cgdGhlIHBhdHRlcm4gYXJpYS0qIGFuZCBtdXN0IGJlIGxvd2VyY2FzZS4nLCBuYW1lKTtcblxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IC8vIGFyaWEtKiBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsb3dlcmNhc2U7IHN1Z2dlc3QgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uLlxuXG5cbiAgICAgIGlmIChuYW1lICE9PSBjb3JyZWN0TmFtZSkge1xuICAgICAgICBlcnJvcignSW52YWxpZCBBUklBIGF0dHJpYnV0ZSBgJXNgLiBEaWQgeW91IG1lYW4gYCVzYD8nLCBuYW1lLCBjb3JyZWN0TmFtZSk7XG5cbiAgICAgICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyQVJJQS50ZXN0KG5hbWUpKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgc3RhbmRhcmROYW1lID0gYXJpYVByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID8gbG93ZXJDYXNlZE5hbWUgOiBudWxsOyAvLyBJZiB0aGlzIGlzIGFuIGFyaWEtKiBhdHRyaWJ1dGUsIGJ1dCBpcyBub3QgbGlzdGVkIGluIHRoZSBrbm93biBET01cbiAgICAgIC8vIERPTSBwcm9wZXJ0aWVzLCB0aGVuIGl0IGlzIGFuIGludmFsaWQgYXJpYS0qIGF0dHJpYnV0ZS5cblxuICAgICAgaWYgKHN0YW5kYXJkTmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIGFyaWEtKiBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsb3dlcmNhc2U7IHN1Z2dlc3QgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uLlxuXG5cbiAgICAgIGlmIChuYW1lICE9PSBzdGFuZGFyZE5hbWUpIHtcbiAgICAgICAgZXJyb3IoJ1Vua25vd24gQVJJQSBhdHRyaWJ1dGUgYCVzYC4gRGlkIHlvdSBtZWFuIGAlc2A/JywgbmFtZSwgc3RhbmRhcmROYW1lKTtcblxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHdhcm5JbnZhbGlkQVJJQVByb3BzKHR5cGUsIHByb3BzKSB7XG4gIHtcbiAgICB2YXIgaW52YWxpZFByb3BzID0gW107XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIHZhciBpc1ZhbGlkID0gdmFsaWRhdGVQcm9wZXJ0eSh0eXBlLCBrZXkpO1xuXG4gICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgaW52YWxpZFByb3BzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5rbm93blByb3BTdHJpbmcgPSBpbnZhbGlkUHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICByZXR1cm4gJ2AnICsgcHJvcCArICdgJztcbiAgICB9KS5qb2luKCcsICcpO1xuXG4gICAgaWYgKGludmFsaWRQcm9wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGVycm9yKCdJbnZhbGlkIGFyaWEgcHJvcCAlcyBvbiA8JXM+IHRhZy4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9pbnZhbGlkLWFyaWEtcHJvcHMnLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSk7XG4gICAgfSBlbHNlIGlmIChpbnZhbGlkUHJvcHMubGVuZ3RoID4gMSkge1xuICAgICAgZXJyb3IoJ0ludmFsaWQgYXJpYSBwcm9wcyAlcyBvbiA8JXM+IHRhZy4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9pbnZhbGlkLWFyaWEtcHJvcHMnLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydGllcyh0eXBlLCBwcm9wcykge1xuICBpZiAoaXNDdXN0b21Db21wb25lbnQodHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2FybkludmFsaWRBUklBUHJvcHModHlwZSwgcHJvcHMpO1xufVxuXG52YXIgZGlkV2FyblZhbHVlTnVsbCA9IGZhbHNlO1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0aWVzJDEodHlwZSwgcHJvcHMpIHtcbiAge1xuICAgIGlmICh0eXBlICE9PSAnaW5wdXQnICYmIHR5cGUgIT09ICd0ZXh0YXJlYScgJiYgdHlwZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMgIT0gbnVsbCAmJiBwcm9wcy52YWx1ZSA9PT0gbnVsbCAmJiAhZGlkV2FyblZhbHVlTnVsbCkge1xuICAgICAgZGlkV2FyblZhbHVlTnVsbCA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlID09PSAnc2VsZWN0JyAmJiBwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICBlcnJvcignYHZhbHVlYCBwcm9wIG9uIGAlc2Agc2hvdWxkIG5vdCBiZSBudWxsLiAnICsgJ0NvbnNpZGVyIHVzaW5nIGFuIGVtcHR5IGFycmF5IHdoZW4gYG11bHRpcGxlYCBpcyBzZXQgdG8gYHRydWVgICcgKyAndG8gY2xlYXIgdGhlIGNvbXBvbmVudCBvciBgdW5kZWZpbmVkYCBmb3IgdW5jb250cm9sbGVkIGNvbXBvbmVudHMuJywgdHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcignYHZhbHVlYCBwcm9wIG9uIGAlc2Agc2hvdWxkIG5vdCBiZSBudWxsLiAnICsgJ0NvbnNpZGVyIHVzaW5nIGFuIGVtcHR5IHN0cmluZyB0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgICcgKyAnZm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLicsIHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBXaGVuIGFkZGluZyBhdHRyaWJ1dGVzIHRvIHRoZSBIVE1MIG9yIFNWRyBhbGxvd2VkIGF0dHJpYnV0ZSBsaXN0LCBiZSBzdXJlIHRvXG4vLyBhbHNvIGFkZCB0aGVtIHRvIHRoaXMgbW9kdWxlIHRvIGVuc3VyZSBjYXNpbmcgYW5kIGluY29ycmVjdCBuYW1lXG4vLyB3YXJuaW5ncy5cbnZhciBwb3NzaWJsZVN0YW5kYXJkTmFtZXMgPSB7XG4gIC8vIEhUTUxcbiAgYWNjZXB0OiAnYWNjZXB0JyxcbiAgYWNjZXB0Y2hhcnNldDogJ2FjY2VwdENoYXJzZXQnLFxuICAnYWNjZXB0LWNoYXJzZXQnOiAnYWNjZXB0Q2hhcnNldCcsXG4gIGFjY2Vzc2tleTogJ2FjY2Vzc0tleScsXG4gIGFjdGlvbjogJ2FjdGlvbicsXG4gIGFsbG93ZnVsbHNjcmVlbjogJ2FsbG93RnVsbFNjcmVlbicsXG4gIGFsdDogJ2FsdCcsXG4gIGFzOiAnYXMnLFxuICBhc3luYzogJ2FzeW5jJyxcbiAgYXV0b2NhcGl0YWxpemU6ICdhdXRvQ2FwaXRhbGl6ZScsXG4gIGF1dG9jb21wbGV0ZTogJ2F1dG9Db21wbGV0ZScsXG4gIGF1dG9jb3JyZWN0OiAnYXV0b0NvcnJlY3QnLFxuICBhdXRvZm9jdXM6ICdhdXRvRm9jdXMnLFxuICBhdXRvcGxheTogJ2F1dG9QbGF5JyxcbiAgYXV0b3NhdmU6ICdhdXRvU2F2ZScsXG4gIGNhcHR1cmU6ICdjYXB0dXJlJyxcbiAgY2VsbHBhZGRpbmc6ICdjZWxsUGFkZGluZycsXG4gIGNlbGxzcGFjaW5nOiAnY2VsbFNwYWNpbmcnLFxuICBjaGFsbGVuZ2U6ICdjaGFsbGVuZ2UnLFxuICBjaGFyc2V0OiAnY2hhclNldCcsXG4gIGNoZWNrZWQ6ICdjaGVja2VkJyxcbiAgY2hpbGRyZW46ICdjaGlsZHJlbicsXG4gIGNpdGU6ICdjaXRlJyxcbiAgY2xhc3M6ICdjbGFzc05hbWUnLFxuICBjbGFzc2lkOiAnY2xhc3NJRCcsXG4gIGNsYXNzbmFtZTogJ2NsYXNzTmFtZScsXG4gIGNvbHM6ICdjb2xzJyxcbiAgY29sc3BhbjogJ2NvbFNwYW4nLFxuICBjb250ZW50OiAnY29udGVudCcsXG4gIGNvbnRlbnRlZGl0YWJsZTogJ2NvbnRlbnRFZGl0YWJsZScsXG4gIGNvbnRleHRtZW51OiAnY29udGV4dE1lbnUnLFxuICBjb250cm9sczogJ2NvbnRyb2xzJyxcbiAgY29udHJvbHNsaXN0OiAnY29udHJvbHNMaXN0JyxcbiAgY29vcmRzOiAnY29vcmRzJyxcbiAgY3Jvc3NvcmlnaW46ICdjcm9zc09yaWdpbicsXG4gIGRhbmdlcm91c2x5c2V0aW5uZXJodG1sOiAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnLFxuICBkYXRhOiAnZGF0YScsXG4gIGRhdGV0aW1lOiAnZGF0ZVRpbWUnLFxuICBkZWZhdWx0OiAnZGVmYXVsdCcsXG4gIGRlZmF1bHRjaGVja2VkOiAnZGVmYXVsdENoZWNrZWQnLFxuICBkZWZhdWx0dmFsdWU6ICdkZWZhdWx0VmFsdWUnLFxuICBkZWZlcjogJ2RlZmVyJyxcbiAgZGlyOiAnZGlyJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGRpc2FibGVwaWN0dXJlaW5waWN0dXJlOiAnZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUnLFxuICBkaXNhYmxlcmVtb3RlcGxheWJhY2s6ICdkaXNhYmxlUmVtb3RlUGxheWJhY2snLFxuICBkb3dubG9hZDogJ2Rvd25sb2FkJyxcbiAgZHJhZ2dhYmxlOiAnZHJhZ2dhYmxlJyxcbiAgZW5jdHlwZTogJ2VuY1R5cGUnLFxuICBlbnRlcmtleWhpbnQ6ICdlbnRlcktleUhpbnQnLFxuICBmb3I6ICdodG1sRm9yJyxcbiAgZm9ybTogJ2Zvcm0nLFxuICBmb3JtbWV0aG9kOiAnZm9ybU1ldGhvZCcsXG4gIGZvcm1hY3Rpb246ICdmb3JtQWN0aW9uJyxcbiAgZm9ybWVuY3R5cGU6ICdmb3JtRW5jVHlwZScsXG4gIGZvcm1ub3ZhbGlkYXRlOiAnZm9ybU5vVmFsaWRhdGUnLFxuICBmb3JtdGFyZ2V0OiAnZm9ybVRhcmdldCcsXG4gIGZyYW1lYm9yZGVyOiAnZnJhbWVCb3JkZXInLFxuICBoZWFkZXJzOiAnaGVhZGVycycsXG4gIGhlaWdodDogJ2hlaWdodCcsXG4gIGhpZGRlbjogJ2hpZGRlbicsXG4gIGhpZ2g6ICdoaWdoJyxcbiAgaHJlZjogJ2hyZWYnLFxuICBocmVmbGFuZzogJ2hyZWZMYW5nJyxcbiAgaHRtbGZvcjogJ2h0bWxGb3InLFxuICBodHRwZXF1aXY6ICdodHRwRXF1aXYnLFxuICAnaHR0cC1lcXVpdic6ICdodHRwRXF1aXYnLFxuICBpY29uOiAnaWNvbicsXG4gIGlkOiAnaWQnLFxuICBpbm5lcmh0bWw6ICdpbm5lckhUTUwnLFxuICBpbnB1dG1vZGU6ICdpbnB1dE1vZGUnLFxuICBpbnRlZ3JpdHk6ICdpbnRlZ3JpdHknLFxuICBpczogJ2lzJyxcbiAgaXRlbWlkOiAnaXRlbUlEJyxcbiAgaXRlbXByb3A6ICdpdGVtUHJvcCcsXG4gIGl0ZW1yZWY6ICdpdGVtUmVmJyxcbiAgaXRlbXNjb3BlOiAnaXRlbVNjb3BlJyxcbiAgaXRlbXR5cGU6ICdpdGVtVHlwZScsXG4gIGtleXBhcmFtczogJ2tleVBhcmFtcycsXG4gIGtleXR5cGU6ICdrZXlUeXBlJyxcbiAga2luZDogJ2tpbmQnLFxuICBsYWJlbDogJ2xhYmVsJyxcbiAgbGFuZzogJ2xhbmcnLFxuICBsaXN0OiAnbGlzdCcsXG4gIGxvb3A6ICdsb29wJyxcbiAgbG93OiAnbG93JyxcbiAgbWFuaWZlc3Q6ICdtYW5pZmVzdCcsXG4gIG1hcmdpbndpZHRoOiAnbWFyZ2luV2lkdGgnLFxuICBtYXJnaW5oZWlnaHQ6ICdtYXJnaW5IZWlnaHQnLFxuICBtYXg6ICdtYXgnLFxuICBtYXhsZW5ndGg6ICdtYXhMZW5ndGgnLFxuICBtZWRpYTogJ21lZGlhJyxcbiAgbWVkaWFncm91cDogJ21lZGlhR3JvdXAnLFxuICBtZXRob2Q6ICdtZXRob2QnLFxuICBtaW46ICdtaW4nLFxuICBtaW5sZW5ndGg6ICdtaW5MZW5ndGgnLFxuICBtdWx0aXBsZTogJ211bHRpcGxlJyxcbiAgbXV0ZWQ6ICdtdXRlZCcsXG4gIG5hbWU6ICduYW1lJyxcbiAgbm9tb2R1bGU6ICdub01vZHVsZScsXG4gIG5vbmNlOiAnbm9uY2UnLFxuICBub3ZhbGlkYXRlOiAnbm9WYWxpZGF0ZScsXG4gIG9wZW46ICdvcGVuJyxcbiAgb3B0aW11bTogJ29wdGltdW0nLFxuICBwYXR0ZXJuOiAncGF0dGVybicsXG4gIHBsYWNlaG9sZGVyOiAncGxhY2Vob2xkZXInLFxuICBwbGF5c2lubGluZTogJ3BsYXlzSW5saW5lJyxcbiAgcG9zdGVyOiAncG9zdGVyJyxcbiAgcHJlbG9hZDogJ3ByZWxvYWQnLFxuICBwcm9maWxlOiAncHJvZmlsZScsXG4gIHJhZGlvZ3JvdXA6ICdyYWRpb0dyb3VwJyxcbiAgcmVhZG9ubHk6ICdyZWFkT25seScsXG4gIHJlZmVycmVycG9saWN5OiAncmVmZXJyZXJQb2xpY3knLFxuICByZWw6ICdyZWwnLFxuICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgcmV2ZXJzZWQ6ICdyZXZlcnNlZCcsXG4gIHJvbGU6ICdyb2xlJyxcbiAgcm93czogJ3Jvd3MnLFxuICByb3dzcGFuOiAncm93U3BhbicsXG4gIHNhbmRib3g6ICdzYW5kYm94JyxcbiAgc2NvcGU6ICdzY29wZScsXG4gIHNjb3BlZDogJ3Njb3BlZCcsXG4gIHNjcm9sbGluZzogJ3Njcm9sbGluZycsXG4gIHNlYW1sZXNzOiAnc2VhbWxlc3MnLFxuICBzZWxlY3RlZDogJ3NlbGVjdGVkJyxcbiAgc2hhcGU6ICdzaGFwZScsXG4gIHNpemU6ICdzaXplJyxcbiAgc2l6ZXM6ICdzaXplcycsXG4gIHNwYW46ICdzcGFuJyxcbiAgc3BlbGxjaGVjazogJ3NwZWxsQ2hlY2snLFxuICBzcmM6ICdzcmMnLFxuICBzcmNkb2M6ICdzcmNEb2MnLFxuICBzcmNsYW5nOiAnc3JjTGFuZycsXG4gIHNyY3NldDogJ3NyY1NldCcsXG4gIHN0YXJ0OiAnc3RhcnQnLFxuICBzdGVwOiAnc3RlcCcsXG4gIHN0eWxlOiAnc3R5bGUnLFxuICBzdW1tYXJ5OiAnc3VtbWFyeScsXG4gIHRhYmluZGV4OiAndGFiSW5kZXgnLFxuICB0YXJnZXQ6ICd0YXJnZXQnLFxuICB0aXRsZTogJ3RpdGxlJyxcbiAgdHlwZTogJ3R5cGUnLFxuICB1c2VtYXA6ICd1c2VNYXAnLFxuICB2YWx1ZTogJ3ZhbHVlJyxcbiAgd2lkdGg6ICd3aWR0aCcsXG4gIHdtb2RlOiAnd21vZGUnLFxuICB3cmFwOiAnd3JhcCcsXG4gIC8vIFNWR1xuICBhYm91dDogJ2Fib3V0JyxcbiAgYWNjZW50aGVpZ2h0OiAnYWNjZW50SGVpZ2h0JyxcbiAgJ2FjY2VudC1oZWlnaHQnOiAnYWNjZW50SGVpZ2h0JyxcbiAgYWNjdW11bGF0ZTogJ2FjY3VtdWxhdGUnLFxuICBhZGRpdGl2ZTogJ2FkZGl0aXZlJyxcbiAgYWxpZ25tZW50YmFzZWxpbmU6ICdhbGlnbm1lbnRCYXNlbGluZScsXG4gICdhbGlnbm1lbnQtYmFzZWxpbmUnOiAnYWxpZ25tZW50QmFzZWxpbmUnLFxuICBhbGxvd3Jlb3JkZXI6ICdhbGxvd1Jlb3JkZXInLFxuICBhbHBoYWJldGljOiAnYWxwaGFiZXRpYycsXG4gIGFtcGxpdHVkZTogJ2FtcGxpdHVkZScsXG4gIGFyYWJpY2Zvcm06ICdhcmFiaWNGb3JtJyxcbiAgJ2FyYWJpYy1mb3JtJzogJ2FyYWJpY0Zvcm0nLFxuICBhc2NlbnQ6ICdhc2NlbnQnLFxuICBhdHRyaWJ1dGVuYW1lOiAnYXR0cmlidXRlTmFtZScsXG4gIGF0dHJpYnV0ZXR5cGU6ICdhdHRyaWJ1dGVUeXBlJyxcbiAgYXV0b3JldmVyc2U6ICdhdXRvUmV2ZXJzZScsXG4gIGF6aW11dGg6ICdhemltdXRoJyxcbiAgYmFzZWZyZXF1ZW5jeTogJ2Jhc2VGcmVxdWVuY3knLFxuICBiYXNlbGluZXNoaWZ0OiAnYmFzZWxpbmVTaGlmdCcsXG4gICdiYXNlbGluZS1zaGlmdCc6ICdiYXNlbGluZVNoaWZ0JyxcbiAgYmFzZXByb2ZpbGU6ICdiYXNlUHJvZmlsZScsXG4gIGJib3g6ICdiYm94JyxcbiAgYmVnaW46ICdiZWdpbicsXG4gIGJpYXM6ICdiaWFzJyxcbiAgYnk6ICdieScsXG4gIGNhbGNtb2RlOiAnY2FsY01vZGUnLFxuICBjYXBoZWlnaHQ6ICdjYXBIZWlnaHQnLFxuICAnY2FwLWhlaWdodCc6ICdjYXBIZWlnaHQnLFxuICBjbGlwOiAnY2xpcCcsXG4gIGNsaXBwYXRoOiAnY2xpcFBhdGgnLFxuICAnY2xpcC1wYXRoJzogJ2NsaXBQYXRoJyxcbiAgY2xpcHBhdGh1bml0czogJ2NsaXBQYXRoVW5pdHMnLFxuICBjbGlwcnVsZTogJ2NsaXBSdWxlJyxcbiAgJ2NsaXAtcnVsZSc6ICdjbGlwUnVsZScsXG4gIGNvbG9yOiAnY29sb3InLFxuICBjb2xvcmludGVycG9sYXRpb246ICdjb2xvckludGVycG9sYXRpb24nLFxuICAnY29sb3ItaW50ZXJwb2xhdGlvbic6ICdjb2xvckludGVycG9sYXRpb24nLFxuICBjb2xvcmludGVycG9sYXRpb25maWx0ZXJzOiAnY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycycsXG4gICdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnOiAnY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVycycsXG4gIGNvbG9ycHJvZmlsZTogJ2NvbG9yUHJvZmlsZScsXG4gICdjb2xvci1wcm9maWxlJzogJ2NvbG9yUHJvZmlsZScsXG4gIGNvbG9ycmVuZGVyaW5nOiAnY29sb3JSZW5kZXJpbmcnLFxuICAnY29sb3ItcmVuZGVyaW5nJzogJ2NvbG9yUmVuZGVyaW5nJyxcbiAgY29udGVudHNjcmlwdHR5cGU6ICdjb250ZW50U2NyaXB0VHlwZScsXG4gIGNvbnRlbnRzdHlsZXR5cGU6ICdjb250ZW50U3R5bGVUeXBlJyxcbiAgY3Vyc29yOiAnY3Vyc29yJyxcbiAgY3g6ICdjeCcsXG4gIGN5OiAnY3knLFxuICBkOiAnZCcsXG4gIGRhdGF0eXBlOiAnZGF0YXR5cGUnLFxuICBkZWNlbGVyYXRlOiAnZGVjZWxlcmF0ZScsXG4gIGRlc2NlbnQ6ICdkZXNjZW50JyxcbiAgZGlmZnVzZWNvbnN0YW50OiAnZGlmZnVzZUNvbnN0YW50JyxcbiAgZGlyZWN0aW9uOiAnZGlyZWN0aW9uJyxcbiAgZGlzcGxheTogJ2Rpc3BsYXknLFxuICBkaXZpc29yOiAnZGl2aXNvcicsXG4gIGRvbWluYW50YmFzZWxpbmU6ICdkb21pbmFudEJhc2VsaW5lJyxcbiAgJ2RvbWluYW50LWJhc2VsaW5lJzogJ2RvbWluYW50QmFzZWxpbmUnLFxuICBkdXI6ICdkdXInLFxuICBkeDogJ2R4JyxcbiAgZHk6ICdkeScsXG4gIGVkZ2Vtb2RlOiAnZWRnZU1vZGUnLFxuICBlbGV2YXRpb246ICdlbGV2YXRpb24nLFxuICBlbmFibGViYWNrZ3JvdW5kOiAnZW5hYmxlQmFja2dyb3VuZCcsXG4gICdlbmFibGUtYmFja2dyb3VuZCc6ICdlbmFibGVCYWNrZ3JvdW5kJyxcbiAgZW5kOiAnZW5kJyxcbiAgZXhwb25lbnQ6ICdleHBvbmVudCcsXG4gIGV4dGVybmFscmVzb3VyY2VzcmVxdWlyZWQ6ICdleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkJyxcbiAgZmlsbDogJ2ZpbGwnLFxuICBmaWxsb3BhY2l0eTogJ2ZpbGxPcGFjaXR5JyxcbiAgJ2ZpbGwtb3BhY2l0eSc6ICdmaWxsT3BhY2l0eScsXG4gIGZpbGxydWxlOiAnZmlsbFJ1bGUnLFxuICAnZmlsbC1ydWxlJzogJ2ZpbGxSdWxlJyxcbiAgZmlsdGVyOiAnZmlsdGVyJyxcbiAgZmlsdGVycmVzOiAnZmlsdGVyUmVzJyxcbiAgZmlsdGVydW5pdHM6ICdmaWx0ZXJVbml0cycsXG4gIGZsb29kb3BhY2l0eTogJ2Zsb29kT3BhY2l0eScsXG4gICdmbG9vZC1vcGFjaXR5JzogJ2Zsb29kT3BhY2l0eScsXG4gIGZsb29kY29sb3I6ICdmbG9vZENvbG9yJyxcbiAgJ2Zsb29kLWNvbG9yJzogJ2Zsb29kQ29sb3InLFxuICBmb2N1c2FibGU6ICdmb2N1c2FibGUnLFxuICBmb250ZmFtaWx5OiAnZm9udEZhbWlseScsXG4gICdmb250LWZhbWlseSc6ICdmb250RmFtaWx5JyxcbiAgZm9udHNpemU6ICdmb250U2l6ZScsXG4gICdmb250LXNpemUnOiAnZm9udFNpemUnLFxuICBmb250c2l6ZWFkanVzdDogJ2ZvbnRTaXplQWRqdXN0JyxcbiAgJ2ZvbnQtc2l6ZS1hZGp1c3QnOiAnZm9udFNpemVBZGp1c3QnLFxuICBmb250c3RyZXRjaDogJ2ZvbnRTdHJldGNoJyxcbiAgJ2ZvbnQtc3RyZXRjaCc6ICdmb250U3RyZXRjaCcsXG4gIGZvbnRzdHlsZTogJ2ZvbnRTdHlsZScsXG4gICdmb250LXN0eWxlJzogJ2ZvbnRTdHlsZScsXG4gIGZvbnR2YXJpYW50OiAnZm9udFZhcmlhbnQnLFxuICAnZm9udC12YXJpYW50JzogJ2ZvbnRWYXJpYW50JyxcbiAgZm9udHdlaWdodDogJ2ZvbnRXZWlnaHQnLFxuICAnZm9udC13ZWlnaHQnOiAnZm9udFdlaWdodCcsXG4gIGZvcm1hdDogJ2Zvcm1hdCcsXG4gIGZyb206ICdmcm9tJyxcbiAgZng6ICdmeCcsXG4gIGZ5OiAnZnknLFxuICBnMTogJ2cxJyxcbiAgZzI6ICdnMicsXG4gIGdseXBobmFtZTogJ2dseXBoTmFtZScsXG4gICdnbHlwaC1uYW1lJzogJ2dseXBoTmFtZScsXG4gIGdseXBob3JpZW50YXRpb25ob3Jpem9udGFsOiAnZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWwnLFxuICAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCc6ICdnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbCcsXG4gIGdseXBob3JpZW50YXRpb252ZXJ0aWNhbDogJ2dseXBoT3JpZW50YXRpb25WZXJ0aWNhbCcsXG4gICdnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCc6ICdnbHlwaE9yaWVudGF0aW9uVmVydGljYWwnLFxuICBnbHlwaHJlZjogJ2dseXBoUmVmJyxcbiAgZ3JhZGllbnR0cmFuc2Zvcm06ICdncmFkaWVudFRyYW5zZm9ybScsXG4gIGdyYWRpZW50dW5pdHM6ICdncmFkaWVudFVuaXRzJyxcbiAgaGFuZ2luZzogJ2hhbmdpbmcnLFxuICBob3JpemFkdng6ICdob3JpekFkdlgnLFxuICAnaG9yaXotYWR2LXgnOiAnaG9yaXpBZHZYJyxcbiAgaG9yaXpvcmlnaW54OiAnaG9yaXpPcmlnaW5YJyxcbiAgJ2hvcml6LW9yaWdpbi14JzogJ2hvcml6T3JpZ2luWCcsXG4gIGlkZW9ncmFwaGljOiAnaWRlb2dyYXBoaWMnLFxuICBpbWFnZXJlbmRlcmluZzogJ2ltYWdlUmVuZGVyaW5nJyxcbiAgJ2ltYWdlLXJlbmRlcmluZyc6ICdpbWFnZVJlbmRlcmluZycsXG4gIGluMjogJ2luMicsXG4gIGluOiAnaW4nLFxuICBpbmxpc3Q6ICdpbmxpc3QnLFxuICBpbnRlcmNlcHQ6ICdpbnRlcmNlcHQnLFxuICBrMTogJ2sxJyxcbiAgazI6ICdrMicsXG4gIGszOiAnazMnLFxuICBrNDogJ2s0JyxcbiAgazogJ2snLFxuICBrZXJuZWxtYXRyaXg6ICdrZXJuZWxNYXRyaXgnLFxuICBrZXJuZWx1bml0bGVuZ3RoOiAna2VybmVsVW5pdExlbmd0aCcsXG4gIGtlcm5pbmc6ICdrZXJuaW5nJyxcbiAga2V5cG9pbnRzOiAna2V5UG9pbnRzJyxcbiAga2V5c3BsaW5lczogJ2tleVNwbGluZXMnLFxuICBrZXl0aW1lczogJ2tleVRpbWVzJyxcbiAgbGVuZ3RoYWRqdXN0OiAnbGVuZ3RoQWRqdXN0JyxcbiAgbGV0dGVyc3BhY2luZzogJ2xldHRlclNwYWNpbmcnLFxuICAnbGV0dGVyLXNwYWNpbmcnOiAnbGV0dGVyU3BhY2luZycsXG4gIGxpZ2h0aW5nY29sb3I6ICdsaWdodGluZ0NvbG9yJyxcbiAgJ2xpZ2h0aW5nLWNvbG9yJzogJ2xpZ2h0aW5nQ29sb3InLFxuICBsaW1pdGluZ2NvbmVhbmdsZTogJ2xpbWl0aW5nQ29uZUFuZ2xlJyxcbiAgbG9jYWw6ICdsb2NhbCcsXG4gIG1hcmtlcmVuZDogJ21hcmtlckVuZCcsXG4gICdtYXJrZXItZW5kJzogJ21hcmtlckVuZCcsXG4gIG1hcmtlcmhlaWdodDogJ21hcmtlckhlaWdodCcsXG4gIG1hcmtlcm1pZDogJ21hcmtlck1pZCcsXG4gICdtYXJrZXItbWlkJzogJ21hcmtlck1pZCcsXG4gIG1hcmtlcnN0YXJ0OiAnbWFya2VyU3RhcnQnLFxuICAnbWFya2VyLXN0YXJ0JzogJ21hcmtlclN0YXJ0JyxcbiAgbWFya2VydW5pdHM6ICdtYXJrZXJVbml0cycsXG4gIG1hcmtlcndpZHRoOiAnbWFya2VyV2lkdGgnLFxuICBtYXNrOiAnbWFzaycsXG4gIG1hc2tjb250ZW50dW5pdHM6ICdtYXNrQ29udGVudFVuaXRzJyxcbiAgbWFza3VuaXRzOiAnbWFza1VuaXRzJyxcbiAgbWF0aGVtYXRpY2FsOiAnbWF0aGVtYXRpY2FsJyxcbiAgbW9kZTogJ21vZGUnLFxuICBudW1vY3RhdmVzOiAnbnVtT2N0YXZlcycsXG4gIG9mZnNldDogJ29mZnNldCcsXG4gIG9wYWNpdHk6ICdvcGFjaXR5JyxcbiAgb3BlcmF0b3I6ICdvcGVyYXRvcicsXG4gIG9yZGVyOiAnb3JkZXInLFxuICBvcmllbnQ6ICdvcmllbnQnLFxuICBvcmllbnRhdGlvbjogJ29yaWVudGF0aW9uJyxcbiAgb3JpZ2luOiAnb3JpZ2luJyxcbiAgb3ZlcmZsb3c6ICdvdmVyZmxvdycsXG4gIG92ZXJsaW5lcG9zaXRpb246ICdvdmVybGluZVBvc2l0aW9uJyxcbiAgJ292ZXJsaW5lLXBvc2l0aW9uJzogJ292ZXJsaW5lUG9zaXRpb24nLFxuICBvdmVybGluZXRoaWNrbmVzczogJ292ZXJsaW5lVGhpY2tuZXNzJyxcbiAgJ292ZXJsaW5lLXRoaWNrbmVzcyc6ICdvdmVybGluZVRoaWNrbmVzcycsXG4gIHBhaW50b3JkZXI6ICdwYWludE9yZGVyJyxcbiAgJ3BhaW50LW9yZGVyJzogJ3BhaW50T3JkZXInLFxuICBwYW5vc2UxOiAncGFub3NlMScsXG4gICdwYW5vc2UtMSc6ICdwYW5vc2UxJyxcbiAgcGF0aGxlbmd0aDogJ3BhdGhMZW5ndGgnLFxuICBwYXR0ZXJuY29udGVudHVuaXRzOiAncGF0dGVybkNvbnRlbnRVbml0cycsXG4gIHBhdHRlcm50cmFuc2Zvcm06ICdwYXR0ZXJuVHJhbnNmb3JtJyxcbiAgcGF0dGVybnVuaXRzOiAncGF0dGVyblVuaXRzJyxcbiAgcG9pbnRlcmV2ZW50czogJ3BvaW50ZXJFdmVudHMnLFxuICAncG9pbnRlci1ldmVudHMnOiAncG9pbnRlckV2ZW50cycsXG4gIHBvaW50czogJ3BvaW50cycsXG4gIHBvaW50c2F0eDogJ3BvaW50c0F0WCcsXG4gIHBvaW50c2F0eTogJ3BvaW50c0F0WScsXG4gIHBvaW50c2F0ejogJ3BvaW50c0F0WicsXG4gIHByZWZpeDogJ3ByZWZpeCcsXG4gIHByZXNlcnZlYWxwaGE6ICdwcmVzZXJ2ZUFscGhhJyxcbiAgcHJlc2VydmVhc3BlY3RyYXRpbzogJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLFxuICBwcmltaXRpdmV1bml0czogJ3ByaW1pdGl2ZVVuaXRzJyxcbiAgcHJvcGVydHk6ICdwcm9wZXJ0eScsXG4gIHI6ICdyJyxcbiAgcmFkaXVzOiAncmFkaXVzJyxcbiAgcmVmeDogJ3JlZlgnLFxuICByZWZ5OiAncmVmWScsXG4gIHJlbmRlcmluZ2ludGVudDogJ3JlbmRlcmluZ0ludGVudCcsXG4gICdyZW5kZXJpbmctaW50ZW50JzogJ3JlbmRlcmluZ0ludGVudCcsXG4gIHJlcGVhdGNvdW50OiAncmVwZWF0Q291bnQnLFxuICByZXBlYXRkdXI6ICdyZXBlYXREdXInLFxuICByZXF1aXJlZGV4dGVuc2lvbnM6ICdyZXF1aXJlZEV4dGVuc2lvbnMnLFxuICByZXF1aXJlZGZlYXR1cmVzOiAncmVxdWlyZWRGZWF0dXJlcycsXG4gIHJlc291cmNlOiAncmVzb3VyY2UnLFxuICByZXN0YXJ0OiAncmVzdGFydCcsXG4gIHJlc3VsdDogJ3Jlc3VsdCcsXG4gIHJlc3VsdHM6ICdyZXN1bHRzJyxcbiAgcm90YXRlOiAncm90YXRlJyxcbiAgcng6ICdyeCcsXG4gIHJ5OiAncnknLFxuICBzY2FsZTogJ3NjYWxlJyxcbiAgc2VjdXJpdHk6ICdzZWN1cml0eScsXG4gIHNlZWQ6ICdzZWVkJyxcbiAgc2hhcGVyZW5kZXJpbmc6ICdzaGFwZVJlbmRlcmluZycsXG4gICdzaGFwZS1yZW5kZXJpbmcnOiAnc2hhcGVSZW5kZXJpbmcnLFxuICBzbG9wZTogJ3Nsb3BlJyxcbiAgc3BhY2luZzogJ3NwYWNpbmcnLFxuICBzcGVjdWxhcmNvbnN0YW50OiAnc3BlY3VsYXJDb25zdGFudCcsXG4gIHNwZWN1bGFyZXhwb25lbnQ6ICdzcGVjdWxhckV4cG9uZW50JyxcbiAgc3BlZWQ6ICdzcGVlZCcsXG4gIHNwcmVhZG1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG4gIHN0YXJ0b2Zmc2V0OiAnc3RhcnRPZmZzZXQnLFxuICBzdGRkZXZpYXRpb246ICdzdGREZXZpYXRpb24nLFxuICBzdGVtaDogJ3N0ZW1oJyxcbiAgc3RlbXY6ICdzdGVtdicsXG4gIHN0aXRjaHRpbGVzOiAnc3RpdGNoVGlsZXMnLFxuICBzdG9wY29sb3I6ICdzdG9wQ29sb3InLFxuICAnc3RvcC1jb2xvcic6ICdzdG9wQ29sb3InLFxuICBzdG9wb3BhY2l0eTogJ3N0b3BPcGFjaXR5JyxcbiAgJ3N0b3Atb3BhY2l0eSc6ICdzdG9wT3BhY2l0eScsXG4gIHN0cmlrZXRocm91Z2hwb3NpdGlvbjogJ3N0cmlrZXRocm91Z2hQb3NpdGlvbicsXG4gICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJzogJ3N0cmlrZXRocm91Z2hQb3NpdGlvbicsXG4gIHN0cmlrZXRocm91Z2h0aGlja25lc3M6ICdzdHJpa2V0aHJvdWdoVGhpY2tuZXNzJyxcbiAgJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJzogJ3N0cmlrZXRocm91Z2hUaGlja25lc3MnLFxuICBzdHJpbmc6ICdzdHJpbmcnLFxuICBzdHJva2U6ICdzdHJva2UnLFxuICBzdHJva2VkYXNoYXJyYXk6ICdzdHJva2VEYXNoYXJyYXknLFxuICAnc3Ryb2tlLWRhc2hhcnJheSc6ICdzdHJva2VEYXNoYXJyYXknLFxuICBzdHJva2VkYXNob2Zmc2V0OiAnc3Ryb2tlRGFzaG9mZnNldCcsXG4gICdzdHJva2UtZGFzaG9mZnNldCc6ICdzdHJva2VEYXNob2Zmc2V0JyxcbiAgc3Ryb2tlbGluZWNhcDogJ3N0cm9rZUxpbmVjYXAnLFxuICAnc3Ryb2tlLWxpbmVjYXAnOiAnc3Ryb2tlTGluZWNhcCcsXG4gIHN0cm9rZWxpbmVqb2luOiAnc3Ryb2tlTGluZWpvaW4nLFxuICAnc3Ryb2tlLWxpbmVqb2luJzogJ3N0cm9rZUxpbmVqb2luJyxcbiAgc3Ryb2tlbWl0ZXJsaW1pdDogJ3N0cm9rZU1pdGVybGltaXQnLFxuICAnc3Ryb2tlLW1pdGVybGltaXQnOiAnc3Ryb2tlTWl0ZXJsaW1pdCcsXG4gIHN0cm9rZXdpZHRoOiAnc3Ryb2tlV2lkdGgnLFxuICAnc3Ryb2tlLXdpZHRoJzogJ3N0cm9rZVdpZHRoJyxcbiAgc3Ryb2tlb3BhY2l0eTogJ3N0cm9rZU9wYWNpdHknLFxuICAnc3Ryb2tlLW9wYWNpdHknOiAnc3Ryb2tlT3BhY2l0eScsXG4gIHN1cHByZXNzY29udGVudGVkaXRhYmxld2FybmluZzogJ3N1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZycsXG4gIHN1cHByZXNzaHlkcmF0aW9ud2FybmluZzogJ3N1cHByZXNzSHlkcmF0aW9uV2FybmluZycsXG4gIHN1cmZhY2VzY2FsZTogJ3N1cmZhY2VTY2FsZScsXG4gIHN5c3RlbWxhbmd1YWdlOiAnc3lzdGVtTGFuZ3VhZ2UnLFxuICB0YWJsZXZhbHVlczogJ3RhYmxlVmFsdWVzJyxcbiAgdGFyZ2V0eDogJ3RhcmdldFgnLFxuICB0YXJnZXR5OiAndGFyZ2V0WScsXG4gIHRleHRhbmNob3I6ICd0ZXh0QW5jaG9yJyxcbiAgJ3RleHQtYW5jaG9yJzogJ3RleHRBbmNob3InLFxuICB0ZXh0ZGVjb3JhdGlvbjogJ3RleHREZWNvcmF0aW9uJyxcbiAgJ3RleHQtZGVjb3JhdGlvbic6ICd0ZXh0RGVjb3JhdGlvbicsXG4gIHRleHRsZW5ndGg6ICd0ZXh0TGVuZ3RoJyxcbiAgdGV4dHJlbmRlcmluZzogJ3RleHRSZW5kZXJpbmcnLFxuICAndGV4dC1yZW5kZXJpbmcnOiAndGV4dFJlbmRlcmluZycsXG4gIHRvOiAndG8nLFxuICB0cmFuc2Zvcm06ICd0cmFuc2Zvcm0nLFxuICB0eXBlb2Y6ICd0eXBlb2YnLFxuICB1MTogJ3UxJyxcbiAgdTI6ICd1MicsXG4gIHVuZGVybGluZXBvc2l0aW9uOiAndW5kZXJsaW5lUG9zaXRpb24nLFxuICAndW5kZXJsaW5lLXBvc2l0aW9uJzogJ3VuZGVybGluZVBvc2l0aW9uJyxcbiAgdW5kZXJsaW5ldGhpY2tuZXNzOiAndW5kZXJsaW5lVGhpY2tuZXNzJyxcbiAgJ3VuZGVybGluZS10aGlja25lc3MnOiAndW5kZXJsaW5lVGhpY2tuZXNzJyxcbiAgdW5pY29kZTogJ3VuaWNvZGUnLFxuICB1bmljb2RlYmlkaTogJ3VuaWNvZGVCaWRpJyxcbiAgJ3VuaWNvZGUtYmlkaSc6ICd1bmljb2RlQmlkaScsXG4gIHVuaWNvZGVyYW5nZTogJ3VuaWNvZGVSYW5nZScsXG4gICd1bmljb2RlLXJhbmdlJzogJ3VuaWNvZGVSYW5nZScsXG4gIHVuaXRzcGVyZW06ICd1bml0c1BlckVtJyxcbiAgJ3VuaXRzLXBlci1lbSc6ICd1bml0c1BlckVtJyxcbiAgdW5zZWxlY3RhYmxlOiAndW5zZWxlY3RhYmxlJyxcbiAgdmFscGhhYmV0aWM6ICd2QWxwaGFiZXRpYycsXG4gICd2LWFscGhhYmV0aWMnOiAndkFscGhhYmV0aWMnLFxuICB2YWx1ZXM6ICd2YWx1ZXMnLFxuICB2ZWN0b3JlZmZlY3Q6ICd2ZWN0b3JFZmZlY3QnLFxuICAndmVjdG9yLWVmZmVjdCc6ICd2ZWN0b3JFZmZlY3QnLFxuICB2ZXJzaW9uOiAndmVyc2lvbicsXG4gIHZlcnRhZHZ5OiAndmVydEFkdlknLFxuICAndmVydC1hZHYteSc6ICd2ZXJ0QWR2WScsXG4gIHZlcnRvcmlnaW54OiAndmVydE9yaWdpblgnLFxuICAndmVydC1vcmlnaW4teCc6ICd2ZXJ0T3JpZ2luWCcsXG4gIHZlcnRvcmlnaW55OiAndmVydE9yaWdpblknLFxuICAndmVydC1vcmlnaW4teSc6ICd2ZXJ0T3JpZ2luWScsXG4gIHZoYW5naW5nOiAndkhhbmdpbmcnLFxuICAndi1oYW5naW5nJzogJ3ZIYW5naW5nJyxcbiAgdmlkZW9ncmFwaGljOiAndklkZW9ncmFwaGljJyxcbiAgJ3YtaWRlb2dyYXBoaWMnOiAndklkZW9ncmFwaGljJyxcbiAgdmlld2JveDogJ3ZpZXdCb3gnLFxuICB2aWV3dGFyZ2V0OiAndmlld1RhcmdldCcsXG4gIHZpc2liaWxpdHk6ICd2aXNpYmlsaXR5JyxcbiAgdm1hdGhlbWF0aWNhbDogJ3ZNYXRoZW1hdGljYWwnLFxuICAndi1tYXRoZW1hdGljYWwnOiAndk1hdGhlbWF0aWNhbCcsXG4gIHZvY2FiOiAndm9jYWInLFxuICB3aWR0aHM6ICd3aWR0aHMnLFxuICB3b3Jkc3BhY2luZzogJ3dvcmRTcGFjaW5nJyxcbiAgJ3dvcmQtc3BhY2luZyc6ICd3b3JkU3BhY2luZycsXG4gIHdyaXRpbmdtb2RlOiAnd3JpdGluZ01vZGUnLFxuICAnd3JpdGluZy1tb2RlJzogJ3dyaXRpbmdNb2RlJyxcbiAgeDE6ICd4MScsXG4gIHgyOiAneDInLFxuICB4OiAneCcsXG4gIHhjaGFubmVsc2VsZWN0b3I6ICd4Q2hhbm5lbFNlbGVjdG9yJyxcbiAgeGhlaWdodDogJ3hIZWlnaHQnLFxuICAneC1oZWlnaHQnOiAneEhlaWdodCcsXG4gIHhsaW5rYWN0dWF0ZTogJ3hsaW5rQWN0dWF0ZScsXG4gICd4bGluazphY3R1YXRlJzogJ3hsaW5rQWN0dWF0ZScsXG4gIHhsaW5rYXJjcm9sZTogJ3hsaW5rQXJjcm9sZScsXG4gICd4bGluazphcmNyb2xlJzogJ3hsaW5rQXJjcm9sZScsXG4gIHhsaW5raHJlZjogJ3hsaW5rSHJlZicsXG4gICd4bGluazpocmVmJzogJ3hsaW5rSHJlZicsXG4gIHhsaW5rcm9sZTogJ3hsaW5rUm9sZScsXG4gICd4bGluazpyb2xlJzogJ3hsaW5rUm9sZScsXG4gIHhsaW5rc2hvdzogJ3hsaW5rU2hvdycsXG4gICd4bGluazpzaG93JzogJ3hsaW5rU2hvdycsXG4gIHhsaW5rdGl0bGU6ICd4bGlua1RpdGxlJyxcbiAgJ3hsaW5rOnRpdGxlJzogJ3hsaW5rVGl0bGUnLFxuICB4bGlua3R5cGU6ICd4bGlua1R5cGUnLFxuICAneGxpbms6dHlwZSc6ICd4bGlua1R5cGUnLFxuICB4bWxiYXNlOiAneG1sQmFzZScsXG4gICd4bWw6YmFzZSc6ICd4bWxCYXNlJyxcbiAgeG1sbGFuZzogJ3htbExhbmcnLFxuICAneG1sOmxhbmcnOiAneG1sTGFuZycsXG4gIHhtbG5zOiAneG1sbnMnLFxuICAneG1sOnNwYWNlJzogJ3htbFNwYWNlJyxcbiAgeG1sbnN4bGluazogJ3htbG5zWGxpbmsnLFxuICAneG1sbnM6eGxpbmsnOiAneG1sbnNYbGluaycsXG4gIHhtbHNwYWNlOiAneG1sU3BhY2UnLFxuICB5MTogJ3kxJyxcbiAgeTI6ICd5MicsXG4gIHk6ICd5JyxcbiAgeWNoYW5uZWxzZWxlY3RvcjogJ3lDaGFubmVsU2VsZWN0b3InLFxuICB6OiAneicsXG4gIHpvb21hbmRwYW46ICd6b29tQW5kUGFuJ1xufTtcblxudmFyIHZhbGlkYXRlUHJvcGVydHkkMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHZhciB3YXJuZWRQcm9wZXJ0aWVzJDEgPSB7fTtcbiAgdmFyIF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gIHZhciBFVkVOVF9OQU1FX1JFR0VYID0gL15vbi4vO1xuICB2YXIgSU5WQUxJRF9FVkVOVF9OQU1FX1JFR0VYID0gL15vblteQS1aXS87XG4gIHZhciByQVJJQSQxID0gbmV3IFJlZ0V4cCgnXihhcmlhKS1bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG4gIHZhciByQVJJQUNhbWVsJDEgPSBuZXcgUmVnRXhwKCdeKGFyaWEpW0EtWl1bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG5cbiAgdmFsaWRhdGVQcm9wZXJ0eSQxID0gZnVuY3Rpb24gKHRhZ05hbWUsIG5hbWUsIHZhbHVlLCBldmVudFJlZ2lzdHJ5KSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHdhcm5lZFByb3BlcnRpZXMkMSwgbmFtZSkgJiYgd2FybmVkUHJvcGVydGllcyQxW25hbWVdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAobG93ZXJDYXNlZE5hbWUgPT09ICdvbmZvY3VzaW4nIHx8IGxvd2VyQ2FzZWROYW1lID09PSAnb25mb2N1c291dCcpIHtcbiAgICAgIGVycm9yKCdSZWFjdCB1c2VzIG9uRm9jdXMgYW5kIG9uQmx1ciBpbnN0ZWFkIG9mIG9uRm9jdXNJbiBhbmQgb25Gb2N1c091dC4gJyArICdBbGwgUmVhY3QgZXZlbnRzIGFyZSBub3JtYWxpemVkIHRvIGJ1YmJsZSwgc28gb25Gb2N1c0luIGFuZCBvbkZvY3VzT3V0ICcgKyAnYXJlIG5vdCBuZWVkZWQvc3VwcG9ydGVkIGJ5IFJlYWN0LicpO1xuXG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyBXZSBjYW4ndCByZWx5IG9uIHRoZSBldmVudCBzeXN0ZW0gYmVpbmcgaW5qZWN0ZWQgb24gdGhlIHNlcnZlci5cblxuXG4gICAgaWYgKGV2ZW50UmVnaXN0cnkgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMgPSBldmVudFJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMsXG4gICAgICAgICAgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyA9IGV2ZW50UmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lcztcblxuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgPyBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzW2xvd2VyQ2FzZWROYW1lXSA6IG51bGw7XG5cbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lICE9IG51bGwpIHtcbiAgICAgICAgZXJyb3IoJ0ludmFsaWQgZXZlbnQgaGFuZGxlciBwcm9wZXJ0eSBgJXNgLiBEaWQgeW91IG1lYW4gYCVzYD8nLCBuYW1lLCByZWdpc3RyYXRpb25OYW1lKTtcblxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKEVWRU5UX05BTUVfUkVHRVgudGVzdChuYW1lKSkge1xuICAgICAgICBlcnJvcignVW5rbm93biBldmVudCBoYW5kbGVyIHByb3BlcnR5IGAlc2AuIEl0IHdpbGwgYmUgaWdub3JlZC4nLCBuYW1lKTtcblxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEVWRU5UX05BTUVfUkVHRVgudGVzdChuYW1lKSkge1xuICAgICAgLy8gSWYgbm8gZXZlbnQgcGx1Z2lucyBoYXZlIGJlZW4gaW5qZWN0ZWQsIHdlIGFyZSBpbiBhIHNlcnZlciBlbnZpcm9ubWVudC5cbiAgICAgIC8vIFNvIHdlIGNhbid0IHRlbGwgaWYgdGhlIGV2ZW50IG5hbWUgaXMgY29ycmVjdCBmb3Igc3VyZSwgYnV0IHdlIGNhbiBmaWx0ZXJcbiAgICAgIC8vIG91dCBrbm93biBiYWQgb25lcyBsaWtlIGBvbmNsaWNrYC4gV2UgY2FuJ3Qgc3VnZ2VzdCBhIHNwZWNpZmljIHJlcGxhY2VtZW50IHRob3VnaC5cbiAgICAgIGlmIChJTlZBTElEX0VWRU5UX05BTUVfUkVHRVgudGVzdChuYW1lKSkge1xuICAgICAgICBlcnJvcignSW52YWxpZCBldmVudCBoYW5kbGVyIHByb3BlcnR5IGAlc2AuICcgKyAnUmVhY3QgZXZlbnRzIHVzZSB0aGUgY2FtZWxDYXNlIG5hbWluZyBjb252ZW50aW9uLCBmb3IgZXhhbXBsZSBgb25DbGlja2AuJywgbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIExldCB0aGUgQVJJQSBhdHRyaWJ1dGUgaG9vayB2YWxpZGF0ZSBBUklBIGF0dHJpYnV0ZXNcblxuXG4gICAgaWYgKHJBUklBJDEudGVzdChuYW1lKSB8fCByQVJJQUNhbWVsJDEudGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGxvd2VyQ2FzZWROYW1lID09PSAnaW5uZXJodG1sJykge1xuICAgICAgZXJyb3IoJ0RpcmVjdGx5IHNldHRpbmcgcHJvcGVydHkgYGlubmVySFRNTGAgaXMgbm90IHBlcm1pdHRlZC4gJyArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiwgbG9va3VwIGRvY3VtZW50YXRpb24gb24gYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKTtcblxuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChsb3dlckNhc2VkTmFtZSA9PT0gJ2FyaWEnKSB7XG4gICAgICBlcnJvcignVGhlIGBhcmlhYCBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgZm9yIGZ1dHVyZSB1c2UgaW4gUmVhY3QuICcgKyAnUGFzcyBpbmRpdmlkdWFsIGBhcmlhLWAgYXR0cmlidXRlcyBpbnN0ZWFkLicpO1xuXG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGxvd2VyQ2FzZWROYW1lID09PSAnaXMnICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgZXJyb3IoJ1JlY2VpdmVkIGEgYCVzYCBmb3IgYSBzdHJpbmcgYXR0cmlidXRlIGBpc2AuIElmIHRoaXMgaXMgZXhwZWN0ZWQsIGNhc3QgJyArICd0aGUgdmFsdWUgdG8gYSBzdHJpbmcuJywgdHlwZW9mIHZhbHVlKTtcblxuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbHVlKSkge1xuICAgICAgZXJyb3IoJ1JlY2VpdmVkIE5hTiBmb3IgdGhlIGAlc2AgYXR0cmlidXRlLiBJZiB0aGlzIGlzIGV4cGVjdGVkLCBjYXN0ICcgKyAndGhlIHZhbHVlIHRvIGEgc3RyaW5nLicsIG5hbWUpO1xuXG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHByb3BlcnR5SW5mbyA9IGdldFByb3BlcnR5SW5mbyhuYW1lKTtcbiAgICB2YXIgaXNSZXNlcnZlZCA9IHByb3BlcnR5SW5mbyAhPT0gbnVsbCAmJiBwcm9wZXJ0eUluZm8udHlwZSA9PT0gUkVTRVJWRUQ7IC8vIEtub3duIGF0dHJpYnV0ZXMgc2hvdWxkIG1hdGNoIHRoZSBjYXNpbmcgc3BlY2lmaWVkIGluIHRoZSBwcm9wZXJ0eSBjb25maWcuXG5cbiAgICBpZiAocG9zc2libGVTdGFuZGFyZE5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSkge1xuICAgICAgdmFyIHN0YW5kYXJkTmFtZSA9IHBvc3NpYmxlU3RhbmRhcmROYW1lc1tsb3dlckNhc2VkTmFtZV07XG5cbiAgICAgIGlmIChzdGFuZGFyZE5hbWUgIT09IG5hbWUpIHtcbiAgICAgICAgZXJyb3IoJ0ludmFsaWQgRE9NIHByb3BlcnR5IGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPycsIG5hbWUsIHN0YW5kYXJkTmFtZSk7XG5cbiAgICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZCAmJiBuYW1lICE9PSBsb3dlckNhc2VkTmFtZSkge1xuICAgICAgLy8gVW5rbm93biBhdHRyaWJ1dGVzIHNob3VsZCBoYXZlIGxvd2VyY2FzZSBjYXNpbmcgc2luY2UgdGhhdCdzIGhvdyB0aGV5XG4gICAgICAvLyB3aWxsIGJlIGNhc2VkIGFueXdheSB3aXRoIHNlcnZlciByZW5kZXJpbmcuXG4gICAgICBlcnJvcignUmVhY3QgZG9lcyBub3QgcmVjb2duaXplIHRoZSBgJXNgIHByb3Agb24gYSBET00gZWxlbWVudC4gSWYgeW91ICcgKyAnaW50ZW50aW9uYWxseSB3YW50IGl0IHRvIGFwcGVhciBpbiB0aGUgRE9NIGFzIGEgY3VzdG9tICcgKyAnYXR0cmlidXRlLCBzcGVsbCBpdCBhcyBsb3dlcmNhc2UgYCVzYCBpbnN0ZWFkLiAnICsgJ0lmIHlvdSBhY2NpZGVudGFsbHkgcGFzc2VkIGl0IGZyb20gYSBwYXJlbnQgY29tcG9uZW50LCByZW1vdmUgJyArICdpdCBmcm9tIHRoZSBET00gZWxlbWVudC4nLCBuYW1lLCBsb3dlckNhc2VkTmFtZSk7XG5cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgJiYgc2hvdWxkUmVtb3ZlQXR0cmlidXRlV2l0aFdhcm5pbmcobmFtZSwgdmFsdWUsIHByb3BlcnR5SW5mbywgZmFsc2UpKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZXJyb3IoJ1JlY2VpdmVkIGAlc2AgZm9yIGEgbm9uLWJvb2xlYW4gYXR0cmlidXRlIGAlc2AuXFxuXFxuJyArICdJZiB5b3Ugd2FudCB0byB3cml0ZSBpdCB0byB0aGUgRE9NLCBwYXNzIGEgc3RyaW5nIGluc3RlYWQ6ICcgKyAnJXM9XCIlc1wiIG9yICVzPXt2YWx1ZS50b1N0cmluZygpfS4nLCB2YWx1ZSwgbmFtZSwgbmFtZSwgdmFsdWUsIG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3IoJ1JlY2VpdmVkIGAlc2AgZm9yIGEgbm9uLWJvb2xlYW4gYXR0cmlidXRlIGAlc2AuXFxuXFxuJyArICdJZiB5b3Ugd2FudCB0byB3cml0ZSBpdCB0byB0aGUgRE9NLCBwYXNzIGEgc3RyaW5nIGluc3RlYWQ6ICcgKyAnJXM9XCIlc1wiIG9yICVzPXt2YWx1ZS50b1N0cmluZygpfS5cXG5cXG4nICsgJ0lmIHlvdSB1c2VkIHRvIGNvbmRpdGlvbmFsbHkgb21pdCBpdCB3aXRoICVzPXtjb25kaXRpb24gJiYgdmFsdWV9LCAnICsgJ3Bhc3MgJXM9e2NvbmRpdGlvbiA/IHZhbHVlIDogdW5kZWZpbmVkfSBpbnN0ZWFkLicsIHZhbHVlLCBuYW1lLCBuYW1lLCB2YWx1ZSwgbmFtZSwgbmFtZSwgbmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIE5vdyB0aGF0IHdlJ3ZlIHZhbGlkYXRlZCBjYXNpbmcsIGRvIG5vdCB2YWxpZGF0ZVxuICAgIC8vIGRhdGEgdHlwZXMgZm9yIHJlc2VydmVkIHByb3BzXG5cblxuICAgIGlmIChpc1Jlc2VydmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIFdhcm4gd2hlbiBhIGtub3duIGF0dHJpYnV0ZSBpcyBhIGJhZCB0eXBlXG5cblxuICAgIGlmIChzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyhuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBXYXJuIHdoZW4gcGFzc2luZyB0aGUgc3RyaW5ncyAnZmFsc2UnIG9yICd0cnVlJyBpbnRvIGEgYm9vbGVhbiBwcm9wXG5cblxuICAgIGlmICgodmFsdWUgPT09ICdmYWxzZScgfHwgdmFsdWUgPT09ICd0cnVlJykgJiYgcHJvcGVydHlJbmZvICE9PSBudWxsICYmIHByb3BlcnR5SW5mby50eXBlID09PSBCT09MRUFOKSB7XG4gICAgICBlcnJvcignUmVjZWl2ZWQgdGhlIHN0cmluZyBgJXNgIGZvciB0aGUgYm9vbGVhbiBhdHRyaWJ1dGUgYCVzYC4gJyArICclcyAnICsgJ0RpZCB5b3UgbWVhbiAlcz17JXN9PycsIHZhbHVlLCBuYW1lLCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdUaGUgYnJvd3NlciB3aWxsIGludGVycHJldCBpdCBhcyBhIHRydXRoeSB2YWx1ZS4nIDogJ0FsdGhvdWdoIHRoaXMgd29ya3MsIGl0IHdpbGwgbm90IHdvcmsgYXMgZXhwZWN0ZWQgaWYgeW91IHBhc3MgdGhlIHN0cmluZyBcImZhbHNlXCIuJywgbmFtZSwgdmFsdWUpO1xuXG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59XG5cbnZhciB3YXJuVW5rbm93blByb3BlcnRpZXMgPSBmdW5jdGlvbiAodHlwZSwgcHJvcHMsIGV2ZW50UmVnaXN0cnkpIHtcbiAge1xuICAgIHZhciB1bmtub3duUHJvcHMgPSBbXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFyIGlzVmFsaWQgPSB2YWxpZGF0ZVByb3BlcnR5JDEodHlwZSwga2V5LCBwcm9wc1trZXldLCBldmVudFJlZ2lzdHJ5KTtcblxuICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgIHVua25vd25Qcm9wcy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHVua25vd25Qcm9wU3RyaW5nID0gdW5rbm93blByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgcmV0dXJuICdgJyArIHByb3AgKyAnYCc7XG4gICAgfSkuam9pbignLCAnKTtcblxuICAgIGlmICh1bmtub3duUHJvcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBlcnJvcignSW52YWxpZCB2YWx1ZSBmb3IgcHJvcCAlcyBvbiA8JXM+IHRhZy4gRWl0aGVyIHJlbW92ZSBpdCBmcm9tIHRoZSBlbGVtZW50LCAnICsgJ29yIHBhc3MgYSBzdHJpbmcgb3IgbnVtYmVyIHZhbHVlIHRvIGtlZXAgaXQgaW4gdGhlIERPTS4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9hdHRyaWJ1dGUtYmVoYXZpb3IgJywgdW5rbm93blByb3BTdHJpbmcsIHR5cGUpO1xuICAgIH0gZWxzZSBpZiAodW5rbm93blByb3BzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGVycm9yKCdJbnZhbGlkIHZhbHVlcyBmb3IgcHJvcHMgJXMgb24gPCVzPiB0YWcuIEVpdGhlciByZW1vdmUgdGhlbSBmcm9tIHRoZSBlbGVtZW50LCAnICsgJ29yIHBhc3MgYSBzdHJpbmcgb3IgbnVtYmVyIHZhbHVlIHRvIGtlZXAgdGhlbSBpbiB0aGUgRE9NLiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2F0dHJpYnV0ZS1iZWhhdmlvciAnLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnRpZXMkMih0eXBlLCBwcm9wcywgZXZlbnRSZWdpc3RyeSkge1xuICBpZiAoaXNDdXN0b21Db21wb25lbnQodHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2FyblVua25vd25Qcm9wZXJ0aWVzKHR5cGUsIHByb3BzLCBldmVudFJlZ2lzdHJ5KTtcbn1cblxudmFyIHRvQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5OyAvLyBUaGlzIGlzIG9ubHkgdXNlZCBpbiBERVYuXG4vLyBFYWNoIGVudHJ5IGlzIGB0aGlzLnN0YWNrYCBmcm9tIGEgY3VycmVudGx5IGV4ZWN1dGluZyByZW5kZXJlciBpbnN0YW5jZS5cbi8vIChUaGVyZSBtYXkgYmUgbW9yZSB0aGFuIG9uZSBiZWNhdXNlIFJlYWN0RE9NU2VydmVyIGlzIHJlZW50cmFudCkuXG4vLyBFYWNoIHN0YWNrIGlzIGFuIGFycmF5IG9mIGZyYW1lcyB3aGljaCBtYXkgY29udGFpbiBuZXN0ZWQgc3RhY2tzIG9mIGVsZW1lbnRzLlxuXG52YXIgY3VycmVudERlYnVnU3RhY2tzID0gW107XG52YXIgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDE7XG52YXIgcHJldkdldEN1cnJlbnRTdGFja0ltcGwgPSBudWxsO1xuXG52YXIgZ2V0Q3VycmVudFNlcnZlclN0YWNrSW1wbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICcnO1xufTtcblxudmFyIGRlc2NyaWJlU3RhY2tGcmFtZSA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gIHJldHVybiAnJztcbn07XG5cbnZhciB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50ID0gZnVuY3Rpb24gKHR5cGUsIHByb3BzKSB7fTtcblxudmFyIHB1c2hDdXJyZW50RGVidWdTdGFjayA9IGZ1bmN0aW9uIChzdGFjaykge307XG5cbnZhciBwdXNoRWxlbWVudFRvRGVidWdTdGFjayA9IGZ1bmN0aW9uIChlbGVtZW50KSB7fTtcblxudmFyIHBvcEN1cnJlbnREZWJ1Z1N0YWNrID0gZnVuY3Rpb24gKCkge307XG5cbnZhciBoYXNXYXJuZWRBYm91dFVzaW5nQ29udGV4dEFzQ29uc3VtZXIgPSBmYWxzZTtcblxue1xuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuXG4gIHZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQgPSBmdW5jdGlvbiAodHlwZSwgcHJvcHMpIHtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXModHlwZSwgcHJvcHMpO1xuICAgIHZhbGlkYXRlUHJvcGVydGllcyQxKHR5cGUsIHByb3BzKTtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXMkMih0eXBlLCBwcm9wcywgbnVsbCk7XG4gIH07XG5cbiAgZGVzY3JpYmVTdGFja0ZyYW1lID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGVsZW1lbnQudHlwZSwgZWxlbWVudC5fc291cmNlLCBudWxsKTtcbiAgfTtcblxuICBwdXNoQ3VycmVudERlYnVnU3RhY2sgPSBmdW5jdGlvbiAoc3RhY2spIHtcbiAgICBjdXJyZW50RGVidWdTdGFja3MucHVzaChzdGFjayk7XG5cbiAgICBpZiAoY3VycmVudERlYnVnU3RhY2tzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gV2UgYXJlIGVudGVyaW5nIGEgc2VydmVyIHJlbmRlcmVyLlxuICAgICAgLy8gUmVtZW1iZXIgdGhlIHByZXZpb3VzIChlLmcuIGNsaWVudCkgZ2xvYmFsIHN0YWNrIGltcGxlbWVudGF0aW9uLlxuICAgICAgcHJldkdldEN1cnJlbnRTdGFja0ltcGwgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuZ2V0Q3VycmVudFN0YWNrO1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxLmdldEN1cnJlbnRTdGFjayA9IGdldEN1cnJlbnRTZXJ2ZXJTdGFja0ltcGw7XG4gICAgfVxuICB9O1xuXG4gIHB1c2hFbGVtZW50VG9EZWJ1Z1N0YWNrID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAvLyBGb3IgdGhlIGlubmVybW9zdCBleGVjdXRpbmcgUmVhY3RET01TZXJ2ZXIgY2FsbCxcbiAgICB2YXIgc3RhY2sgPSBjdXJyZW50RGVidWdTdGFja3NbY3VycmVudERlYnVnU3RhY2tzLmxlbmd0aCAtIDFdOyAvLyBUYWtlIHRoZSBpbm5lcm1vc3QgZXhlY3V0aW5nIGZyYW1lIChlLmcuIDxGb28+KSxcblxuICAgIHZhciBmcmFtZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdOyAvLyBhbmQgcmVjb3JkIHRoYXQgaXQgaGFzIG9uZSBtb3JlIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIGl0LlxuXG4gICAgZnJhbWUuZGVidWdFbGVtZW50U3RhY2sucHVzaChlbGVtZW50KTsgLy8gV2Ugb25seSBuZWVkIHRoaXMgYmVjYXVzZSB3ZSB0YWlsLW9wdGltaXplIHNpbmdsZS1lbGVtZW50XG4gICAgLy8gY2hpbGRyZW4gYW5kIGRpcmVjdGx5IGhhbmRsZSB0aGVtIGluIGFuIGlubmVyIGxvb3AgaW5zdGVhZCBvZlxuICAgIC8vIGNyZWF0aW5nIHNlcGFyYXRlIGZyYW1lcyBmb3IgdGhlbS5cbiAgfTtcblxuICBwb3BDdXJyZW50RGVidWdTdGFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBjdXJyZW50RGVidWdTdGFja3MucG9wKCk7XG5cbiAgICBpZiAoY3VycmVudERlYnVnU3RhY2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gV2UgYXJlIGV4aXRpbmcgdGhlIHNlcnZlciByZW5kZXJlci5cbiAgICAgIC8vIFJlc3RvcmUgdGhlIHByZXZpb3VzIChlLmcuIGNsaWVudCkgZ2xvYmFsIHN0YWNrIGltcGxlbWVudGF0aW9uLlxuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxLmdldEN1cnJlbnRTdGFjayA9IHByZXZHZXRDdXJyZW50U3RhY2tJbXBsO1xuICAgICAgcHJldkdldEN1cnJlbnRTdGFja0ltcGwgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBnZXRDdXJyZW50U2VydmVyU3RhY2tJbXBsID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjdXJyZW50RGVidWdTdGFja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBOb3RoaW5nIGlzIGN1cnJlbnRseSByZW5kZXJpbmcuXG4gICAgICByZXR1cm4gJyc7XG4gICAgfSAvLyBSZWFjdERPTVNlcnZlciBpcyByZWVudHJhbnQgc28gdGhlcmUgbWF5IGJlIG11bHRpcGxlIGNhbGxzIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgLy8gVGFrZSB0aGUgZnJhbWVzIGZyb20gdGhlIGlubmVybW9zdCBjYWxsIHdoaWNoIGlzIHRoZSBsYXN0IGluIHRoZSBhcnJheS5cblxuXG4gICAgdmFyIGZyYW1lcyA9IGN1cnJlbnREZWJ1Z1N0YWNrc1tjdXJyZW50RGVidWdTdGFja3MubGVuZ3RoIC0gMV07XG4gICAgdmFyIHN0YWNrID0gJyc7IC8vIEdvIHRocm91Z2ggZXZlcnkgZnJhbWUgaW4gdGhlIHN0YWNrIGZyb20gdGhlIGlubmVybW9zdCBvbmUuXG5cbiAgICBmb3IgKHZhciBpID0gZnJhbWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZnJhbWUgPSBmcmFtZXNbaV07IC8vIEV2ZXJ5IGZyYW1lIG1pZ2h0IGhhdmUgbW9yZSB0aGFuIG9uZSBkZWJ1ZyBlbGVtZW50IHN0YWNrIGVudHJ5IGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSBzaW5nbGUtY2hpbGQgbmVzdGluZyBkb2Vzbid0IGNyZWF0ZSBtYXRlcmlhbGl6ZWQgZnJhbWVzLlxuICAgICAgLy8gSW5zdGVhZCBpdCB3b3VsZCBwdXNoIHRoZW0gdGhyb3VnaCBgcHVzaEVsZW1lbnRUb0RlYnVnU3RhY2soKWAuXG5cbiAgICAgIHZhciBkZWJ1Z0VsZW1lbnRTdGFjayA9IGZyYW1lLmRlYnVnRWxlbWVudFN0YWNrO1xuXG4gICAgICBmb3IgKHZhciBpaSA9IGRlYnVnRWxlbWVudFN0YWNrLmxlbmd0aCAtIDE7IGlpID49IDA7IGlpLS0pIHtcbiAgICAgICAgc3RhY2sgKz0gZGVzY3JpYmVTdGFja0ZyYW1lKGRlYnVnRWxlbWVudFN0YWNrW2lpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrO1xuICB9O1xufVxuXG52YXIgZGlkV2FybkRlZmF1bHRJbnB1dFZhbHVlID0gZmFsc2U7XG52YXIgZGlkV2FybkRlZmF1bHRDaGVja2VkID0gZmFsc2U7XG52YXIgZGlkV2FybkRlZmF1bHRTZWxlY3RWYWx1ZSA9IGZhbHNlO1xudmFyIGRpZFdhcm5EZWZhdWx0VGV4dGFyZWFWYWx1ZSA9IGZhbHNlO1xudmFyIGRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW4gPSBmYWxzZTtcbnZhciBkaWRXYXJuQWJvdXROb29wVXBkYXRlRm9yQ29tcG9uZW50ID0ge307XG52YXIgZGlkV2FybkFib3V0QmFkQ2xhc3MgPSB7fTtcbnZhciBkaWRXYXJuQWJvdXRNb2R1bGVQYXR0ZXJuQ29tcG9uZW50ID0ge307XG52YXIgZGlkV2FybkFib3V0RGVwcmVjYXRlZFdpbGxNb3VudCA9IHt9O1xudmFyIGRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZSA9IHt9O1xudmFyIGRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZSA9IHt9O1xudmFyIHZhbHVlUHJvcE5hbWVzID0gWyd2YWx1ZScsICdkZWZhdWx0VmFsdWUnXTtcbnZhciBuZXdsaW5lRWF0aW5nVGFncyA9IHtcbiAgbGlzdGluZzogdHJ1ZSxcbiAgcHJlOiB0cnVlLFxuICB0ZXh0YXJlYTogdHJ1ZVxufTsgLy8gV2UgYWNjZXB0IGFueSB0YWcgdG8gYmUgcmVuZGVyZWQgYnV0IHNpbmNlIHRoaXMgZ2V0cyBpbmplY3RlZCBpbnRvIGFyYml0cmFyeVxuLy8gSFRNTCwgd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCBpdCdzIGEgc2FmZSB0YWcuXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLyNOVC1OYW1lXG5cbnZhciBWQUxJRF9UQUdfUkVHRVggPSAvXlthLXpBLVpdW2EtekEtWjpfXFwuXFwtXFxkXSokLzsgLy8gU2ltcGxpZmllZCBzdWJzZXRcblxudmFyIHZhbGlkYXRlZFRhZ0NhY2hlID0ge307XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZykge1xuICBpZiAoIXZhbGlkYXRlZFRhZ0NhY2hlLmhhc093blByb3BlcnR5KHRhZykpIHtcbiAgICBpZiAoIVZBTElEX1RBR19SRUdFWC50ZXN0KHRhZykpIHtcbiAgICAgIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoIFwiSW52YWxpZCB0YWc6IFwiICsgdGFnICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFsaWRhdGVkVGFnQ2FjaGVbdGFnXSA9IHRydWU7XG4gIH1cbn1cblxudmFyIHN0eWxlTmFtZUNhY2hlID0ge307XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICBpZiAoc3R5bGVOYW1lQ2FjaGUuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgIHJldHVybiBzdHlsZU5hbWVDYWNoZVtzdHlsZU5hbWVdO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IGh5cGhlbmF0ZVN0eWxlTmFtZShzdHlsZU5hbWUpO1xuICBzdHlsZU5hbWVDYWNoZVtzdHlsZU5hbWVdID0gcmVzdWx0O1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZnVuY3Rpb24gY3JlYXRlTWFya3VwRm9yU3R5bGVzKHN0eWxlcykge1xuICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuICB2YXIgZGVsaW1pdGVyID0gJyc7XG5cbiAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBpc0N1c3RvbVByb3BlcnR5ID0gc3R5bGVOYW1lLmluZGV4T2YoJy0tJykgPT09IDA7XG4gICAgdmFyIHN0eWxlVmFsdWUgPSBzdHlsZXNbc3R5bGVOYW1lXTtcblxuICAgIHtcbiAgICAgIGlmICghaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZSQxKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlVmFsdWUgIT0gbnVsbCkge1xuICAgICAgc2VyaWFsaXplZCArPSBkZWxpbWl0ZXIgKyAoaXNDdXN0b21Qcm9wZXJ0eSA/IHN0eWxlTmFtZSA6IHByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKSkgKyAnOic7XG4gICAgICBzZXJpYWxpemVkICs9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlLCBpc0N1c3RvbVByb3BlcnR5KTtcbiAgICAgIGRlbGltaXRlciA9ICc7JztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xufVxuXG5mdW5jdGlvbiB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICB7XG4gICAgdmFyIF9jb25zdHJ1Y3RvciA9IHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgIHZhciBjb21wb25lbnROYW1lID0gX2NvbnN0cnVjdG9yICYmIGdldENvbXBvbmVudE5hbWUoX2NvbnN0cnVjdG9yKSB8fCAnUmVhY3RDbGFzcyc7XG4gICAgdmFyIHdhcm5pbmdLZXkgPSBjb21wb25lbnROYW1lICsgJy4nICsgY2FsbGVyTmFtZTtcblxuICAgIGlmIChkaWRXYXJuQWJvdXROb29wVXBkYXRlRm9yQ29tcG9uZW50W3dhcm5pbmdLZXldKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXJyb3IoJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50aW5nIGNvbXBvbmVudC4gJyArICdUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG91dHNpZGUgY29tcG9uZW50V2lsbE1vdW50KCkgb24gdGhlIHNlcnZlci4gJyArICdUaGlzIGlzIGEgbm8tb3AuXFxuXFxuUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIGNvbXBvbmVudE5hbWUpO1xuXG4gICAgZGlkV2FybkFib3V0Tm9vcFVwZGF0ZUZvckNvbXBvbmVudFt3YXJuaW5nS2V5XSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0JDEoQ29tcG9uZW50KSB7XG4gIHJldHVybiBDb21wb25lbnQucHJvdG90eXBlICYmIENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudDtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uQ2hpbGRyZW5Jbm5lck1hcmt1cChwcm9wcykge1xuICB2YXIgaW5uZXJIVE1MID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG5cbiAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG4gICAgaWYgKGlubmVySFRNTC5fX2h0bWwgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGlubmVySFRNTC5fX2h0bWw7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjb250ZW50ID0gcHJvcHMuY2hpbGRyZW47XG5cbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIGVzY2FwZVRleHRGb3JCcm93c2VyKGNvbnRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuVG9wTGV2ZWxDaGlsZHJlbihjaGlsZHJlbikge1xuICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIHJldHVybiB0b0FycmF5KGNoaWxkcmVuKTtcbiAgfVxuXG4gIHZhciBlbGVtZW50ID0gY2hpbGRyZW47XG5cbiAgaWYgKGVsZW1lbnQudHlwZSAhPT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgIHJldHVybiBbZWxlbWVudF07XG4gIH1cblxuICB2YXIgZnJhZ21lbnRDaGlsZHJlbiA9IGVsZW1lbnQucHJvcHMuY2hpbGRyZW47XG5cbiAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChmcmFnbWVudENoaWxkcmVuKSkge1xuICAgIHJldHVybiB0b0FycmF5KGZyYWdtZW50Q2hpbGRyZW4pO1xuICB9XG5cbiAgdmFyIGZyYWdtZW50Q2hpbGRFbGVtZW50ID0gZnJhZ21lbnRDaGlsZHJlbjtcbiAgcmV0dXJuIFtmcmFnbWVudENoaWxkRWxlbWVudF07XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5PcHRpb25DaGlsZHJlbihjaGlsZHJlbikge1xuICBpZiAoY2hpbGRyZW4gPT09IHVuZGVmaW5lZCB8fCBjaGlsZHJlbiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHZhciBjb250ZW50ID0gJyc7IC8vIEZsYXR0ZW4gY2hpbGRyZW4gYW5kIHdhcm4gaWYgdGhleSBhcmVuJ3Qgc3RyaW5ncyBvciBudW1iZXJzO1xuICAvLyBpbnZhbGlkIHR5cGVzIGFyZSBpZ25vcmVkLlxuXG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGVudCArPSBjaGlsZDtcblxuICAgIHtcbiAgICAgIGlmICghZGlkV2FybkludmFsaWRPcHRpb25DaGlsZHJlbiAmJiB0eXBlb2YgY2hpbGQgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBjaGlsZCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgZGlkV2FybkludmFsaWRPcHRpb25DaGlsZHJlbiA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJ09ubHkgc3RyaW5ncyBhbmQgbnVtYmVycyBhcmUgc3VwcG9ydGVkIGFzIDxvcHRpb24+IGNoaWxkcmVuLicpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjb250ZW50O1xufVxuXG52YXIgaGFzT3duUHJvcGVydHkkMiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgU1RZTEUgPSAnc3R5bGUnO1xudmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICBjaGlsZHJlbjogbnVsbCxcbiAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IG51bGwsXG4gIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZzogbnVsbCxcbiAgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nOiBudWxsXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVPcGVuVGFnTWFya3VwKHRhZ1ZlcmJhdGltLCB0YWdMb3dlcmNhc2UsIHByb3BzLCBuYW1lc3BhY2UsIG1ha2VTdGF0aWNNYXJrdXAsIGlzUm9vdEVsZW1lbnQpIHtcbiAgdmFyIHJldCA9ICc8JyArIHRhZ1ZlcmJhdGltO1xuICB2YXIgaXNDdXN0b21Db21wb25lbnQkMSA9IGlzQ3VzdG9tQ29tcG9uZW50KHRhZ0xvd2VyY2FzZSwgcHJvcHMpO1xuXG4gIGZvciAodmFyIHByb3BLZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5JDIuY2FsbChwcm9wcywgcHJvcEtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcblxuICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICBwcm9wVmFsdWUgPSBjcmVhdGVNYXJrdXBGb3JTdHlsZXMocHJvcFZhbHVlKTtcbiAgICB9XG5cbiAgICB2YXIgbWFya3VwID0gbnVsbDtcblxuICAgIGlmIChpc0N1c3RvbUNvbXBvbmVudCQxKSB7XG4gICAgICBpZiAoIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIG1hcmt1cCA9IGNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrdXAgPSBjcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChtYXJrdXApIHtcbiAgICAgIHJldCArPSAnICcgKyBtYXJrdXA7XG4gICAgfVxuICB9IC8vIEZvciBzdGF0aWMgcGFnZXMsIG5vIG5lZWQgdG8gcHV0IFJlYWN0IElEIGFuZCBjaGVja3N1bS4gU2F2ZXMgbG90cyBvZlxuICAvLyBieXRlcy5cblxuXG4gIGlmIChtYWtlU3RhdGljTWFya3VwKSB7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIGlmIChpc1Jvb3RFbGVtZW50KSB7XG4gICAgcmV0ICs9ICcgJyArIGNyZWF0ZU1hcmt1cEZvclJvb3QoKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUmVuZGVyUmVzdWx0KGNoaWxkLCB0eXBlKSB7XG4gIGlmIChjaGlsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAge1xuICAgICAge1xuICAgICAgICB0aHJvdyBFcnJvciggKGdldENvbXBvbmVudE5hbWUodHlwZSkgfHwgJ0NvbXBvbmVudCcpICsgXCIoLi4uKTogTm90aGluZyB3YXMgcmV0dXJuZWQgZnJvbSByZW5kZXIuIFRoaXMgdXN1YWxseSBtZWFucyBhIHJldHVybiBzdGF0ZW1lbnQgaXMgbWlzc2luZy4gT3IsIHRvIHJlbmRlciBub3RoaW5nLCByZXR1cm4gbnVsbC5cIiApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlKGNoaWxkLCBjb250ZXh0LCB0aHJlYWRJRCkge1xuICB3aGlsZSAoUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgLy8gU2FmZSBiZWNhdXNlIHdlIGp1c3QgY2hlY2tlZCBpdCdzIGFuIGVsZW1lbnQuXG4gICAgdmFyIGVsZW1lbnQgPSBjaGlsZDtcbiAgICB2YXIgQ29tcG9uZW50ID0gZWxlbWVudC50eXBlO1xuXG4gICAge1xuICAgICAgcHVzaEVsZW1lbnRUb0RlYnVnU3RhY2soZWxlbWVudCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBDb21wb25lbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHByb2Nlc3NDaGlsZChlbGVtZW50LCBDb21wb25lbnQpO1xuICB9IC8vIEV4dHJhIGNsb3N1cmUgc28gcXVldWUgYW5kIHJlcGxhY2UgY2FuIGJlIGNhcHR1cmVkIHByb3Blcmx5XG5cblxuICBmdW5jdGlvbiBwcm9jZXNzQ2hpbGQoZWxlbWVudCwgQ29tcG9uZW50KSB7XG4gICAgdmFyIGlzQ2xhc3MgPSBzaG91bGRDb25zdHJ1Y3QkMShDb21wb25lbnQpO1xuICAgIHZhciBwdWJsaWNDb250ZXh0ID0gcHJvY2Vzc0NvbnRleHQoQ29tcG9uZW50LCBjb250ZXh0LCB0aHJlYWRJRCwgaXNDbGFzcyk7XG4gICAgdmFyIHF1ZXVlID0gW107XG4gICAgdmFyIHJlcGxhY2UgPSBmYWxzZTtcbiAgICB2YXIgdXBkYXRlciA9IHtcbiAgICAgIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgICAgICBpZiAocXVldWUgPT09IG51bGwpIHtcbiAgICAgICAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAocHVibGljSW5zdGFuY2UsIGNvbXBsZXRlU3RhdGUpIHtcbiAgICAgICAgcmVwbGFjZSA9IHRydWU7XG4gICAgICAgIHF1ZXVlID0gW2NvbXBsZXRlU3RhdGVdO1xuICAgICAgfSxcbiAgICAgIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjdXJyZW50UGFydGlhbFN0YXRlKSB7XG4gICAgICAgIGlmIChxdWV1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAnc2V0U3RhdGUnKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlLnB1c2goY3VycmVudFBhcnRpYWxTdGF0ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgaW5zdDtcblxuICAgIGlmIChpc0NsYXNzKSB7XG4gICAgICBpbnN0ID0gbmV3IENvbXBvbmVudChlbGVtZW50LnByb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVyKTtcblxuICAgICAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoaW5zdC5zdGF0ZSA9PT0gbnVsbCB8fCBpbnN0LnN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpIHx8ICdVbmtub3duJztcblxuICAgICAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRVbmluaXRpYWxpemVkU3RhdGVbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgZXJyb3IoJ2Alc2AgdXNlcyBgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzYCBidXQgaXRzIGluaXRpYWwgc3RhdGUgaXMgJyArICclcy4gVGhpcyBpcyBub3QgcmVjb21tZW5kZWQuIEluc3RlYWQsIGRlZmluZSB0aGUgaW5pdGlhbCBzdGF0ZSBieSAnICsgJ2Fzc2lnbmluZyBhbiBvYmplY3QgdG8gYHRoaXMuc3RhdGVgIGluIHRoZSBjb25zdHJ1Y3RvciBvZiBgJXNgLiAnICsgJ1RoaXMgZW5zdXJlcyB0aGF0IGBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNgIGFyZ3VtZW50cyBoYXZlIGEgY29uc2lzdGVudCBzaGFwZS4nLCBjb21wb25lbnROYW1lLCBpbnN0LnN0YXRlID09PSBudWxsID8gJ251bGwnIDogJ3VuZGVmaW5lZCcsIGNvbXBvbmVudE5hbWUpO1xuXG4gICAgICAgICAgICAgIGRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZVtjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcnRpYWxTdGF0ZSA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuY2FsbChudWxsLCBlbGVtZW50LnByb3BzLCBpbnN0LnN0YXRlKTtcblxuICAgICAgICB7XG4gICAgICAgICAgaWYgKHBhcnRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgX2NvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkgfHwgJ1Vua25vd24nO1xuXG4gICAgICAgICAgICBpZiAoIWRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZVtfY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgZXJyb3IoJyVzLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpOiBBIHZhbGlkIHN0YXRlIG9iamVjdCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gJyArICdZb3UgaGF2ZSByZXR1cm5lZCB1bmRlZmluZWQuJywgX2NvbXBvbmVudE5hbWUpO1xuXG4gICAgICAgICAgICAgIGRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZVtfY29tcG9uZW50TmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJ0aWFsU3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgIGluc3Quc3RhdGUgPSBfYXNzaWduKHt9LCBpbnN0LnN0YXRlLCBwYXJ0aWFsU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKENvbXBvbmVudC5wcm90b3R5cGUgJiYgdHlwZW9mIENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIF9jb21wb25lbnROYW1lMiA9IGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KSB8fCAnVW5rbm93bic7XG5cbiAgICAgICAgICBpZiAoIWRpZFdhcm5BYm91dEJhZENsYXNzW19jb21wb25lbnROYW1lMl0pIHtcbiAgICAgICAgICAgIGVycm9yKFwiVGhlIDwlcyAvPiBjb21wb25lbnQgYXBwZWFycyB0byBoYXZlIGEgcmVuZGVyIG1ldGhvZCwgYnV0IGRvZXNuJ3QgZXh0ZW5kIFJlYWN0LkNvbXBvbmVudC4gXCIgKyAnVGhpcyBpcyBsaWtlbHkgdG8gY2F1c2UgZXJyb3JzLiBDaGFuZ2UgJXMgdG8gZXh0ZW5kIFJlYWN0LkNvbXBvbmVudCBpbnN0ZWFkLicsIF9jb21wb25lbnROYW1lMiwgX2NvbXBvbmVudE5hbWUyKTtcblxuICAgICAgICAgICAgZGlkV2FybkFib3V0QmFkQ2xhc3NbX2NvbXBvbmVudE5hbWUyXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjb21wb25lbnRJZGVudGl0eSA9IHt9O1xuICAgICAgcHJlcGFyZVRvVXNlSG9va3MoY29tcG9uZW50SWRlbnRpdHkpO1xuICAgICAgaW5zdCA9IENvbXBvbmVudChlbGVtZW50LnByb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVyKTtcbiAgICAgIGluc3QgPSBmaW5pc2hIb29rcyhDb21wb25lbnQsIGVsZW1lbnQucHJvcHMsIGluc3QsIHB1YmxpY0NvbnRleHQpO1xuXG4gICAgICB7XG4gICAgICAgIC8vIFN1cHBvcnQgZm9yIG1vZHVsZSBjb21wb25lbnRzIGlzIGRlcHJlY2F0ZWQgYW5kIGlzIHJlbW92ZWQgYmVoaW5kIGEgZmxhZy5cbiAgICAgICAgLy8gV2hldGhlciBvciBub3QgaXQgd291bGQgY3Jhc2ggbGF0ZXIsIHdlIHdhbnQgdG8gc2hvdyBhIGdvb2QgbWVzc2FnZSBpbiBERVYgZmlyc3QuXG4gICAgICAgIGlmIChpbnN0ICE9IG51bGwgJiYgaW5zdC5yZW5kZXIgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBfY29tcG9uZW50TmFtZTMgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkgfHwgJ1Vua25vd24nO1xuXG4gICAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRNb2R1bGVQYXR0ZXJuQ29tcG9uZW50W19jb21wb25lbnROYW1lM10pIHtcbiAgICAgICAgICAgIGVycm9yKCdUaGUgPCVzIC8+IGNvbXBvbmVudCBhcHBlYXJzIHRvIGJlIGEgZnVuY3Rpb24gY29tcG9uZW50IHRoYXQgcmV0dXJucyBhIGNsYXNzIGluc3RhbmNlLiAnICsgJ0NoYW5nZSAlcyB0byBhIGNsYXNzIHRoYXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgaW5zdGVhZC4gJyArIFwiSWYgeW91IGNhbid0IHVzZSBhIGNsYXNzIHRyeSBhc3NpZ25pbmcgdGhlIHByb3RvdHlwZSBvbiB0aGUgZnVuY3Rpb24gYXMgYSB3b3JrYXJvdW5kLiBcIiArIFwiYCVzLnByb3RvdHlwZSA9IFJlYWN0LkNvbXBvbmVudC5wcm90b3R5cGVgLiBEb24ndCB1c2UgYW4gYXJyb3cgZnVuY3Rpb24gc2luY2UgaXQgXCIgKyAnY2Fubm90IGJlIGNhbGxlZCB3aXRoIGBuZXdgIGJ5IFJlYWN0LicsIF9jb21wb25lbnROYW1lMywgX2NvbXBvbmVudE5hbWUzLCBfY29tcG9uZW50TmFtZTMpO1xuXG4gICAgICAgICAgICBkaWRXYXJuQWJvdXRNb2R1bGVQYXR0ZXJuQ29tcG9uZW50W19jb21wb25lbnROYW1lM10gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBJZiB0aGUgZmxhZyBpcyBvbiwgZXZlcnl0aGluZyBpcyBhc3N1bWVkIHRvIGJlIGEgZnVuY3Rpb24gY29tcG9uZW50LlxuICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBhbHNvIGRvIHRoZSB1bmZvcnR1bmF0ZSBkeW5hbWljIGNoZWNrcy5cblxuXG4gICAgICBpZiAoIGluc3QgPT0gbnVsbCB8fCBpbnN0LnJlbmRlciA9PSBudWxsKSB7XG4gICAgICAgIGNoaWxkID0gaW5zdDtcbiAgICAgICAgdmFsaWRhdGVSZW5kZXJSZXN1bHQoY2hpbGQsIENvbXBvbmVudCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnN0LnByb3BzID0gZWxlbWVudC5wcm9wcztcbiAgICBpbnN0LmNvbnRleHQgPSBwdWJsaWNDb250ZXh0O1xuICAgIGluc3QudXBkYXRlciA9IHVwZGF0ZXI7XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluc3Quc3RhdGU7XG5cbiAgICBpZiAoaW5pdGlhbFN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGluc3Quc3RhdGUgPSBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5zdC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB7XG4gICAgICAgICAgaWYgKCBpbnN0LmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgX2NvbXBvbmVudE5hbWU0ID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpIHx8ICdVbmtub3duJztcblxuICAgICAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXREZXByZWNhdGVkV2lsbE1vdW50W19jb21wb25lbnROYW1lNF0pIHtcbiAgICAgICAgICAgICAgd2FybiggLy8ga2VlcCB0aGlzIHdhcm5pbmcgaW4gc3luYyB3aXRoIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmcuanNcbiAgICAgICAgICAgICAgJ2NvbXBvbmVudFdpbGxNb3VudCBoYXMgYmVlbiByZW5hbWVkLCBhbmQgaXMgbm90IHJlY29tbWVuZGVkIGZvciB1c2UuICcgKyAnU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay91bnNhZmUtY29tcG9uZW50LWxpZmVjeWNsZXMgZm9yIGRldGFpbHMuXFxuXFxuJyArICcqIE1vdmUgY29kZSBmcm9tIGNvbXBvbmVudFdpbGxNb3VudCB0byBjb21wb25lbnREaWRNb3VudCAocHJlZmVycmVkIGluIG1vc3QgY2FzZXMpICcgKyAnb3IgdGhlIGNvbnN0cnVjdG9yLlxcbicgKyAnXFxuUGxlYXNlIHVwZGF0ZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6ICVzJywgX2NvbXBvbmVudE5hbWU0KTtcblxuICAgICAgICAgICAgICBkaWRXYXJuQWJvdXREZXByZWNhdGVkV2lsbE1vdW50W19jb21wb25lbnROYW1lNF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBJbiBvcmRlciB0byBzdXBwb3J0IHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0IHBvbHlmaWxsZWQgY29tcG9uZW50cyxcbiAgICAgICAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBhbnkgY29tcG9uZW50IHdpdGggdGhlIG5ldyBnRFNGUC5cblxuXG4gICAgICAgIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGluc3QuY29tcG9uZW50V2lsbE1vdW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpbnN0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gICAgICAgIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgYW55IGNvbXBvbmVudCB3aXRoIHRoZSBuZXcgZ0RTRlAuXG4gICAgICAgIGluc3QuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHZhciBvbGRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICB2YXIgb2xkUmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgICAgIHF1ZXVlID0gbnVsbDtcbiAgICAgICAgcmVwbGFjZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChvbGRSZXBsYWNlICYmIG9sZFF1ZXVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGluc3Quc3RhdGUgPSBvbGRRdWV1ZVswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV4dFN0YXRlID0gb2xkUmVwbGFjZSA/IG9sZFF1ZXVlWzBdIDogaW5zdC5zdGF0ZTtcbiAgICAgICAgICB2YXIgZG9udE11dGF0ZSA9IHRydWU7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gb2xkUmVwbGFjZSA/IDEgOiAwOyBpIDwgb2xkUXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0aWFsID0gb2xkUXVldWVbaV07XG5cbiAgICAgICAgICAgIHZhciBfcGFydGlhbFN0YXRlID0gdHlwZW9mIHBhcnRpYWwgPT09ICdmdW5jdGlvbicgPyBwYXJ0aWFsLmNhbGwoaW5zdCwgbmV4dFN0YXRlLCBlbGVtZW50LnByb3BzLCBwdWJsaWNDb250ZXh0KSA6IHBhcnRpYWw7XG5cbiAgICAgICAgICAgIGlmIChfcGFydGlhbFN0YXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgaWYgKGRvbnRNdXRhdGUpIHtcbiAgICAgICAgICAgICAgICBkb250TXV0YXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbmV4dFN0YXRlID0gX2Fzc2lnbih7fSwgbmV4dFN0YXRlLCBfcGFydGlhbFN0YXRlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfYXNzaWduKG5leHRTdGF0ZSwgX3BhcnRpYWxTdGF0ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGQgPSBpbnN0LnJlbmRlcigpO1xuXG4gICAge1xuICAgICAgaWYgKGNoaWxkID09PSB1bmRlZmluZWQgJiYgaW5zdC5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgIC8vIGRlcHJlY2F0aW5nIHRoaXMgY29udmVuaWVuY2UuXG4gICAgICAgIGNoaWxkID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWxpZGF0ZVJlbmRlclJlc3VsdChjaGlsZCwgQ29tcG9uZW50KTtcbiAgICB2YXIgY2hpbGRDb250ZXh0O1xuXG4gICAge1xuICAgICAgaWYgKHR5cGVvZiBpbnN0LmdldENoaWxkQ29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgX2NoaWxkQ29udGV4dFR5cGVzID0gQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzO1xuXG4gICAgICAgIGlmICh0eXBlb2YgX2NoaWxkQ29udGV4dFR5cGVzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGNoaWxkQ29udGV4dCA9IGluc3QuZ2V0Q2hpbGRDb250ZXh0KCk7XG5cbiAgICAgICAgICBmb3IgKHZhciBjb250ZXh0S2V5IGluIGNoaWxkQ29udGV4dCkge1xuICAgICAgICAgICAgaWYgKCEoY29udGV4dEtleSBpbiBfY2hpbGRDb250ZXh0VHlwZXMpKSB7XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvciggKGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KSB8fCAnVW5rbm93bicpICsgXCIuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcXFwiXCIgKyBjb250ZXh0S2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLlwiICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3IoJyVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gJyArICd1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuJywgZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpIHx8ICdVbmtub3duJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZENvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IF9hc3NpZ24oe30sIGNvbnRleHQsIGNoaWxkQ29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjaGlsZDogY2hpbGQsXG4gICAgY29udGV4dDogY29udGV4dFxuICB9O1xufVxuXG52YXIgUmVhY3RET01TZXJ2ZXJSZW5kZXJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIFRPRE86IHR5cGUgdGhpcyBtb3JlIHN0cmljdGx5OlxuICAvLyBERVYtb25seVxuICBmdW5jdGlvbiBSZWFjdERPTVNlcnZlclJlbmRlcmVyKGNoaWxkcmVuLCBtYWtlU3RhdGljTWFya3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGZsYXRDaGlsZHJlbiA9IGZsYXR0ZW5Ub3BMZXZlbENoaWxkcmVuKGNoaWxkcmVuKTtcbiAgICB2YXIgdG9wRnJhbWUgPSB7XG4gICAgICB0eXBlOiBudWxsLFxuICAgICAgLy8gQXNzdW1lIGFsbCB0cmVlcyBzdGFydCBpbiB0aGUgSFRNTCBuYW1lc3BhY2UgKG5vdCB0b3RhbGx5IHRydWUsIGJ1dFxuICAgICAgLy8gdGhpcyBpcyB3aGF0IHdlIGRpZCBoaXN0b3JpY2FsbHkpXG4gICAgICBkb21OYW1lc3BhY2U6IE5hbWVzcGFjZXMuaHRtbCxcbiAgICAgIGNoaWxkcmVuOiBmbGF0Q2hpbGRyZW4sXG4gICAgICBjaGlsZEluZGV4OiAwLFxuICAgICAgY29udGV4dDogZW1wdHlPYmplY3QsXG4gICAgICBmb290ZXI6ICcnXG4gICAgfTtcblxuICAgIHtcbiAgICAgIHRvcEZyYW1lLmRlYnVnRWxlbWVudFN0YWNrID0gW107XG4gICAgfVxuXG4gICAgdGhpcy50aHJlYWRJRCA9IGFsbG9jVGhyZWFkSUQoKTtcbiAgICB0aGlzLnN0YWNrID0gW3RvcEZyYW1lXTtcbiAgICB0aGlzLmV4aGF1c3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuY3VycmVudFNlbGVjdFZhbHVlID0gbnVsbDtcbiAgICB0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGUgPSBmYWxzZTtcbiAgICB0aGlzLm1ha2VTdGF0aWNNYXJrdXAgPSBtYWtlU3RhdGljTWFya3VwO1xuICAgIHRoaXMuc3VzcGVuc2VEZXB0aCA9IDA7IC8vIENvbnRleHQgKG5ldyBBUEkpXG5cbiAgICB0aGlzLmNvbnRleHRJbmRleCA9IC0xO1xuICAgIHRoaXMuY29udGV4dFN0YWNrID0gW107XG4gICAgdGhpcy5jb250ZXh0VmFsdWVTdGFjayA9IFtdOyAvLyB1c2VPcGFxdWVJZGVudGlmaWVyIElEXG5cbiAgICB0aGlzLnVuaXF1ZUlEID0gMDtcbiAgICB0aGlzLmlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zICYmIG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCB8fCAnJztcblxuICAgIHtcbiAgICAgIHRoaXMuY29udGV4dFByb3ZpZGVyU3RhY2sgPSBbXTtcbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVhY3RET01TZXJ2ZXJSZW5kZXJlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGlmICghdGhpcy5leGhhdXN0ZWQpIHtcbiAgICAgIHRoaXMuZXhoYXVzdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuY2xlYXJQcm92aWRlcnMoKTtcbiAgICAgIGZyZWVUaHJlYWRJRCh0aGlzLnRocmVhZElEKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIE5vdGU6IFdlIHVzZSBqdXN0IHR3byBzdGFja3MgcmVnYXJkbGVzcyBvZiBob3cgbWFueSBjb250ZXh0IHByb3ZpZGVycyB5b3UgaGF2ZS5cbiAgICogUHJvdmlkZXJzIGFyZSBhbHdheXMgcG9wcGVkIGluIHRoZSByZXZlcnNlIG9yZGVyIHRvIGhvdyB0aGV5IHdlcmUgcHVzaGVkXG4gICAqIHNvIHdlIGFsd2F5cyBrbm93IG9uIHRoZSB3YXkgZG93biB3aGljaCBwcm92aWRlciB5b3UnbGwgZW5jb3VudGVyIG5leHQgb24gdGhlIHdheSB1cC5cbiAgICogT24gdGhlIHdheSBkb3duLCB3ZSBwdXNoIHRoZSBjdXJyZW50IHByb3ZpZGVyLCBhbmQgaXRzIGNvbnRleHQgdmFsdWUgKmJlZm9yZSpcbiAgICogd2UgbXV0YXRlZCBpdCwgb250byB0aGUgc3RhY2tzLiBUaGVyZWZvcmUsIG9uIHRoZSB3YXkgdXAsIHdlIGFsd2F5cyBrbm93IHdoaWNoXG4gICAqIHByb3ZpZGVyIG5lZWRzIHRvIGJlIFwicmVzdG9yZWRcIiB0byB3aGljaCB2YWx1ZS5cbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTI5ODUjaXNzdWVjb21tZW50LTM5NjMwMTI0OFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wdXNoUHJvdmlkZXIgPSBmdW5jdGlvbiBwdXNoUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICB2YXIgaW5kZXggPSArK3RoaXMuY29udGV4dEluZGV4O1xuICAgIHZhciBjb250ZXh0ID0gcHJvdmlkZXIudHlwZS5fY29udGV4dDtcbiAgICB2YXIgdGhyZWFkSUQgPSB0aGlzLnRocmVhZElEO1xuICAgIHZhbGlkYXRlQ29udGV4dEJvdW5kcyhjb250ZXh0LCB0aHJlYWRJRCk7XG4gICAgdmFyIHByZXZpb3VzVmFsdWUgPSBjb250ZXh0W3RocmVhZElEXTsgLy8gUmVtZW1iZXIgd2hpY2ggdmFsdWUgdG8gcmVzdG9yZSB0aGlzIGNvbnRleHQgdG8gb24gb3VyIHdheSB1cC5cblxuICAgIHRoaXMuY29udGV4dFN0YWNrW2luZGV4XSA9IGNvbnRleHQ7XG4gICAgdGhpcy5jb250ZXh0VmFsdWVTdGFja1tpbmRleF0gPSBwcmV2aW91c1ZhbHVlO1xuXG4gICAge1xuICAgICAgLy8gT25seSB1c2VkIGZvciBwdXNoL3BvcCBtaXNtYXRjaCB3YXJuaW5ncy5cbiAgICAgIHRoaXMuY29udGV4dFByb3ZpZGVyU3RhY2tbaW5kZXhdID0gcHJvdmlkZXI7XG4gICAgfSAvLyBNdXRhdGUgdGhlIGN1cnJlbnQgdmFsdWUuXG5cblxuICAgIGNvbnRleHRbdGhyZWFkSURdID0gcHJvdmlkZXIucHJvcHMudmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLnBvcFByb3ZpZGVyID0gZnVuY3Rpb24gcG9wUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRleHRJbmRleDtcblxuICAgIHtcbiAgICAgIGlmIChpbmRleCA8IDAgfHwgcHJvdmlkZXIgIT09IHRoaXMuY29udGV4dFByb3ZpZGVyU3RhY2tbaW5kZXhdKSB7XG4gICAgICAgIGVycm9yKCdVbmV4cGVjdGVkIHBvcC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dFN0YWNrW2luZGV4XTtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IHRoaXMuY29udGV4dFZhbHVlU3RhY2tbaW5kZXhdOyAvLyBcIkhpZGVcIiB0aGVzZSBudWxsIGFzc2lnbm1lbnRzIGZyb20gRmxvdyBieSB1c2luZyBgYW55YFxuICAgIC8vIGJlY2F1c2UgY29uY2VwdHVhbGx5IHRoZXkgYXJlIGRlbGV0aW9ucy0tYXMgbG9uZyBhcyB3ZVxuICAgIC8vIHByb21pc2UgdG8gbmV2ZXIgYWNjZXNzIHZhbHVlcyBiZXlvbmQgYHRoaXMuY29udGV4dEluZGV4YC5cblxuICAgIHRoaXMuY29udGV4dFN0YWNrW2luZGV4XSA9IG51bGw7XG4gICAgdGhpcy5jb250ZXh0VmFsdWVTdGFja1tpbmRleF0gPSBudWxsO1xuXG4gICAge1xuICAgICAgdGhpcy5jb250ZXh0UHJvdmlkZXJTdGFja1tpbmRleF0gPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dEluZGV4LS07IC8vIFJlc3RvcmUgdG8gdGhlIHByZXZpb3VzIHZhbHVlIHdlIHN0b3JlZCBhcyB3ZSB3ZXJlIHdhbGtpbmcgZG93bi5cbiAgICAvLyBXZSd2ZSBhbHJlYWR5IHZlcmlmaWVkIHRoYXQgdGhpcyBjb250ZXh0IGhhcyBiZWVuIGV4cGFuZGVkIHRvIGFjY29tbW9kYXRlXG4gICAgLy8gdGhpcyB0aHJlYWQgaWQsIHNvIHdlIGRvbid0IG5lZWQgdG8gZG8gaXQgYWdhaW4uXG5cbiAgICBjb250ZXh0W3RoaXMudGhyZWFkSURdID0gcHJldmlvdXNWYWx1ZTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJQcm92aWRlcnMgPSBmdW5jdGlvbiBjbGVhclByb3ZpZGVycygpIHtcbiAgICAvLyBSZXN0b3JlIGFueSByZW1haW5pbmcgcHJvdmlkZXJzIG9uIHRoZSBzdGFjayB0byBwcmV2aW91cyB2YWx1ZXNcbiAgICBmb3IgKHZhciBpbmRleCA9IHRoaXMuY29udGV4dEluZGV4OyBpbmRleCA+PSAwOyBpbmRleC0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dFN0YWNrW2luZGV4XTtcbiAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gdGhpcy5jb250ZXh0VmFsdWVTdGFja1tpbmRleF07XG4gICAgICBjb250ZXh0W3RoaXMudGhyZWFkSURdID0gcHJldmlvdXNWYWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlYWQgPSBmdW5jdGlvbiByZWFkKGJ5dGVzKSB7XG4gICAgaWYgKHRoaXMuZXhoYXVzdGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJldlBhcnRpYWxSZW5kZXJlciA9IGN1cnJlbnRQYXJ0aWFsUmVuZGVyZXI7XG4gICAgc2V0Q3VycmVudFBhcnRpYWxSZW5kZXJlcih0aGlzKTtcbiAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IERpc3BhdGNoZXI7XG5cbiAgICB0cnkge1xuICAgICAgLy8gTWFya3VwIGdlbmVyYXRlZCB3aXRoaW4gPFN1c3BlbnNlPiBlbmRzIHVwIGJ1ZmZlcmVkIHVudGlsIHdlIGtub3dcbiAgICAgIC8vIG5vdGhpbmcgaW4gdGhhdCBib3VuZGFyeSBzdXNwZW5kZWRcbiAgICAgIHZhciBvdXQgPSBbJyddO1xuICAgICAgdmFyIHN1c3BlbmRlZCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAob3V0WzBdLmxlbmd0aCA8IGJ5dGVzKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuZXhoYXVzdGVkID0gdHJ1ZTtcbiAgICAgICAgICBmcmVlVGhyZWFkSUQodGhpcy50aHJlYWRJRCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZnJhbWUgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHN1c3BlbmRlZCB8fCBmcmFtZS5jaGlsZEluZGV4ID49IGZyYW1lLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBmb290ZXIgPSBmcmFtZS5mb290ZXI7XG5cbiAgICAgICAgICBpZiAoZm9vdGVyICE9PSAnJykge1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c1dhc1RleHROb2RlID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcblxuICAgICAgICAgIGlmIChmcmFtZS50eXBlID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2VsZWN0VmFsdWUgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZnJhbWUudHlwZSAhPSBudWxsICYmIGZyYW1lLnR5cGUudHlwZSAhPSBudWxsICYmIGZyYW1lLnR5cGUudHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRSkge1xuICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gZnJhbWUudHlwZTtcbiAgICAgICAgICAgIHRoaXMucG9wUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZnJhbWUudHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRSkge1xuICAgICAgICAgICAgdGhpcy5zdXNwZW5zZURlcHRoLS07XG4gICAgICAgICAgICB2YXIgYnVmZmVyZWQgPSBvdXQucG9wKCk7XG5cbiAgICAgICAgICAgIGlmIChzdXNwZW5kZWQpIHtcbiAgICAgICAgICAgICAgc3VzcGVuZGVkID0gZmFsc2U7IC8vIElmIHJlbmRlcmluZyB3YXMgc3VzcGVuZGVkIGF0IHRoaXMgYm91bmRhcnksIHJlbmRlciB0aGUgZmFsbGJhY2tGcmFtZVxuXG4gICAgICAgICAgICAgIHZhciBmYWxsYmFja0ZyYW1lID0gZnJhbWUuZmFsbGJhY2tGcmFtZTtcblxuICAgICAgICAgICAgICBpZiAoIWZhbGxiYWNrRnJhbWUpIHtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcih0cnVlID8gXCJSZWFjdERPTVNlcnZlciBkaWQgbm90IGZpbmQgYW4gaW50ZXJuYWwgZmFsbGJhY2sgZnJhbWUgZm9yIFN1c3BlbnNlLiBUaGlzIGlzIGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS5cIiA6IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKGZhbGxiYWNrRnJhbWUpO1xuICAgICAgICAgICAgICBvdXRbdGhpcy5zdXNwZW5zZURlcHRoXSArPSAnPCEtLSQhLS0+JzsgLy8gU2tpcCBmbHVzaGluZyBvdXRwdXQgc2luY2Ugd2UncmUgc3dpdGNoaW5nIHRvIHRoZSBmYWxsYmFja1xuXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0W3RoaXMuc3VzcGVuc2VEZXB0aF0gKz0gYnVmZmVyZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBGbHVzaCBvdXRwdXRcblxuXG4gICAgICAgICAgb3V0W3RoaXMuc3VzcGVuc2VEZXB0aF0gKz0gZm9vdGVyO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNoaWxkID0gZnJhbWUuY2hpbGRyZW5bZnJhbWUuY2hpbGRJbmRleCsrXTtcbiAgICAgICAgdmFyIG91dEJ1ZmZlciA9ICcnO1xuXG4gICAgICAgIGlmICh0cnVlKSB7XG4gICAgICAgICAgcHVzaEN1cnJlbnREZWJ1Z1N0YWNrKHRoaXMuc3RhY2spOyAvLyBXZSdyZSBzdGFydGluZyB3b3JrIG9uIHRoaXMgZnJhbWUsIHNvIHJlc2V0IGl0cyBpbm5lciBzdGFjay5cblxuICAgICAgICAgIGZyYW1lLmRlYnVnRWxlbWVudFN0YWNrLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIG91dEJ1ZmZlciArPSB0aGlzLnJlbmRlcihjaGlsZCwgZnJhbWUuY29udGV4dCwgZnJhbWUuZG9tTmFtZXNwYWNlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKGVyciAhPSBudWxsICYmIHR5cGVvZiBlcnIudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKGVuYWJsZVN1c3BlbnNlU2VydmVyUmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgaWYgKCEodGhpcy5zdXNwZW5zZURlcHRoID4gMCkpIHtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcih0cnVlID8gXCJBIFJlYWN0IGNvbXBvbmVudCBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiIDogZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzdXNwZW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFmYWxzZSkge1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKHRydWUgPyBcIlJlYWN0RE9NU2VydmVyIGRvZXMgbm90IHlldCBzdXBwb3J0IFN1c3BlbnNlLlwiIDogZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOTQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAodHJ1ZSkge1xuICAgICAgICAgICAgcG9wQ3VycmVudERlYnVnU3RhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3V0Lmxlbmd0aCA8PSB0aGlzLnN1c3BlbnNlRGVwdGgpIHtcbiAgICAgICAgICBvdXQucHVzaCgnJyk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRbdGhpcy5zdXNwZW5zZURlcHRoXSArPSBvdXRCdWZmZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRbMF07XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICBzZXRDdXJyZW50UGFydGlhbFJlbmRlcmVyKHByZXZQYXJ0aWFsUmVuZGVyZXIpO1xuICAgICAgcmVzZXRIb29rc1N0YXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoY2hpbGQsIGNvbnRleHQsIHBhcmVudE5hbWVzcGFjZSkge1xuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHZhciB0ZXh0ID0gJycgKyBjaGlsZDtcblxuICAgICAgaWYgKHRleHQgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWFrZVN0YXRpY01hcmt1cCkge1xuICAgICAgICByZXR1cm4gZXNjYXBlVGV4dEZvckJyb3dzZXIodGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGUpIHtcbiAgICAgICAgcmV0dXJuICc8IS0tIC0tPicgKyBlc2NhcGVUZXh0Rm9yQnJvd3Nlcih0ZXh0KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmV2aW91c1dhc1RleHROb2RlID0gdHJ1ZTtcbiAgICAgIHJldHVybiBlc2NhcGVUZXh0Rm9yQnJvd3Nlcih0ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5leHRDaGlsZDtcblxuICAgICAgdmFyIF9yZXNvbHZlID0gcmVzb2x2ZShjaGlsZCwgY29udGV4dCwgdGhpcy50aHJlYWRJRCk7XG5cbiAgICAgIG5leHRDaGlsZCA9IF9yZXNvbHZlLmNoaWxkO1xuICAgICAgY29udGV4dCA9IF9yZXNvbHZlLmNvbnRleHQ7XG5cbiAgICAgIGlmIChuZXh0Q2hpbGQgPT09IG51bGwgfHwgbmV4dENoaWxkID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9IGVsc2UgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChuZXh0Q2hpbGQpKSB7XG4gICAgICAgIGlmIChuZXh0Q2hpbGQgIT0gbnVsbCAmJiBuZXh0Q2hpbGQuJCR0eXBlb2YgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENhdGNoIHVuZXhwZWN0ZWQgc3BlY2lhbCB0eXBlcyBlYXJseS5cbiAgICAgICAgICB2YXIgJCR0eXBlb2YgPSBuZXh0Q2hpbGQuJCR0eXBlb2Y7XG5cbiAgICAgICAgICBpZiAoISgkJHR5cGVvZiAhPT0gUkVBQ1RfUE9SVEFMX1RZUEUpKSB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCBcIlBvcnRhbHMgYXJlIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIGJ5IHRoZSBzZXJ2ZXIgcmVuZGVyZXIuIFJlbmRlciB0aGVtIGNvbmRpdGlvbmFsbHkgc28gdGhhdCB0aGV5IG9ubHkgYXBwZWFyIG9uIHRoZSBjbGllbnQgcmVuZGVyLlwiICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBDYXRjaC1hbGwgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIGlmIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKSBzdXBwb3J0cyBzb21lIG5ldyB0eXBlLlxuXG5cbiAgICAgICAgICB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCBcIlVua25vd24gZWxlbWVudC1saWtlIG9iamVjdCB0eXBlOiBcIiArICQkdHlwZW9mLnRvU3RyaW5nKCkgKyBcIi4gVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLlwiICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IHRvQXJyYXkobmV4dENoaWxkKTtcbiAgICAgICAgdmFyIGZyYW1lID0ge1xuICAgICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgICAgZG9tTmFtZXNwYWNlOiBwYXJlbnROYW1lc3BhY2UsXG4gICAgICAgICAgY2hpbGRyZW46IG5leHRDaGlsZHJlbixcbiAgICAgICAgICBjaGlsZEluZGV4OiAwLFxuICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgZm9vdGVyOiAnJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHtcbiAgICAgICAgICBmcmFtZS5kZWJ1Z0VsZW1lbnRTdGFjayA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGFjay5wdXNoKGZyYW1lKTtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSAvLyBTYWZlIGJlY2F1c2Ugd2UganVzdCBjaGVja2VkIGl0J3MgYW4gZWxlbWVudC5cblxuXG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSBuZXh0Q2hpbGQ7XG4gICAgICB2YXIgZWxlbWVudFR5cGUgPSBuZXh0RWxlbWVudC50eXBlO1xuXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnRUeXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJET00obmV4dEVsZW1lbnQsIGNvbnRleHQsIHBhcmVudE5hbWVzcGFjZSk7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZWxlbWVudFR5cGUpIHtcbiAgICAgICAgLy8gVE9ETzogTGVnYWN5SGlkZGVuIGFjdHMgdGhlIHNhbWUgYXMgYSBmcmFnbWVudC4gVGhpcyBvbmx5IHdvcmtzXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgY3VycmVudGx5IGFzc3VtZSB0aGF0IGV2ZXJ5IGluc3RhbmNlIG9mIExlZ2FjeUhpZGRlbiBpc1xuICAgICAgICAvLyBhY2NvbXBhbmllZCBieSBhIGhvc3QgY29tcG9uZW50IHdyYXBwZXIuIEluIHRoZSBoaWRkZW4gbW9kZSwgdGhlIGhvc3RcbiAgICAgICAgLy8gY29tcG9uZW50IGlzIGdpdmVuIGEgYGhpZGRlbmAgYXR0cmlidXRlLCB3aGljaCBlbnN1cmVzIHRoYXQgdGhlXG4gICAgICAgIC8vIGluaXRpYWwgSFRNTCBpcyBub3QgdmlzaWJsZS4gVG8gc3VwcG9ydCB0aGUgdXNlIG9mIExlZ2FjeUhpZGRlbiBhcyBhXG4gICAgICAgIC8vIHRydWUgZnJhZ21lbnQsIHdpdGhvdXQgYW4gZXh0cmEgRE9NIG5vZGUsIHdlIHdvdWxkIGhhdmUgdG8gaGlkZSB0aGVcbiAgICAgICAgLy8gaW5pdGlhbCBIVE1MIGluIHNvbWUgb3RoZXIgd2F5LlxuICAgICAgICBjYXNlIFJFQUNUX0xFR0FDWV9ISURERU5fVFlQRTpcbiAgICAgICAgY2FzZSBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRTpcbiAgICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFOlxuICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9uZXh0Q2hpbGRyZW4gPSB0b0FycmF5KG5leHRDaGlsZC5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgICAgICAgIHZhciBfZnJhbWUgPSB7XG4gICAgICAgICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgICAgICAgIGRvbU5hbWVzcGFjZTogcGFyZW50TmFtZXNwYWNlLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogX25leHRDaGlsZHJlbixcbiAgICAgICAgICAgICAgY2hpbGRJbmRleDogMCxcbiAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgICAgICAgZm9vdGVyOiAnJ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBfZnJhbWUuZGVidWdFbGVtZW50U3RhY2sgPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKF9mcmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvciggXCJSZWFjdERPTVNlcnZlciBkb2VzIG5vdCB5ZXQgc3VwcG9ydCBTdXNwZW5zZS5cIiApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lLW5vLWZhbGx0aHJvdWdoXG5cbiAgICAgICAgY2FzZSBSRUFDVF9TQ09QRV9UWVBFOlxuICAgICAgICAgIHtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoIFwiUmVhY3RET01TZXJ2ZXIgZG9lcyBub3QgeWV0IHN1cHBvcnQgc2NvcGUgY29tcG9uZW50cy5cIiApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnRUeXBlID09PSAnb2JqZWN0JyAmJiBlbGVtZW50VHlwZSAhPT0gbnVsbCkge1xuICAgICAgICBzd2l0Y2ggKGVsZW1lbnRUeXBlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IG5leHRDaGlsZDtcblxuICAgICAgICAgICAgICB2YXIgX25leHRDaGlsZHJlbjU7XG5cbiAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudElkZW50aXR5ID0ge307XG4gICAgICAgICAgICAgIHByZXBhcmVUb1VzZUhvb2tzKGNvbXBvbmVudElkZW50aXR5KTtcbiAgICAgICAgICAgICAgX25leHRDaGlsZHJlbjUgPSBlbGVtZW50VHlwZS5yZW5kZXIoZWxlbWVudC5wcm9wcywgZWxlbWVudC5yZWYpO1xuICAgICAgICAgICAgICBfbmV4dENoaWxkcmVuNSA9IGZpbmlzaEhvb2tzKGVsZW1lbnRUeXBlLnJlbmRlciwgZWxlbWVudC5wcm9wcywgX25leHRDaGlsZHJlbjUsIGVsZW1lbnQucmVmKTtcbiAgICAgICAgICAgICAgX25leHRDaGlsZHJlbjUgPSB0b0FycmF5KF9uZXh0Q2hpbGRyZW41KTtcbiAgICAgICAgICAgICAgdmFyIF9mcmFtZTUgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkb21OYW1lc3BhY2U6IHBhcmVudE5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogX25leHRDaGlsZHJlbjUsXG4gICAgICAgICAgICAgICAgY2hpbGRJbmRleDogMCxcbiAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGZvb3RlcjogJydcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX2ZyYW1lNS5kZWJ1Z0VsZW1lbnRTdGFjayA9IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKF9mcmFtZTUpO1xuICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFyIF9lbGVtZW50ID0gbmV4dENoaWxkO1xuICAgICAgICAgICAgICB2YXIgX25leHRDaGlsZHJlbjYgPSBbUmVhY3QuY3JlYXRlRWxlbWVudChlbGVtZW50VHlwZS50eXBlLCBfYXNzaWduKHtcbiAgICAgICAgICAgICAgICByZWY6IF9lbGVtZW50LnJlZlxuICAgICAgICAgICAgICB9LCBfZWxlbWVudC5wcm9wcykpXTtcbiAgICAgICAgICAgICAgdmFyIF9mcmFtZTYgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICBkb21OYW1lc3BhY2U6IHBhcmVudE5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogX25leHRDaGlsZHJlbjYsXG4gICAgICAgICAgICAgICAgY2hpbGRJbmRleDogMCxcbiAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGZvb3RlcjogJydcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX2ZyYW1lNi5kZWJ1Z0VsZW1lbnRTdGFjayA9IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKF9mcmFtZTYpO1xuICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBwcm92aWRlciA9IG5leHRDaGlsZDtcbiAgICAgICAgICAgICAgdmFyIG5leHRQcm9wcyA9IHByb3ZpZGVyLnByb3BzO1xuXG4gICAgICAgICAgICAgIHZhciBfbmV4dENoaWxkcmVuNyA9IHRvQXJyYXkobmV4dFByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgICAgICAgICB2YXIgX2ZyYW1lNyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBwcm92aWRlcixcbiAgICAgICAgICAgICAgICBkb21OYW1lc3BhY2U6IHBhcmVudE5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogX25leHRDaGlsZHJlbjcsXG4gICAgICAgICAgICAgICAgY2hpbGRJbmRleDogMCxcbiAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGZvb3RlcjogJydcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX2ZyYW1lNy5kZWJ1Z0VsZW1lbnRTdGFjayA9IFtdO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGhpcy5wdXNoUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goX2ZyYW1lNyk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIgcmVhY3RDb250ZXh0ID0gbmV4dENoaWxkLnR5cGU7IC8vIFRoZSBsb2dpYyBiZWxvdyBmb3IgQ29udGV4dCBkaWZmZXJzIGRlcGVuZGluZyBvbiBQUk9EIG9yIERFViBtb2RlLiBJblxuICAgICAgICAgICAgICAvLyBERVYgbW9kZSwgd2UgY3JlYXRlIGEgc2VwYXJhdGUgb2JqZWN0IGZvciBDb250ZXh0LkNvbnN1bWVyIHRoYXQgYWN0c1xuICAgICAgICAgICAgICAvLyBsaWtlIGEgcHJveHkgdG8gQ29udGV4dC4gVGhpcyBwcm94eSBvYmplY3QgYWRkcyB1bm5lY2Vzc2FyeSBjb2RlIGluIFBST0RcbiAgICAgICAgICAgICAgLy8gc28gd2UgdXNlIHRoZSBvbGQgYmVoYXZpb3VyIChDb250ZXh0LkNvbnN1bWVyIHJlZmVyZW5jZXMgQ29udGV4dCkgdG9cbiAgICAgICAgICAgICAgLy8gcmVkdWNlIHNpemUgYW5kIG92ZXJoZWFkLiBUaGUgc2VwYXJhdGUgb2JqZWN0IHJlZmVyZW5jZXMgY29udGV4dCB2aWFcbiAgICAgICAgICAgICAgLy8gYSBwcm9wZXJ0eSBjYWxsZWQgXCJfY29udGV4dFwiLCB3aGljaCBhbHNvIGdpdmVzIHVzIHRoZSBhYmlsaXR5IHRvIGNoZWNrXG4gICAgICAgICAgICAgIC8vIGluIERFViBtb2RlIGlmIHRoaXMgcHJvcGVydHkgZXhpc3RzIG9yIG5vdCBhbmQgd2FybiBpZiBpdCBkb2VzIG5vdC5cblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWN0Q29udGV4dC5fY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGlzIG1heSBiZSBiZWNhdXNlIGl0J3MgYSBDb250ZXh0IChyYXRoZXIgdGhhbiBhIENvbnN1bWVyKS5cbiAgICAgICAgICAgICAgICAgIC8vIE9yIGl0IG1heSBiZSBiZWNhdXNlIGl0J3Mgb2xkZXIgUmVhY3Qgd2hlcmUgdGhleSdyZSB0aGUgc2FtZSB0aGluZy5cbiAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byB3YXJuIGlmIHdlJ3JlIHN1cmUgaXQncyBhIG5ldyBSZWFjdC5cbiAgICAgICAgICAgICAgICAgIGlmIChyZWFjdENvbnRleHQgIT09IHJlYWN0Q29udGV4dC5Db25zdW1lcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lcikge1xuICAgICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lciA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICBlcnJvcignUmVuZGVyaW5nIDxDb250ZXh0PiBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gJyArICdhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gcmVuZGVyIDxDb250ZXh0LkNvbnN1bWVyPiBpbnN0ZWFkPycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJlYWN0Q29udGV4dCA9IHJlYWN0Q29udGV4dC5fY29udGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgX25leHRQcm9wcyA9IG5leHRDaGlsZC5wcm9wcztcbiAgICAgICAgICAgICAgdmFyIHRocmVhZElEID0gdGhpcy50aHJlYWRJRDtcbiAgICAgICAgICAgICAgdmFsaWRhdGVDb250ZXh0Qm91bmRzKHJlYWN0Q29udGV4dCwgdGhyZWFkSUQpO1xuICAgICAgICAgICAgICB2YXIgbmV4dFZhbHVlID0gcmVhY3RDb250ZXh0W3RocmVhZElEXTtcblxuICAgICAgICAgICAgICB2YXIgX25leHRDaGlsZHJlbjggPSB0b0FycmF5KF9uZXh0UHJvcHMuY2hpbGRyZW4obmV4dFZhbHVlKSk7XG5cbiAgICAgICAgICAgICAgdmFyIF9mcmFtZTggPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogbmV4dENoaWxkLFxuICAgICAgICAgICAgICAgIGRvbU5hbWVzcGFjZTogcGFyZW50TmFtZXNwYWNlLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBfbmV4dENoaWxkcmVuOCxcbiAgICAgICAgICAgICAgICBjaGlsZEluZGV4OiAwLFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICAgICAgZm9vdGVyOiAnJ1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBfZnJhbWU4LmRlYnVnRWxlbWVudFN0YWNrID0gW107XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goX2ZyYW1lOCk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUtbm8tZmFsbHRocm91Z2hcblxuICAgICAgICAgIGNhc2UgUkVBQ1RfRlVOREFNRU5UQUxfVFlQRTpcbiAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoIFwiUmVhY3RET01TZXJ2ZXIgZG9lcyBub3QgeWV0IHN1cHBvcnQgdGhlIGZ1bmRhbWVudGFsIEFQSS5cIiApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZS1uby1mYWxsdGhyb3VnaFxuXG4gICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBfZWxlbWVudDIgPSBuZXh0Q2hpbGQ7XG4gICAgICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gbmV4dENoaWxkLnR5cGU7IC8vIEF0dGVtcHQgdG8gaW5pdGlhbGl6ZSBsYXp5IGNvbXBvbmVudCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlXG4gICAgICAgICAgICAgIC8vIHN1c3BlbnNlIHNlcnZlci1zaWRlIHJlbmRlcmVyIGlzIGVuYWJsZWQgc28gc3luY2hyb25vdXNseVxuICAgICAgICAgICAgICAvLyByZXNvbHZlZCBjb25zdHJ1Y3RvcnMgYXJlIHN1cHBvcnRlZC5cblxuICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gICAgICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGluaXQocGF5bG9hZCk7XG4gICAgICAgICAgICAgIHZhciBfbmV4dENoaWxkcmVuMTAgPSBbUmVhY3QuY3JlYXRlRWxlbWVudChyZXN1bHQsIF9hc3NpZ24oe1xuICAgICAgICAgICAgICAgIHJlZjogX2VsZW1lbnQyLnJlZlxuICAgICAgICAgICAgICB9LCBfZWxlbWVudDIucHJvcHMpKV07XG4gICAgICAgICAgICAgIHZhciBfZnJhbWUxMCA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICAgICAgICAgIGRvbU5hbWVzcGFjZTogcGFyZW50TmFtZXNwYWNlLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBfbmV4dENoaWxkcmVuMTAsXG4gICAgICAgICAgICAgICAgY2hpbGRJbmRleDogMCxcbiAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgICAgIGZvb3RlcjogJydcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX2ZyYW1lMTAuZGVidWdFbGVtZW50U3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChfZnJhbWUxMCk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaW5mbyA9ICcnO1xuXG4gICAgICB7XG4gICAgICAgIHZhciBvd25lciA9IG5leHRFbGVtZW50Ll9vd25lcjtcblxuICAgICAgICBpZiAoZWxlbWVudFR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgZWxlbWVudFR5cGUgPT09ICdvYmplY3QnICYmIGVsZW1lbnRUeXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKGVsZW1lbnRUeXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpbmZvICs9ICcgWW91IGxpa2VseSBmb3Jnb3QgdG8gZXhwb3J0IHlvdXIgY29tcG9uZW50IGZyb20gdGhlIGZpbGUgJyArIFwiaXQncyBkZWZpbmVkIGluLCBvciB5b3UgbWlnaHQgaGF2ZSBtaXhlZCB1cCBkZWZhdWx0IGFuZCBcIiArICduYW1lZCBpbXBvcnRzLic7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXIgPyBnZXRDb21wb25lbnROYW1lKG93bmVyKSA6IG51bGw7XG5cbiAgICAgICAgaWYgKG93bmVyTmFtZSkge1xuICAgICAgICAgIGluZm8gKz0gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgb3duZXJOYW1lICsgJ2AuJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB7XG4gICAgICAgIHtcbiAgICAgICAgICB0aHJvdyBFcnJvciggXCJFbGVtZW50IHR5cGUgaXMgaW52YWxpZDogZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciBidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpIGJ1dCBnb3Q6IFwiICsgKGVsZW1lbnRUeXBlID09IG51bGwgPyBlbGVtZW50VHlwZSA6IHR5cGVvZiBlbGVtZW50VHlwZSkgKyBcIi5cIiArIGluZm8gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyRE9NID0gZnVuY3Rpb24gcmVuZGVyRE9NKGVsZW1lbnQsIGNvbnRleHQsIHBhcmVudE5hbWVzcGFjZSkge1xuICAgIHZhciB0YWcgPSBlbGVtZW50LnR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgbmFtZXNwYWNlID0gcGFyZW50TmFtZXNwYWNlO1xuXG4gICAgaWYgKHBhcmVudE5hbWVzcGFjZSA9PT0gTmFtZXNwYWNlcy5odG1sKSB7XG4gICAgICBuYW1lc3BhY2UgPSBnZXRJbnRyaW5zaWNOYW1lc3BhY2UodGFnKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpZiAobmFtZXNwYWNlID09PSBOYW1lc3BhY2VzLmh0bWwpIHtcbiAgICAgICAgLy8gU2hvdWxkIHRoaXMgY2hlY2sgYmUgZ2F0ZWQgYnkgcGFyZW50IG5hbWVzcGFjZT8gTm90IHN1cmUgd2Ugd2FudCB0b1xuICAgICAgICAvLyBhbGxvdyA8U1ZHPiBvciA8bUFUSD4uXG4gICAgICAgIGlmICh0YWcgIT09IGVsZW1lbnQudHlwZSkge1xuICAgICAgICAgIGVycm9yKCc8JXMgLz4gaXMgdXNpbmcgaW5jb3JyZWN0IGNhc2luZy4gJyArICdVc2UgUGFzY2FsQ2FzZSBmb3IgUmVhY3QgY29tcG9uZW50cywgJyArICdvciBsb3dlcmNhc2UgZm9yIEhUTUwgZWxlbWVudHMuJywgZWxlbWVudC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZyk7XG4gICAgdmFyIHByb3BzID0gZWxlbWVudC5wcm9wcztcblxuICAgIGlmICh0YWcgPT09ICdpbnB1dCcpIHtcbiAgICAgIHtcbiAgICAgICAgY2hlY2tDb250cm9sbGVkVmFsdWVQcm9wcygnaW5wdXQnLCBwcm9wcyk7XG5cbiAgICAgICAgaWYgKHByb3BzLmNoZWNrZWQgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuRGVmYXVsdENoZWNrZWQpIHtcbiAgICAgICAgICBlcnJvcignJXMgY29udGFpbnMgYW4gaW5wdXQgb2YgdHlwZSAlcyB3aXRoIGJvdGggY2hlY2tlZCBhbmQgZGVmYXVsdENoZWNrZWQgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIGNoZWNrZWQgcHJvcCwgb3IgdGhlIGRlZmF1bHRDaGVja2VkIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvY29udHJvbGxlZC1jb21wb25lbnRzJywgJ0EgY29tcG9uZW50JywgcHJvcHMudHlwZSk7XG5cbiAgICAgICAgICBkaWRXYXJuRGVmYXVsdENoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5EZWZhdWx0SW5wdXRWYWx1ZSkge1xuICAgICAgICAgIGVycm9yKCclcyBjb250YWlucyBhbiBpbnB1dCBvZiB0eXBlICVzIHdpdGggYm90aCB2YWx1ZSBhbmQgZGVmYXVsdFZhbHVlIHByb3BzLiAnICsgJ0lucHV0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSB2YWx1ZSBwcm9wLCBvciB0aGUgZGVmYXVsdFZhbHVlIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvY29udHJvbGxlZC1jb21wb25lbnRzJywgJ0EgY29tcG9uZW50JywgcHJvcHMudHlwZSk7XG5cbiAgICAgICAgICBkaWRXYXJuRGVmYXVsdElucHV0VmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByb3BzID0gX2Fzc2lnbih7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgICAgfSwgcHJvcHMsIHtcbiAgICAgICAgZGVmYXVsdENoZWNrZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSAhPSBudWxsID8gcHJvcHMudmFsdWUgOiBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgIGNoZWNrZWQ6IHByb3BzLmNoZWNrZWQgIT0gbnVsbCA/IHByb3BzLmNoZWNrZWQgOiBwcm9wcy5kZWZhdWx0Q2hlY2tlZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgIHtcbiAgICAgICAgY2hlY2tDb250cm9sbGVkVmFsdWVQcm9wcygndGV4dGFyZWEnLCBwcm9wcyk7XG5cbiAgICAgICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5EZWZhdWx0VGV4dGFyZWFWYWx1ZSkge1xuICAgICAgICAgIGVycm9yKCdUZXh0YXJlYSBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgdGV4dGFyZWEgJyArICdhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9jb250cm9sbGVkLWNvbXBvbmVudHMnKTtcblxuICAgICAgICAgIGRpZFdhcm5EZWZhdWx0VGV4dGFyZWFWYWx1ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IHByb3BzLnZhbHVlO1xuXG4gICAgICBpZiAoaW5pdGlhbFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTsgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGNoaWxkcmVuIGNvbnRlbnQgaW4gPHRleHRhcmVhPi5cblxuICAgICAgICB2YXIgdGV4dGFyZWFDaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuXG4gICAgICAgIGlmICh0ZXh0YXJlYUNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvcignVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIGluc3RlYWQgb2Ygc2V0dGluZyAnICsgJ2NoaWxkcmVuIG9uIDx0ZXh0YXJlYT4uJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCEoZGVmYXVsdFZhbHVlID09IG51bGwpKSB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCBcIklmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi5cIiApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRleHRhcmVhQ2hpbGRyZW4pKSB7XG4gICAgICAgICAgICBpZiAoISh0ZXh0YXJlYUNoaWxkcmVuLmxlbmd0aCA8PSAxKSkge1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoIFwiPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLlwiICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGV4dGFyZWFDaGlsZHJlbiA9IHRleHRhcmVhQ2hpbGRyZW5bMF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVmYXVsdFZhbHVlID0gJycgKyB0ZXh0YXJlYUNoaWxkcmVuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBpbml0aWFsVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHByb3BzID0gX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgY2hpbGRyZW46ICcnICsgaW5pdGlhbFZhbHVlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIHtcbiAgICAgICAgY2hlY2tDb250cm9sbGVkVmFsdWVQcm9wcygnc2VsZWN0JywgcHJvcHMpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVQcm9wTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcHJvcE5hbWUgPSB2YWx1ZVByb3BOYW1lc1tpXTtcblxuICAgICAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSk7XG5cbiAgICAgICAgICBpZiAocHJvcHMubXVsdGlwbGUgJiYgIWlzQXJyYXkpIHtcbiAgICAgICAgICAgIGVycm9yKCdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYW4gYXJyYXkgaWYgJyArICdgbXVsdGlwbGVgIGlzIHRydWUuJywgcHJvcE5hbWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXByb3BzLm11bHRpcGxlICYmIGlzQXJyYXkpIHtcbiAgICAgICAgICAgIGVycm9yKCdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYSBzY2FsYXIgJyArICd2YWx1ZSBpZiBgbXVsdGlwbGVgIGlzIGZhbHNlLicsIHByb3BOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkRlZmF1bHRTZWxlY3RWYWx1ZSkge1xuICAgICAgICAgIGVycm9yKCdTZWxlY3QgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIHNlbGVjdCAnICsgJ2VsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvY29udHJvbGxlZC1jb21wb25lbnRzJyk7XG5cbiAgICAgICAgICBkaWRXYXJuRGVmYXVsdFNlbGVjdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmN1cnJlbnRTZWxlY3RWYWx1ZSA9IHByb3BzLnZhbHVlICE9IG51bGwgPyBwcm9wcy52YWx1ZSA6IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAgIHByb3BzID0gX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0YWcgPT09ICdvcHRpb24nKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBudWxsO1xuICAgICAgdmFyIHNlbGVjdFZhbHVlID0gdGhpcy5jdXJyZW50U2VsZWN0VmFsdWU7XG4gICAgICB2YXIgb3B0aW9uQ2hpbGRyZW4gPSBmbGF0dGVuT3B0aW9uQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoc2VsZWN0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgaWYgKHByb3BzLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlICsgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBvcHRpb25DaGlsZHJlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0VmFsdWUpKSB7XG4gICAgICAgICAgLy8gbXVsdGlwbGVcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlbGVjdFZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoJycgKyBzZWxlY3RWYWx1ZVtqXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0ZWQgPSAnJyArIHNlbGVjdFZhbHVlID09PSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb3BzID0gX2Fzc2lnbih7XG4gICAgICAgICAgc2VsZWN0ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBjaGlsZHJlbjogdW5kZWZpbmVkXG4gICAgICAgIH0sIHByb3BzLCB7XG4gICAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgICAgIGNoaWxkcmVuOiBvcHRpb25DaGlsZHJlblxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB7XG4gICAgICB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50KHRhZywgcHJvcHMpO1xuICAgIH1cblxuICAgIGFzc2VydFZhbGlkUHJvcHModGFnLCBwcm9wcyk7XG4gICAgdmFyIG91dCA9IGNyZWF0ZU9wZW5UYWdNYXJrdXAoZWxlbWVudC50eXBlLCB0YWcsIHByb3BzLCBuYW1lc3BhY2UsIHRoaXMubWFrZVN0YXRpY01hcmt1cCwgdGhpcy5zdGFjay5sZW5ndGggPT09IDEpO1xuICAgIHZhciBmb290ZXIgPSAnJztcblxuICAgIGlmIChvbWl0dGVkQ2xvc2VUYWdzLmhhc093blByb3BlcnR5KHRhZykpIHtcbiAgICAgIG91dCArPSAnLz4nO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJz4nO1xuICAgICAgZm9vdGVyID0gJzwvJyArIGVsZW1lbnQudHlwZSArICc+JztcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW47XG4gICAgdmFyIGlubmVyTWFya3VwID0gZ2V0Tm9uQ2hpbGRyZW5Jbm5lck1hcmt1cChwcm9wcyk7XG5cbiAgICBpZiAoaW5uZXJNYXJrdXAgIT0gbnVsbCkge1xuICAgICAgY2hpbGRyZW4gPSBbXTtcblxuICAgICAgaWYgKG5ld2xpbmVFYXRpbmdUYWdzLmhhc093blByb3BlcnR5KHRhZykgJiYgaW5uZXJNYXJrdXAuY2hhckF0KDApID09PSAnXFxuJykge1xuICAgICAgICAvLyB0ZXh0L2h0bWwgaWdub3JlcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZXNlIHRhZ3MgaWYgaXQncyBhIG5ld2xpbmVcbiAgICAgICAgLy8gUHJlZmVyIHRvIGJyZWFrIGFwcGxpY2F0aW9uL3htbCBvdmVyIHRleHQvaHRtbCAoZm9yIG5vdykgYnkgYWRkaW5nXG4gICAgICAgIC8vIGEgbmV3bGluZSBzcGVjaWZpY2FsbHkgdG8gZ2V0IGVhdGVuIGJ5IHRoZSBwYXJzZXIuIChBbHRlcm5hdGVseSBmb3JcbiAgICAgICAgLy8gdGV4dGFyZWFzLCByZXBsYWNpbmcgXCJeXFxuXCIgd2l0aCBcIlxcclxcblwiIGRvZXNuJ3QgZ2V0IGVhdGVuLCBhbmQgdGhlIGZpcnN0XG4gICAgICAgIC8vIFxcciBpcyBub3JtYWxpemVkIG91dCBieSBIVE1MVGV4dEFyZWFFbGVtZW50I3ZhbHVlLilcbiAgICAgICAgLy8gU2VlOiA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbC1wb2x5Z2xvdC8jbmV3bGluZXMtaW4tdGV4dGFyZWEtYW5kLXByZT5cbiAgICAgICAgLy8gU2VlOiA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjZWxlbWVudC1yZXN0cmljdGlvbnM+XG4gICAgICAgIC8vIFNlZTogPGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L3N5bnRheC5odG1sI25ld2xpbmVzPlxuICAgICAgICAvLyBTZWU6IFBhcnNpbmcgb2YgXCJ0ZXh0YXJlYVwiIFwibGlzdGluZ1wiIGFuZCBcInByZVwiIGVsZW1lbnRzXG4gICAgICAgIC8vICBmcm9tIDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5ib2R5PlxuICAgICAgICBvdXQgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIG91dCArPSBpbm5lck1hcmt1cDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRyZW4gPSB0b0FycmF5KHByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICB2YXIgZnJhbWUgPSB7XG4gICAgICBkb21OYW1lc3BhY2U6IGdldENoaWxkTmFtZXNwYWNlKHBhcmVudE5hbWVzcGFjZSwgZWxlbWVudC50eXBlKSxcbiAgICAgIHR5cGU6IHRhZyxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgIGNoaWxkSW5kZXg6IDAsXG4gICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgZm9vdGVyOiBmb290ZXJcbiAgICB9O1xuXG4gICAge1xuICAgICAgZnJhbWUuZGVidWdFbGVtZW50U3RhY2sgPSBbXTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YWNrLnB1c2goZnJhbWUpO1xuICAgIHRoaXMucHJldmlvdXNXYXNUZXh0Tm9kZSA9IGZhbHNlO1xuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0RE9NU2VydmVyUmVuZGVyZXI7XG59KCk7XG5cbi8qKlxuICogUmVuZGVyIGEgUmVhY3RFbGVtZW50IHRvIGl0cyBpbml0aWFsIEhUTUwuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBvbiB0aGVcbiAqIHNlcnZlci5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtZG9tLXNlcnZlci5odG1sI3JlbmRlcnRvc3RyaW5nXG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyVG9TdHJpbmcoZWxlbWVudCwgb3B0aW9ucykge1xuICB2YXIgcmVuZGVyZXIgPSBuZXcgUmVhY3RET01TZXJ2ZXJSZW5kZXJlcihlbGVtZW50LCBmYWxzZSwgb3B0aW9ucyk7XG5cbiAgdHJ5IHtcbiAgICB2YXIgbWFya3VwID0gcmVuZGVyZXIucmVhZChJbmZpbml0eSk7XG4gICAgcmV0dXJuIG1hcmt1cDtcbiAgfSBmaW5hbGx5IHtcbiAgICByZW5kZXJlci5kZXN0cm95KCk7XG4gIH1cbn1cbi8qKlxuICogU2ltaWxhciB0byByZW5kZXJUb1N0cmluZywgZXhjZXB0IHRoaXMgZG9lc24ndCBjcmVhdGUgZXh0cmEgRE9NIGF0dHJpYnV0ZXNcbiAqIHN1Y2ggYXMgZGF0YS1yZWFjdC1pZCB0aGF0IFJlYWN0IHVzZXMgaW50ZXJuYWxseS5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtZG9tLXNlcnZlci5odG1sI3JlbmRlcnRvc3RhdGljbWFya3VwXG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyVG9TdGF0aWNNYXJrdXAoZWxlbWVudCwgb3B0aW9ucykge1xuICB2YXIgcmVuZGVyZXIgPSBuZXcgUmVhY3RET01TZXJ2ZXJSZW5kZXJlcihlbGVtZW50LCB0cnVlLCBvcHRpb25zKTtcblxuICB0cnkge1xuICAgIHZhciBtYXJrdXAgPSByZW5kZXJlci5yZWFkKEluZmluaXR5KTtcbiAgICByZXR1cm4gbWFya3VwO1xuICB9IGZpbmFsbHkge1xuICAgIHJlbmRlcmVyLmRlc3Ryb3koKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbnZhciBSZWFjdE1hcmt1cFJlYWRhYmxlU3RyZWFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhZGFibGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoUmVhY3RNYXJrdXBSZWFkYWJsZVN0cmVhbSwgX1JlYWRhYmxlKTtcblxuICBmdW5jdGlvbiBSZWFjdE1hcmt1cFJlYWRhYmxlU3RyZWFtKGVsZW1lbnQsIG1ha2VTdGF0aWNNYXJrdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAvLyBDYWxscyB0aGUgc3RyZWFtLlJlYWRhYmxlKG9wdGlvbnMpIGNvbnN0cnVjdG9yLiBDb25zaWRlciBleHBvc2luZyBidWlsdC1pblxuICAgIC8vIGZlYXR1cmVzIGxpa2UgaGlnaFdhdGVyTWFyayBpbiB0aGUgZnV0dXJlLlxuICAgIF90aGlzID0gX1JlYWRhYmxlLmNhbGwodGhpcywge30pIHx8IHRoaXM7XG4gICAgX3RoaXMucGFydGlhbFJlbmRlcmVyID0gbmV3IFJlYWN0RE9NU2VydmVyUmVuZGVyZXIoZWxlbWVudCwgbWFrZVN0YXRpY01hcmt1cCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlYWN0TWFya3VwUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5fZGVzdHJveSA9IGZ1bmN0aW9uIF9kZXN0cm95KGVyciwgY2FsbGJhY2spIHtcbiAgICB0aGlzLnBhcnRpYWxSZW5kZXJlci5kZXN0cm95KCk7XG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfTtcblxuICBfcHJvdG8uX3JlYWQgPSBmdW5jdGlvbiBfcmVhZChzaXplKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLnBhcnRpYWxSZW5kZXJlci5yZWFkKHNpemUpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMuZGVzdHJveShlcnIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3RNYXJrdXBSZWFkYWJsZVN0cmVhbTtcbn0oc3RyZWFtLlJlYWRhYmxlKTtcbi8qKlxuICogUmVuZGVyIGEgUmVhY3RFbGVtZW50IHRvIGl0cyBpbml0aWFsIEhUTUwuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBvbiB0aGVcbiAqIHNlcnZlci5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtZG9tLXNlcnZlci5odG1sI3JlbmRlcnRvbm9kZXN0cmVhbVxuICovXG5cblxuZnVuY3Rpb24gcmVuZGVyVG9Ob2RlU3RyZWFtKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBSZWFjdE1hcmt1cFJlYWRhYmxlU3RyZWFtKGVsZW1lbnQsIGZhbHNlLCBvcHRpb25zKTtcbn1cbi8qKlxuICogU2ltaWxhciB0byByZW5kZXJUb05vZGVTdHJlYW0sIGV4Y2VwdCB0aGlzIGRvZXNuJ3QgY3JlYXRlIGV4dHJhIERPTSBhdHRyaWJ1dGVzXG4gKiBzdWNoIGFzIGRhdGEtcmVhY3QtaWQgdGhhdCBSZWFjdCB1c2VzIGludGVybmFsbHkuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWRvbS1zZXJ2ZXIuaHRtbCNyZW5kZXJ0b3N0YXRpY25vZGVzdHJlYW1cbiAqL1xuXG5mdW5jdGlvbiByZW5kZXJUb1N0YXRpY05vZGVTdHJlYW0oZWxlbWVudCwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFJlYWN0TWFya3VwUmVhZGFibGVTdHJlYW0oZWxlbWVudCwgdHJ1ZSwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydHMucmVuZGVyVG9Ob2RlU3RyZWFtID0gcmVuZGVyVG9Ob2RlU3RyZWFtO1xuZXhwb3J0cy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwO1xuZXhwb3J0cy5yZW5kZXJUb1N0YXRpY05vZGVTdHJlYW0gPSByZW5kZXJUb1N0YXRpY05vZGVTdHJlYW07XG5leHBvcnRzLnJlbmRlclRvU3RyaW5nID0gcmVuZGVyVG9TdHJpbmc7XG5leHBvcnRzLnZlcnNpb24gPSBSZWFjdFZlcnNpb247XG4gIH0pKCk7XG59XG4iXX0=