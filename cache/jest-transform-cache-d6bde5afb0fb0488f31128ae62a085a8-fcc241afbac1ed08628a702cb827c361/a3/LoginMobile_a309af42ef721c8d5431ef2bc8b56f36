ef08e6b3c7263fa669f2158dded07e8e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _FontAwesome = _interopRequireDefault(require("react-native-vector-icons/FontAwesome"));

var _LoginButtonComponent = _interopRequireDefault(require("../components/login/LoginButtonComponent"));

var _ForgotPasswordButtonComponent = _interopRequireDefault(require("../components/login/ForgotPasswordButtonComponent"));

var _RegisterButtonComponent = _interopRequireDefault(require("../components/login/RegisterButtonComponent"));

var _reactNavigation = require("react-navigation");

var _reactDom = require("react-dom");

var _ReactNativeStyleAttributes = require("react-native/Libraries/Components/View/ReactNativeStyleAttributes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var LoginMobile = function (_Component) {
  (0, _inherits2.default)(LoginMobile, _Component);

  var _super = _createSuper(LoginMobile);

  function LoginMobile() {
    var _this;

    (0, _classCallCheck2.default)(this, LoginMobile);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      message: ''
    };

    _this.handleMessageChange = function (message) {
      if (message !== "Success") {
        _this.setState({
          message: message
        });
      } else {
        _this.usernameInput.clear();

        _this.passwordInput.clear();
      }
    };

    _this.usernameChangedHandler = function _callee(val) {
      return _regenerator.default.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              global.username_login = val;

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    };

    _this.passwordChangedHandler = function _callee2(val) {
      return _regenerator.default.async(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              global.password_login = val;

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, null, Promise);
    };

    return _this;
  }

  (0, _createClass2.default)(LoginMobile, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return _react.default.createElement(_reactNative.View, {
        style: styles.container
      }, _react.default.createElement(_reactNative.ImageBackground, {
        source: require("../assets/images/background3.png"),
        resizeMode: "cover",
        style: styles.background
      }, _react.default.createElement(_reactNative.View, {
        style: styles.login_Login
      }, _react.default.createElement(_reactNative.View, {
        style: styles.login_LoginBackground
      }, _react.default.createElement(_reactNative.Image, {
        source: require("../assets/images/dailygrind5.png"),
        resizeMode: "contain",
        style: styles.logo
      }), _react.default.createElement(_reactNative.Text, {
        style: styles.text_Incorrect
      }, this.state.message), _react.default.createElement(_reactNative.View, {
        style: styles.username
      }, _react.default.createElement(_reactNative.TextInput, {
        placeholder: "Username",
        style: styles.usernameField1,
        onChangeText: function onChangeText(val) {
          _this2.usernameChangedHandler(val);
        },
        ref: function ref(input) {
          _this2.usernameInput = input;
        }
      }), _react.default.createElement(_FontAwesome.default, {
        name: "user",
        style: styles.userIcon1
      })), _react.default.createElement(_reactNative.View, {
        style: styles.password
      }, _react.default.createElement(_reactNative.TextInput, {
        placeholder: "Password",
        secureTextEntry: true,
        style: styles.passwordField1,
        onChangeText: function onChangeText(val) {
          _this2.passwordChangedHandler(val);
        },
        ref: function ref(input) {
          _this2.passwordInput = input;
        }
      }), _react.default.createElement(_FontAwesome.default, {
        name: "key",
        style: styles.passwordIcon1
      })), _react.default.createElement(_LoginButtonComponent.default, {
        navigation: this.props.navigation,
        state: this.state,
        onMessageChange: this.handleMessageChange,
        style: styles.loginButtonComponent
      }), _react.default.createElement(_ForgotPasswordButtonComponent.default, {
        navigation: this.props.navigation,
        style: styles.forgotPasswordButtonComponent
      }))), _react.default.createElement(_reactNative.View, {
        style: styles.login_Register
      }, _react.default.createElement(_reactNative.View, {
        style: styles.login_RegisterBackground
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.text_NotRegistered
      }, "Not Registered?"), _react.default.createElement(_RegisterButtonComponent.default, {
        navigation: this.props.navigation,
        state: this.state,
        style: styles.registerButtonComponent
      })))));
    }
  }]);
  return LoginMobile;
}(_react.Component);

exports.default = LoginMobile;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "rgba(255,255,255,1)"
  },
  background: {
    flex: 1,
    justifyContent: "center",
    width: "100%",
    height: "100%"
  },
  login_Login: {
    top: "12.49%",
    height: "53.31%",
    position: "absolute",
    right: 22,
    left: 22
  },
  login_LoginBackground: {
    top: "0%",
    left: 0,
    height: "100%",
    position: "absolute",
    backgroundColor: "rgba(255,255,255,1)",
    borderRadius: 15,
    shadowColor: "rgba(0,0,0,1)",
    shadowOffset: {
      width: 3,
      height: 3
    },
    elevation: 10,
    shadowOpacity: 0.25,
    shadowRadius: 10,
    right: 0,
    borderColor: "rgba(210,210,210,210)",
    borderWidth: 1
  },
  logo: {
    top: "12.93%",
    left: 0,
    height: 52,
    position: "absolute",
    width: "100%"
  },
  text_Incorrect: {
    top: "28.5%",
    left: 0,
    position: "absolute",
    fontFamily: "roboto-700",
    color: "rgba(242, 38, 19, 1)",
    fontSize: 16,
    textAlign: "center",
    right: 0
  },
  username: {
    top: "35.7%",
    left: "8%",
    height: 41,
    position: "absolute",
    right: "8%"
  },
  usernameField1: {
    position: "absolute",
    fontFamily: "roboto-regular",
    color: "#121212",
    height: 41,
    borderWidth: 1,
    borderColor: "#000000",
    textAlign: "left",
    backgroundColor: "rgba(255,255,255,1)",
    fontSize: 16,
    top: "0%",
    left: 29,
    borderTopWidth: 0,
    borderRightWidth: 0,
    borderLeftWidth: 0,
    right: 0
  },
  userIcon1: {
    top: 13,
    left: 0,
    position: "absolute",
    color: "rgba(15,163,177,1)",
    fontSize: 25
  },
  password: {
    top: "50.83%",
    left: "8%",
    height: 41,
    position: "absolute",
    right: "8%"
  },
  passwordField1: {
    position: "absolute",
    fontFamily: "roboto-regular",
    color: "#121212",
    height: 41,
    borderWidth: 1,
    borderColor: "#000000",
    textAlign: "left",
    backgroundColor: "rgba(255,255,255,1)",
    fontSize: 16,
    top: "0%",
    left: 29,
    borderTopWidth: 0,
    borderRightWidth: 0,
    borderLeftWidth: 0,
    right: 0
  },
  passwordIcon1: {
    top: 14,
    left: 0,
    position: "absolute",
    color: "rgba(15,163,177,1)",
    fontSize: 20
  },
  loginButtonComponent: {
    position: "absolute",
    top: "70.97%",
    left: 56,
    height: "11.24%",
    right: 56
  },
  forgotPasswordButtonComponent: {
    position: "absolute",
    top: "87.14%",
    left: 0,
    right: 0,
    height: 19
  },
  login_Register: {
    top: "75.88%",
    height: "15.14%",
    position: "absolute",
    left: 22,
    right: 22
  },
  login_RegisterBackground: {
    top: "0%",
    left: 0,
    width: "100%",
    height: "100%",
    position: "absolute",
    backgroundColor: "rgba(255,255,255,1)",
    borderRadius: 15,
    shadowColor: "rgba(0,0,0,1)",
    shadowOffset: {
      width: 3,
      height: 3
    },
    elevation: 10,
    shadowOpacity: 0.25,
    shadowRadius: 10,
    borderColor: "rgba(210,210,210,210)",
    borderWidth: 1
  },
  text_NotRegistered: {
    top: "18.74%",
    left: 0,
    position: "absolute",
    fontFamily: "roboto-regular",
    color: "rgba(0,0,0,1)",
    fontSize: 16,
    right: 0,
    textAlign: "center"
  },
  registerButtonComponent: {
    position: "absolute",
    top: "42.15%",
    left: 56,
    height: "39.64%",
    right: 56
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,